!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports["ngx-i18nsupport-lib"]=t():e["ngx-i18nsupport-lib"]=t()}(this,function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=41)}([function(e,t,n){(function(e,r){var i=/%[sdj%]/g;t.format=function(e){if(!_(e)){for(var t=[],n=0;n<arguments.length;n++)t.push(s(arguments[n]));return t.join(" ")}n=1;for(var r=arguments,o=r.length,a=String(e).replace(i,function(e){if("%%"===e)return"%";if(n>=o)return e;switch(e){case"%s":return String(r[n++]);case"%d":return Number(r[n++]);case"%j":try{return JSON.stringify(r[n++])}catch(e){return"[Circular]"}default:return e}}),u=r[n];n<o;u=r[++n])m(u)||!E(u)?a+=" "+u:a+=" "+s(u);return a},t.deprecate=function(n,i){if(y(e.process))return function(){return t.deprecate(n,i).apply(this,arguments)};if(!0===r.noDeprecation)return n;var o=!1;return function(){if(!o){if(r.throwDeprecation)throw new Error(i);r.traceDeprecation?console.trace(i):console.error(i),o=!0}return n.apply(this,arguments)}};var o,a={};function s(e,n){var r={seen:[],stylize:l};return arguments.length>=3&&(r.depth=arguments[2]),arguments.length>=4&&(r.colors=arguments[3]),g(n)?r.showHidden=n:n&&t._extend(r,n),y(r.showHidden)&&(r.showHidden=!1),y(r.depth)&&(r.depth=2),y(r.colors)&&(r.colors=!1),y(r.customInspect)&&(r.customInspect=!0),r.colors&&(r.stylize=u),c(r,e,r.depth)}function u(e,t){var n=s.styles[t];return n?"["+s.colors[n][0]+"m"+e+"["+s.colors[n][1]+"m":e}function l(e,t){return e}function c(e,n,r){if(e.customInspect&&n&&b(n.inspect)&&n.inspect!==t.inspect&&(!n.constructor||n.constructor.prototype!==n)){var i=n.inspect(r,e);return _(i)||(i=c(e,i,r)),i}var o=function(e,t){if(y(t))return e.stylize("undefined","undefined");if(_(t)){var n="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(n,"string")}if(d(t))return e.stylize(""+t,"number");if(g(t))return e.stylize(""+t,"boolean");if(m(t))return e.stylize("null","null")}(e,n);if(o)return o;var a=Object.keys(n),s=function(e){var t={};return e.forEach(function(e,n){t[e]=!0}),t}(a);if(e.showHidden&&(a=Object.getOwnPropertyNames(n)),N(n)&&(a.indexOf("message")>=0||a.indexOf("description")>=0))return p(n);if(0===a.length){if(b(n)){var u=n.name?": "+n.name:"";return e.stylize("[Function"+u+"]","special")}if(T(n))return e.stylize(RegExp.prototype.toString.call(n),"regexp");if(v(n))return e.stylize(Date.prototype.toString.call(n),"date");if(N(n))return p(n)}var l,E="",w=!1,A=["{","}"];(h(n)&&(w=!0,A=["[","]"]),b(n))&&(E=" [Function"+(n.name?": "+n.name:"")+"]");return T(n)&&(E=" "+RegExp.prototype.toString.call(n)),v(n)&&(E=" "+Date.prototype.toUTCString.call(n)),N(n)&&(E=" "+p(n)),0!==a.length||w&&0!=n.length?r<0?T(n)?e.stylize(RegExp.prototype.toString.call(n),"regexp"):e.stylize("[Object]","special"):(e.seen.push(n),l=w?function(e,t,n,r,i){for(var o=[],a=0,s=t.length;a<s;++a)C(t,String(a))?o.push(f(e,t,n,r,String(a),!0)):o.push("");return i.forEach(function(i){i.match(/^\d+$/)||o.push(f(e,t,n,r,i,!0))}),o}(e,n,r,s,a):a.map(function(t){return f(e,n,r,s,t,w)}),e.seen.pop(),function(e,t,n){if(e.reduce(function(e,t){return 0,t.indexOf("\n")>=0&&0,e+t.replace(/\u001b\[\d\d?m/g,"").length+1},0)>60)return n[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+n[1];return n[0]+t+" "+e.join(", ")+" "+n[1]}(l,E,A)):A[0]+E+A[1]}function p(e){return"["+Error.prototype.toString.call(e)+"]"}function f(e,t,n,r,i,o){var a,s,u;if((u=Object.getOwnPropertyDescriptor(t,i)||{value:t[i]}).get?s=u.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):u.set&&(s=e.stylize("[Setter]","special")),C(r,i)||(a="["+i+"]"),s||(e.seen.indexOf(u.value)<0?(s=m(n)?c(e,u.value,null):c(e,u.value,n-1)).indexOf("\n")>-1&&(s=o?s.split("\n").map(function(e){return"  "+e}).join("\n").substr(2):"\n"+s.split("\n").map(function(e){return"   "+e}).join("\n")):s=e.stylize("[Circular]","special")),y(a)){if(o&&i.match(/^\d+$/))return s;(a=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(a=a.substr(1,a.length-2),a=e.stylize(a,"name")):(a=a.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),a=e.stylize(a,"string"))}return a+": "+s}function h(e){return Array.isArray(e)}function g(e){return"boolean"==typeof e}function m(e){return null===e}function d(e){return"number"==typeof e}function _(e){return"string"==typeof e}function y(e){return void 0===e}function T(e){return E(e)&&"[object RegExp]"===w(e)}function E(e){return"object"==typeof e&&null!==e}function v(e){return E(e)&&"[object Date]"===w(e)}function N(e){return E(e)&&("[object Error]"===w(e)||e instanceof Error)}function b(e){return"function"==typeof e}function w(e){return Object.prototype.toString.call(e)}function A(e){return e<10?"0"+e.toString(10):e.toString(10)}t.debuglog=function(e){if(y(o)&&(o=r.env.NODE_DEBUG||""),e=e.toUpperCase(),!a[e])if(new RegExp("\\b"+e+"\\b","i").test(o)){var n=r.pid;a[e]=function(){var r=t.format.apply(t,arguments);console.error("%s %d: %s",e,n,r)}}else a[e]=function(){};return a[e]},t.inspect=s,s.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},s.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},t.isArray=h,t.isBoolean=g,t.isNull=m,t.isNullOrUndefined=function(e){return null==e},t.isNumber=d,t.isString=_,t.isSymbol=function(e){return"symbol"==typeof e},t.isUndefined=y,t.isRegExp=T,t.isObject=E,t.isDate=v,t.isError=N,t.isFunction=b,t.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},t.isBuffer=n(36);var M=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function C(e,t){return Object.prototype.hasOwnProperty.call(e,t)}t.log=function(){var e,n;console.log("%s - %s",(e=new Date,n=[A(e.getHours()),A(e.getMinutes()),A(e.getSeconds())].join(":"),[e.getDate(),M[e.getMonth()],n].join(" ")),t.format.apply(t,arguments))},t.inherits=n(35),t._extend=function(e,t){if(!t||!E(t))return e;for(var n=Object.keys(t),r=n.length;r--;)e[n[r]]=t[n[r]];return e}}).call(this,n(38),n(37))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.TEXT=0]="TEXT",e[e.PLACEHOLDER=1]="PLACEHOLDER",e[e.START_TAG=2]="START_TAG",e[e.END_TAG=3]="END_TAG",e[e.EMPTY_TAG=4]="EMPTY_TAG",e[e.ICU_MESSAGE=5]="ICU_MESSAGE",e[e.ICU_MESSAGE_REF=6]="ICU_MESSAGE_REF"}(t.ParsedMessagePartType||(t.ParsedMessagePartType={}));var r=function(){return function(e){this.type=e}}();t.ParsedMessagePart=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(9),i=function(){function e(){}return e.getFirstElementByTagName=function(e,t){var n=e.getElementsByTagName(t);return n&&n.length>0?n.item(0):null},e.getElementByTagNameAndId=function(e,t,n){var r=e.getElementsByTagName(t);if(r&&r.length>0)for(var i=0;i<r.length;i++){var o=r.item(i);if(o.getAttribute("id")===n)return o}return null},e.getElementFollowingSibling=function(e){if(!e)return null;for(var t=e.nextSibling;t;){if(t.nodeType===t.ELEMENT_NODE)return t;t=t.nextSibling}return null},e.getElementPrecedingSibling=function(e){if(!e)return null;for(var t=e.previousSibling;t;){if(t.nodeType===t.ELEMENT_NODE)return t;t=t.previousSibling}return null},e.getXMLContent=function(e){if(!e)return null;var t=(new r.XMLSerializer).serializeToString(e),n=e.nodeName,i=new RegExp("<"+n+"[^>]*>","g");t=t.replace(i,"");var o=new RegExp("</"+n+">","g");return t=t.replace(o,"")},e.getPCDATA=function(e){if(!e)return null;for(var t="",n=e.childNodes,r=0;r<n.length;r++){var i=n.item(r);i.nodeType!==i.TEXT_NODE&&i.nodeType!==i.CDATA_SECTION_NODE||(t+=i.nodeValue)}return 0===t.length?null:t},e.replaceContentWithXMLContent=function(e,t){for(;e.firstChild;)e.removeChild(e.firstChild);for(var n=(new r.DOMParser).parseFromString("<fragment>"+t+"</fragment>","application/xml").getElementsByTagName("fragment").item(0).childNodes,i=0;i<n.length;i++){var o=n.item(i);e.appendChild(e.ownerDocument.importNode(o,!0))}},e.getPreviousElementSibling=function(e){for(var t=e.previousSibling;null!==t;){if(t.nodeType===t.ELEMENT_NODE)return t;t=t.previousSibling}return null},e.createFollowingSibling=function(t,n){var r=n.ownerDocument.createElement(t);return e.insertAfter(r,n)},e.insertAfter=function(e,t){return null!==t.nextSibling?t.parentNode.insertBefore(e,t.nextSibling):t.parentNode.appendChild(e),e},e.insertBefore=function(e,t){return t.parentNode.insertBefore(e,t),e},e}();t.DOMUtilities=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(40);t.TranslationMessagesFileFactory=r.TranslationMessagesFileFactory,function(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}(n(7))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(3),i=n(0),o=n(9),a=n(32),s=function(){function e(){this.transUnits=null,this._warnings=[]}return e.prototype.parseContent=function(e,t,n,r){this._filename=t,this._encoding=n,this._parsedDocument=(new o.DOMParser).parseFromString(e,"text/xml"),this._fileEndsWithEOL=e.endsWith("\n")},e.prototype.lazyInitializeTransUnits=function(){i.isNullOrUndefined(this.transUnits)&&(this.initializeTransUnits(),this.countNumbers())},e.prototype.countNumbers=function(){var e=this;this._numberOfTransUnitsWithMissingId=0,this._numberOfUntranslatedTransUnits=0,this._numberOfReviewedTransUnits=0,this.forEachTransUnit(function(t){(i.isNullOrUndefined(t.id)||""===t.id)&&e._numberOfTransUnitsWithMissingId++;var n=t.targetState();(i.isNullOrUndefined(n)||n===r.STATE_NEW)&&e._numberOfUntranslatedTransUnits++,n===r.STATE_TRANSLATED&&e._numberOfReviewedTransUnits++})},e.prototype.warnings=function(){return this.lazyInitializeTransUnits(),this._warnings},e.prototype.numberOfTransUnits=function(){return this.lazyInitializeTransUnits(),this.transUnits.length},e.prototype.numberOfUntranslatedTransUnits=function(){return this.lazyInitializeTransUnits(),this._numberOfUntranslatedTransUnits},e.prototype.numberOfReviewedTransUnits=function(){return this.lazyInitializeTransUnits(),this._numberOfReviewedTransUnits},e.prototype.numberOfTransUnitsWithMissingId=function(){return this.lazyInitializeTransUnits(),this._numberOfTransUnitsWithMissingId},e.prototype.forEachTransUnit=function(e){this.lazyInitializeTransUnits(),this.transUnits.forEach(function(t){return e(t)})},e.prototype.transUnitWithId=function(e){return this.lazyInitializeTransUnits(),this.transUnits.find(function(t){return t.id===e})},e.prototype.setNewTransUnitTargetPraefix=function(e){this.targetPraefix=e},e.prototype.getNewTransUnitTargetPraefix=function(){return i.isNullOrUndefined(this.targetPraefix)?"":this.targetPraefix},e.prototype.setNewTransUnitTargetSuffix=function(e){this.targetSuffix=e},e.prototype.getNewTransUnitTargetSuffix=function(){return i.isNullOrUndefined(this.targetSuffix)?"":this.targetSuffix},e.prototype.removeTransUnitWithId=function(e){var t=this._parsedDocument.getElementById(e);t&&(t.parentNode.removeChild(t),this.lazyInitializeTransUnits(),this.transUnits=this.transUnits.filter(function(t){return t.id!==e}),this.countNumbers())},e.prototype.filename=function(){return this._filename},e.prototype.encoding=function(){return this._encoding},e.prototype.editedContent=function(e){var t={};!0===e&&(t.beautify=!0,t.indentString="  ",t.mixedContentElements=this.elementsWithMixedContent());var n=(new a.XmlSerializer).serializeToString(this._parsedDocument,t);return this._fileEndsWithEOL?n+"\n":n},e}();t.AbstractTranslationMessagesFile=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(3),i=n(4),o=n(0),a=function(){function e(e,t,n){this._element=e,this._id=t,this._translationMessagesFile=n}return Object.defineProperty(e.prototype,"id",{get:function(){return this._id},enumerable:!0,configurable:!0}),e.prototype.translationMessagesFile=function(){return this._translationMessagesFile},e.prototype.supportsSetSourceContent=function(){return!0},e.prototype.sourceContentNormalized=function(){return o.isNullOrUndefined(this._sourceContentNormalized)&&(this._sourceContentNormalized=this.createSourceContentNormalized()),this._sourceContentNormalized},e.prototype.targetState=function(){var e=this.nativeTargetState();return this.mapNativeStateToState(e)},e.prototype.setTargetState=function(e){this.setNativeTargetState(this.mapStateToNativeState(e)),this.translationMessagesFile()instanceof i.AbstractTranslationMessagesFile&&this.translationMessagesFile().countNumbers()},e.prototype.supportsSetSourceReferences=function(){return!0},e.prototype.supportsSetDescriptionAndMeaning=function(){return!0},e.prototype.asXmlElement=function(){return this._element},e.prototype.translate=function(e){var t;t=o.isString(e)?e:e.asNativeString(),this.translateNative(t),this.setTargetState(r.STATE_TRANSLATED)},e.prototype.isICUMessage=function(e){return this.messageParser().isICUMessageStart(e)},e}();t.AbstractTransUnit=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r={A:"LINK",B:"BOLD_TEXT",BR:"LINE_BREAK",EM:"EMPHASISED_TEXT",H1:"HEADING_LEVEL1",H2:"HEADING_LEVEL2",H3:"HEADING_LEVEL3",H4:"HEADING_LEVEL4",H5:"HEADING_LEVEL5",H6:"HEADING_LEVEL6",HR:"HORIZONTAL_RULE",I:"ITALIC_TEXT",LI:"LIST_ITEM",LINK:"MEDIA_LINK",OL:"ORDERED_LIST",P:"PARAGRAPH",Q:"QUOTATION",S:"STRIKETHROUGH_TEXT",SMALL:"SMALL_TEXT",SUB:"SUBSTRIPT",SUP:"SUPERSCRIPT",TBODY:"TABLE_BODY",TD:"TABLE_CELL",TFOOT:"TABLE_FOOTER",TH:"TABLE_HEADER_CELL",THEAD:"TABLE_HEADER",TR:"TABLE_ROW",TT:"MONOSPACED_TEXT",U:"UNDERLINED_TEXT",UL:"UNORDERED_LIST"},i=["BR","HR","IMG","AREA","LINK","WBR"],o=function(){function e(){}return e.prototype.getStartTagPlaceholderName=function(e,t){var n=e.toUpperCase();return"START_"+(r[n]||"TAG_"+n)+this.counterString(t)},e.prototype.getCloseTagPlaceholderName=function(e){var t=e.toUpperCase();return"CLOSE_"+(r[t]||"TAG_"+t)},e.prototype.getEmptyTagPlaceholderName=function(e,t){var n=e.toUpperCase();return(r[n]||"TAG_"+n)+this.counterString(t)},e.prototype.getCtypeForTag=function(e){switch(e.toLowerCase()){case"br":return"lb";case"img":return"image";default:return"x-"+e}},e.prototype.getTagnameFromStartTagPlaceholderName=function(e){if(e.startsWith("START_TAG_"))return this.stripCounter(e.substring("START_TAG_".length)).toLowerCase();if(e.startsWith("START_")){var t=this.stripCounter(e.substring("START_".length)),n=Object.keys(r).find(function(e){return r[e]===t});return n?n.toLowerCase():null}return null},e.prototype.getTagnameFromCloseTagPlaceholderName=function(e){if(e.startsWith("CLOSE_TAG_"))return this.stripCounter(e.substring("CLOSE_TAG_".length)).toLowerCase();if(e.startsWith("CLOSE_")){var t=this.stripCounter(e.substring("CLOSE_".length)),n=Object.keys(r).find(function(e){return r[e]===t});return n?n.toLowerCase():null}return null},e.prototype.isEmptyTagPlaceholderName=function(e){var t,n=this.stripCounter(e);return!!((t=n.startsWith("TAG_")?n.substring(4).toUpperCase():Object.keys(r).find(function(e){return r[e]===n}))&&i.indexOf(t)>=0)},e.prototype.getTagnameFromEmptyTagPlaceholderName=function(e){var t,n=this.stripCounter(e);return(t=n.startsWith("TAG_")?n.substring(4).toUpperCase():Object.keys(r).find(function(e){return r[e]===n}))&&i.indexOf(t)>=0?t.toLowerCase():null},e.prototype.stripCounter=function(e){if(e){var t=/(.*)_[0-9]+$/;if(e.match(t))return e.replace(t,"$1")}return e},e.prototype.counterString=function(e){return 0===e?"":"_"+e.toString(10)},e}();t.TagMapping=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FORMAT_XLIFF12="xlf",t.FORMAT_XLIFF20="xlf2",t.FORMAT_XMB="xmb",t.FORMAT_XTB="xtb",t.FILETYPE_XLIFF12="XLIFF 1.2",t.FILETYPE_XLIFF20="XLIFF 2.0",t.FILETYPE_XMB="XMB",t.FILETYPE_XTB="XTB",t.STATE_NEW="new",t.STATE_TRANSLATED="translated",t.STATE_FINAL="final",t.NORMALIZATION_FORMAT_DEFAULT="default",t.NORMALIZATION_FORMAT_NGXTRANSLATE="ngxtranslate"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(30),i=n(21),o=n(9),a=n(0),s=n(2),u=n(14),l=function(){function e(){}return e.prototype.createNormalizedMessageFromXML=function(e,t){var n=new r.ParsedMessage(this,t);return e&&(n.setXmlRepresentation(e),this.addPartsOfNodeToMessage(e,n,!1)),n},e.prototype.createNormalizedMessageFromXMLString=function(e,t){var n=(new o.DOMParser).parseFromString("<dummy>"+e+"</dummy>","text/xml").childNodes.item(0);return this.createNormalizedMessageFromXML(n,t)},e.prototype.addPartsOfNodeToMessage=function(e,t,n){var r=!0;if(n){if(e.nodeType===e.TEXT_NODE)return void t.addText(e.textContent);e.nodeType===e.ELEMENT_NODE&&(r=this.processStartElement(e,t))}if(r){var i=this.getICUMessageText(e),o=!a.isNullOrUndefined(i);if(o)try{t.addICUMessage(i)}catch(e){console.log("non ICU message: ",i,e),o=!1}if(!o)for(var s=e.childNodes,u=0;u<s.length;u++)this.addPartsOfNodeToMessage(s.item(u),t,!0)}e.nodeType===e.ELEMENT_NODE&&this.processEndElement(e,t)},e.prototype.getICUMessageText=function(e){var t=e.childNodes;if(0===t.length)return null;var n=t.item(0);return n.nodeType===n.TEXT_NODE&&this.isICUMessageStart(n.textContent)?s.DOMUtilities.getXMLContent(e):null},e.prototype.isICUMessageStart=function(e){return u.ParsedMessagePartICUMessage.looksLikeICUMessage(e)},e.prototype.parseNormalizedString=function(e,t){var n,o=new r.ParsedMessage(this,t),s=[];try{n=(new i.ParsedMesageTokenizer).tokenize(e)}catch(t){throw new Error(a.format('unexpected error while parsing message: "%s" (parsed "%")',t.message,e))}if(n.forEach(function(n){var r=null;switch(n.type){case i.TEXT:o.addText(n.value.text);break;case i.START_TAG:o.addStartTag(n.value.name,n.value.idcounter),s.push(n.value.name);break;case i.END_TAG:if(o.addEndTag(n.value.name),0===s.length||s[s.length-1]!==n.value.name)throw new Error(a.format('unexpected close tag "%s" (parsed "%s")',n.value.name,e));s.pop();break;case i.EMPTY_TAG:o.addEmptyTag(n.value.name,n.value.idcounter);break;case i.PLACEHOLDER:r=t?t.getPlaceholderDisp(n.value.idcounter):null,o.addPlaceholder(n.value.idcounter,r);break;case i.ICU_MESSAGE_REF:r=t?t.getICUMessageRefDisp(n.value.idcounter):null,o.addICUMessageRef(n.value.idcounter,r);break;case i.ICU_MESSAGE:throw new Error(a.format('<ICUMessage/> not allowed here, use parseICUMessage instead (parsed "%")',e))}}),s.length>0)throw new Error(a.format('missing close tag "%s" (parsed "%s")',s[s.length-1],e));return o.setXmlRepresentation(this.createXmlRepresentation(o)),o},e.prototype.parseICUMessage=function(e,t){var n=new r.ParsedMessage(this,t);return n.addICUMessage(e),n},e.prototype.parseIdCountFromName=function(e){var t=/.*_([0-9]*)/.exec(e);if(a.isNullOrUndefined(t)||""===t[1])return 0;var n=t[1];return parseInt(n,10)},e.prototype.createXmlRepresentation=function(e){var t=(new o.DOMParser).parseFromString("<dummy/>","text/xml").getElementsByTagName("dummy").item(0);return this.addXmlRepresentationToRoot(e,t),t},e.prototype.createXmlRepresentationOfTextPart=function(e,t){return t.ownerDocument.createTextNode(e.asDisplayString())},e}();t.AbstractMessageParser=l},function(e,t,n){function r(e){this.options=e||{locator:{}}}function i(){this.cdata=!1}function o(e,t){t.lineNumber=e.lineNumber,t.columnNumber=e.columnNumber}function a(e){if(e)return"\n@"+(e.systemId||"")+"#[line:"+e.lineNumber+",col:"+e.columnNumber+"]"}function s(e,t,n){return"string"==typeof e?e.substr(t,n):e.length>=t+n||t?new java.lang.String(e,t,n)+"":e}function u(e,t){e.currentElement?e.currentElement.appendChild(t):e.doc.appendChild(t)}r.prototype.parseFromString=function(e,t){var n=this.options,r=new l,o=n.domBuilder||new i,s=n.errorHandler,u=n.locator,c=n.xmlns||{},p={lt:"<",gt:">",amp:"&",quot:'"',apos:"'"};return u&&o.setDocumentLocator(u),r.errorHandler=function(e,t,n){if(!e){if(t instanceof i)return t;e=t}var r={},o=e instanceof Function;function s(t){var i=e[t];!i&&o&&(i=2==e.length?function(n){e(t,n)}:e),r[t]=i&&function(e){i("[xmldom "+t+"]\t"+e+a(n))}||function(){}}return n=n||{},s("warning"),s("error"),s("fatalError"),r}(s,o,u),r.domBuilder=n.domBuilder||o,/\/x?html?$/.test(t)&&(p.nbsp=" ",p.copy="©",c[""]="http://www.w3.org/1999/xhtml"),c.xml=c.xml||"http://www.w3.org/XML/1998/namespace",e?r.parse(e,c,p):r.errorHandler.error("invalid doc source"),o.doc},i.prototype={startDocument:function(){this.doc=(new c).createDocument(null,null,null),this.locator&&(this.doc.documentURI=this.locator.systemId)},startElement:function(e,t,n,r){var i=this.doc,a=i.createElementNS(e,n||t),s=r.length;u(this,a),this.currentElement=a,this.locator&&o(this.locator,a);for(var l=0;l<s;l++){e=r.getURI(l);var c=r.getValue(l),p=(n=r.getQName(l),i.createAttributeNS(e,n));this.locator&&o(r.getLocator(l),p),p.value=p.nodeValue=c,a.setAttributeNode(p)}},endElement:function(e,t,n){var r=this.currentElement;r.tagName;this.currentElement=r.parentNode},startPrefixMapping:function(e,t){},endPrefixMapping:function(e){},processingInstruction:function(e,t){var n=this.doc.createProcessingInstruction(e,t);this.locator&&o(this.locator,n),u(this,n)},ignorableWhitespace:function(e,t,n){},characters:function(e,t,n){if(e=s.apply(this,arguments)){if(this.cdata)var r=this.doc.createCDATASection(e);else r=this.doc.createTextNode(e);this.currentElement?this.currentElement.appendChild(r):/^\s*$/.test(e)&&this.doc.appendChild(r),this.locator&&o(this.locator,r)}},skippedEntity:function(e){},endDocument:function(){this.doc.normalize()},setDocumentLocator:function(e){(this.locator=e)&&(e.lineNumber=0)},comment:function(e,t,n){e=s.apply(this,arguments);var r=this.doc.createComment(e);this.locator&&o(this.locator,r),u(this,r)},startCDATA:function(){this.cdata=!0},endCDATA:function(){this.cdata=!1},startDTD:function(e,t,n){var r=this.doc.implementation;if(r&&r.createDocumentType){var i=r.createDocumentType(e,t,n);this.locator&&o(this.locator,i),u(this,i)}},warning:function(e){console.warn("[xmldom warning]\t"+e,a(this.locator))},error:function(e){console.error("[xmldom error]\t"+e,a(this.locator))},fatalError:function(e){throw console.error("[xmldom fatalError]\t"+e,a(this.locator)),e}},"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl".replace(/\w+/g,function(e){i.prototype[e]=function(){return null}});var l=n(34).XMLReader,c=t.DOMImplementation=n(15).DOMImplementation;t.XMLSerializer=n(15).XMLSerializer,t.DOMParser=r},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(3),a=n(0),s=n(2),u=n(4),l=n(12),c=n(19);t.XTB_DOCTYPE="<!DOCTYPE translationbundle [\n  <!ELEMENT translationbundle (translation)*>\n  <!ATTLIST translationbundle lang CDATA #REQUIRED>\n  <!ELEMENT translation (#PCDATA|ph)*>\n  <!ATTLIST translation id CDATA #REQUIRED>\n  <!ELEMENT ph EMPTY>\n  <!ATTLIST ph name CDATA #REQUIRED>\n]>";var p=function(e){function t(t,n,r,i){var o=e.call(this)||this;return o._warnings=[],o._numberOfTransUnitsWithMissingId=0,o.initializeFromContent(t,n,r,i),o}return i(t,e),t.prototype.initializeFromContent=function(e,t,n,r){if(this.parseContent(e,t,n),1!==this._parsedDocument.getElementsByTagName("translationbundle").length)throw new Error(a.format('File "%s" seems to be no xtb file (should contain a translationbundle element)',t));if(r)try{this._masterFile=new l.XmbFile(r.xmlContent,r.path,r.encoding);var i=this._masterFile.numberOfTransUnits(),o=this.numberOfTransUnits();i!==o&&this._warnings.push(a.format("%s trans units found in master, but this file has %s. Check if it is the correct master",i,o))}catch(e){throw new Error(a.format('File "%s" seems to be no xmb file. An xtb file needs xmb as master file.',r.path))}return this},t.prototype.initializeTransUnits=function(){this.transUnits=[];for(var e=this._parsedDocument.getElementsByTagName("translation"),t=0;t<e.length;t++){var n=e.item(t),r=n.getAttribute("id");r||this._warnings.push(a.format('oops, msg without "id" found in master, please check file %s',this._filename));var i=null;this._masterFile&&(i=this._masterFile.transUnitWithId(r)),this.transUnits.push(new c.XtbTransUnit(n,r,this,i))}},t.prototype.i18nFormat=function(){return o.FORMAT_XTB},t.prototype.fileType=function(){return o.FILETYPE_XTB},t.prototype.elementsWithMixedContent=function(){return["translation"]},t.prototype.sourceLanguage=function(){return this._masterFile?this._masterFile.sourceLanguage():null},t.prototype.setSourceLanguage=function(e){},t.prototype.targetLanguage=function(){var e=s.DOMUtilities.getFirstElementByTagName(this._parsedDocument,"translationbundle");return e?e.getAttribute("lang"):null},t.prototype.setTargetLanguage=function(e){var t=s.DOMUtilities.getFirstElementByTagName(this._parsedDocument,"translationbundle");t&&t.setAttribute("lang",e)},t.prototype.importNewTransUnit=function(e,t,n,r){if(this.transUnitWithId(e.id))throw new Error(a.format("tu with id %s already exists in file, cannot import it",e.id));var i=e.cloneWithSourceAsTarget(t,n,this),o=s.DOMUtilities.getFirstElementByTagName(this._parsedDocument,"translationbundle");if(!o)throw new Error(a.format('File "%s" seems to be no xtb file (should contain a translationbundle element)',this._filename));var u=o.ownerDocument.createElement("translation");u.setAttribute("id",e.id);var l=n||t?e.sourceContent():"";e.isICUMessage(l)||(l=this.getNewTransUnitTargetPraefix()+l+this.getNewTransUnitTargetSuffix()),s.DOMUtilities.replaceContentWithXMLContent(u,l);var p=new c.XtbTransUnit(u,e.id,this,i),f=!1,h=!1;r&&(this.transUnitWithId(r.id)&&(h=!0));if(void 0===r||r&&!h)o.appendChild(p.asXmlElement()),f=!0;else if(null===r){var g=s.DOMUtilities.getFirstElementByTagName(this._parsedDocument,"translation");g?(s.DOMUtilities.insertBefore(p.asXmlElement(),g),f=!0):(o.appendChild(p.asXmlElement()),f=!0)}else{var m=s.DOMUtilities.getElementByTagNameAndId(this._parsedDocument,"translation",r.id);m&&(s.DOMUtilities.insertAfter(p.asXmlElement(),m),f=!0)}return f?(this.lazyInitializeTransUnits(),this.transUnits.push(p),this.countNumbers(),p):null},t.prototype.createTranslationFileForLang=function(e,t,n,r){throw new Error(a.format('File "%s", xtb files are not translatable, they are already translations',t))},t}(u.AbstractTranslationMessagesFile);t.XtbFile=p},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(8),a=n(2),s=n(6),u=n(1),l=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.processStartElement=function(e,t){var n=e.tagName;if("ph"===n){var r=e.getAttribute("name");if(!r)return!0;if(r.startsWith("INTERPOLATION")){var i=this.parsePlaceholderIndexFromName(r);return t.addPlaceholder(i,null),!1}if(r.startsWith("START_")){var o=this.parseTagnameFromPhElement(e),a=this.parseIdCountFromName(r);return o&&t.addStartTag(o,a),!1}if(r.startsWith("CLOSE_"))return(o=this.parseTagnameFromPhElement(e))&&t.addEndTag(o),!1;if((new s.TagMapping).isEmptyTagPlaceholderName(r)){var u=(new s.TagMapping).getTagnameFromEmptyTagPlaceholderName(r);a=this.parseIdCountFromName(r);return t.addEmptyTag(u,a),!1}if(r.startsWith("ICU")){i=this.parseICUMessageIndexFromName(r);return t.addICUMessageRef(i,null),!1}}else if("source"===n)return!1;return!0},t.prototype.getICUMessageText=function(e){var t=e.childNodes;if(0===t.length)return null;var n,r=null;for(n=0;n<t.length;n++){var i=t.item(n);if(i.nodeType!==i.ELEMENT_NODE||"source"!==i.tagName){r=i;break}}if(r&&r.nodeType===r.TEXT_NODE){if(this.isICUMessageStart(r.textContent)){var o=a.DOMUtilities.getXMLContent(e);if(n>0){var s=new RegExp("<source[^>]*>.*</source>","g");return o.replace(s,"")}return o}return null}return null},t.prototype.processEndElement=function(e,t){},t.prototype.parsePlaceholderIndexFromName=function(e){var t="";return t="INTERPOLATION"===e?"0":e.substring("INTERPOLATION_".length),Number.parseInt(t)},t.prototype.parseICUMessageIndexFromName=function(e){var t="";return t="ICU"===e?"0":e.substring("ICU_".length),Number.parseInt(t)},t.prototype.parseTagnameFromPhElement=function(e){var t=a.DOMUtilities.getFirstElementByTagName(e,"ex");if(t){var n=a.DOMUtilities.getPCDATA(t);return n&&n.startsWith("<")&&n.endsWith(">")?"/"===n.charAt(1)?n.substring(2,n.length-1):n.substring(1,n.length-1):null}return null},t.prototype.addXmlRepresentationToRoot=function(e,t){var n=this;e.parts().forEach(function(e){var r=n.createXmlRepresentationOfPart(e,t);r&&t.appendChild(r)})},t.prototype.createXmlRepresentationOfPart=function(e,t){switch(e.type){case u.ParsedMessagePartType.TEXT:return this.createXmlRepresentationOfTextPart(e,t);case u.ParsedMessagePartType.START_TAG:return this.createXmlRepresentationOfStartTagPart(e,t);case u.ParsedMessagePartType.END_TAG:return this.createXmlRepresentationOfEndTagPart(e,t);case u.ParsedMessagePartType.EMPTY_TAG:return this.createXmlRepresentationOfEmptyTagPart(e,t);case u.ParsedMessagePartType.PLACEHOLDER:return this.createXmlRepresentationOfPlaceholderPart(e,t);case u.ParsedMessagePartType.ICU_MESSAGE_REF:return this.createXmlRepresentationOfICUMessageRefPart(e,t)}},t.prototype.createXmlRepresentationOfStartTagPart=function(e,t){var n=t.ownerDocument.createElement("ph"),r=(new s.TagMapping).getStartTagPlaceholderName(e.tagName(),e.idCounter());n.setAttribute("name",r);var i=t.ownerDocument.createElement("ex");return i.appendChild(t.ownerDocument.createTextNode("<"+e.tagName()+">")),n.appendChild(i),n},t.prototype.createXmlRepresentationOfEndTagPart=function(e,t){var n=t.ownerDocument.createElement("ph"),r=(new s.TagMapping).getCloseTagPlaceholderName(e.tagName());n.setAttribute("name",r);var i=t.ownerDocument.createElement("ex");return i.appendChild(t.ownerDocument.createTextNode("</"+e.tagName()+">")),n.appendChild(i),n},t.prototype.createXmlRepresentationOfEmptyTagPart=function(e,t){var n=t.ownerDocument.createElement("ph"),r=(new s.TagMapping).getEmptyTagPlaceholderName(e.tagName(),e.idCounter());n.setAttribute("name",r);var i=t.ownerDocument.createElement("ex");return i.appendChild(t.ownerDocument.createTextNode("<"+e.tagName()+">")),n.appendChild(i),n},t.prototype.createXmlRepresentationOfPlaceholderPart=function(e,t){var n=t.ownerDocument.createElement("ph"),r="INTERPOLATION";e.index()>0&&(r="INTERPOLATION_"+e.index().toString(10)),n.setAttribute("name",r);var i=t.ownerDocument.createElement("ex");return i.appendChild(t.ownerDocument.createTextNode(r)),n.appendChild(i),n},t.prototype.createXmlRepresentationOfICUMessageRefPart=function(e,t){var n=t.ownerDocument.createElement("ph"),r="ICU";e.index()>0&&(r="ICU_"+e.index().toString(10)),n.setAttribute("name",r);var i=t.ownerDocument.createElement("ex");return i.appendChild(t.ownerDocument.createTextNode(r)),n.appendChild(i),n},t}(o.AbstractMessageParser);t.XmbMessageParser=l},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(3),a=n(0),s=n(20),u=n(4),l=n(10),c=function(e){function t(t,n,r){var i=e.call(this)||this;return i._warnings=[],i._numberOfTransUnitsWithMissingId=0,i.initializeFromContent(t,n,r),i}return i(t,e),t.prototype.initializeFromContent=function(e,t,n){if(this.parseContent(e,t,n),1!==this._parsedDocument.getElementsByTagName("messagebundle").length)throw new Error(a.format('File "%s" seems to be no xmb file (should contain a messagebundle element)',t));return this},t.prototype.initializeTransUnits=function(){this.transUnits=[];for(var e=this._parsedDocument.getElementsByTagName("msg"),t=0;t<e.length;t++){var n=e.item(t),r=n.getAttribute("id");r||this._warnings.push(a.format('oops, msg without "id" found in master, please check file %s',this._filename)),this.transUnits.push(new s.XmbTransUnit(n,r,this))}},t.prototype.i18nFormat=function(){return o.FORMAT_XMB},t.prototype.fileType=function(){return o.FILETYPE_XMB},t.prototype.elementsWithMixedContent=function(){return["message"]},t.prototype.guessLanguageFromFilename=function(){if(this._filename){var e=this._filename.split(".");if(e.length>2&&"xmb"===e[e.length-1].toLowerCase())return e[e.length-2]}return null},t.prototype.sourceLanguage=function(){return this.guessLanguageFromFilename()},t.prototype.setSourceLanguage=function(e){},t.prototype.targetLanguage=function(){return this.guessLanguageFromFilename()},t.prototype.setTargetLanguage=function(e){},t.prototype.importNewTransUnit=function(e,t,n,r){throw Error("xmb file cannot be used to store translations, use xtb file")},t.prototype.createTranslationFileForLang=function(e,t,n,r){var i='<?xml version="1.0" encoding="UTF-8"?>\n'+l.XTB_DOCTYPE+"\n<translationbundle>\n</translationbundle>\n",o=new l.XtbFile(i,t,this.encoding(),{xmlContent:this.editedContent(),path:this.filename(),encoding:this.encoding()});return o.setNewTransUnitTargetPraefix(this.targetPraefix),o.setNewTransUnitTargetSuffix(this.targetSuffix),o.setTargetLanguage(e),o.setNewTransUnitTargetPraefix(this.getNewTransUnitTargetPraefix()),o.setNewTransUnitTargetSuffix(this.getNewTransUnitTargetSuffix()),this.forEachTransUnit(function(e){o.importNewTransUnit(e,n,r)}),o},t}(u.AbstractTranslationMessagesFile);t.XmbFile=c},function(e,t,n){var r;e.exports=function e(t,n,i){function o(s,u){if(!n[s]){if(!t[s]){var l="function"==typeof r&&r;if(!u&&l)return r(s,!0);if(a)return a(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var p=n[s]={exports:{}};t[s][0].call(p.exports,function(e){var n=t[s][1][e];return o(n||e)},p,p.exports,e,t,n,i)}return n[s].exports}for(var a="function"==typeof r&&r,s=0;s<i.length;s++)o(i[s]);return o}({1:[function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var a=function(e,t){var n=e.length,r=t-20;r<0&&(r=0);var i=t+20;i>n&&(i=n);var o=function(e){return e.charCodeAt(0).toString(16).toUpperCase()},a=function(e,t,n){return e.substr(t,n).replace(/\\/g,"\\\\").replace(/\x08/g,"\\b").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\f/g,"\\f").replace(/\r/g,"\\r").replace(/[\x00-\x07\x0B\x0E\x0F]/g,function(e){return"\\x0"+o(e)}).replace(/[\x10-\x1F\x80-\xFF]/g,function(e){return"\\x"+o(e)}).replace(/[\u0100-\u0FFF]/g,function(e){return"\\u0"+o(e)}).replace(/[\u1000-\uFFFF]/g,function(e){return"\\u"+o(e)})};return{prologTrunc:r>0,prologText:a(e,r,t-r),tokenText:a(e,t,1),epilogText:a(e,t+1,i-(t+1)),epilogTrunc:i<n}},s=function(){function e(t,n,r){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,s=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;o(this,e),this.type=t,this.value=n,this.text=r,this.pos=i,this.line=a,this.column=s}return i(e,[{key:"toString",value:function(){return"<type: "+this.type+", value: "+JSON.stringify(this.value)+", text: "+JSON.stringify(this.text)+", pos: "+this.pos+", line: "+this.line+", column: "+this.column+">"}},{key:"isA",value:function(e,t){return e===this.type&&(2!==arguments.length||t===this.value)}}]),e}(),u=function(e){function t(e,n,r,i,a){o(this,t);var s=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return s.name="ParsingError",s.message=e,s.pos=n,s.line=r,s.column=i,s.input=a,s}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,Error),i(t,[{key:"toString",value:function(){for(var e=a(this.input,this.pos),t="line "+this.line+" (column "+this.column+"): ",n="",r=0;r<t.length+e.prologText.length;r++)n+=" ";return"Parsing Error: "+this.message+"\n"+t+e.prologText+e.tokenText+e.epilogText+"\n"+n+"^"}}]),t}(),l=function(){function e(t){o(this,e),this._tokenizr=t,this._data={},this._repeat=!1,this._reject=!1,this._ignore=!1,this._match=null}return i(e,[{key:"data",value:function(e,t){var n=this._data[e];return 2===arguments.length&&(this._data[e]=t),n}},{key:"info",value:function(){return{line:this._tokenizr._line,column:this._tokenizr._column,pos:this._tokenizr._pos,len:this._match[0].length}}},{key:"push",value:function(){var e;return(e=this._tokenizr).push.apply(e,arguments),this}},{key:"pop",value:function(){var e;return(e=this._tokenizr).pop.apply(e,arguments)}},{key:"state",value:function(){var e,t;return arguments.length>0?((t=this._tokenizr).state.apply(t,arguments),this):(e=this._tokenizr).state.apply(e,arguments)}},{key:"tag",value:function(){var e;return(e=this._tokenizr).tag.apply(e,arguments),this}},{key:"tagged",value:function(){var e;return(e=this._tokenizr).tagged.apply(e,arguments)}},{key:"untag",value:function(){var e;return(e=this._tokenizr).untag.apply(e,arguments),this}},{key:"repeat",value:function(){return this._tokenizr._log("    REPEAT"),this._repeat=!0,this}},{key:"reject",value:function(){return this._tokenizr._log("    REJECT"),this._reject=!0,this}},{key:"ignore",value:function(){return this._tokenizr._log("    IGNORE"),this._ignore=!0,this}},{key:"accept",value:function(e,t){return arguments.length<2&&(t=this._match[0]),this._tokenizr._log("    ACCEPT: type: "+e+", value: "+JSON.stringify(t)+" ("+(void 0===t?"undefined":r(t))+'), text: "'+this._match[0]+'"'),this._tokenizr._pending.push(new s(e,t,this._match[0],this._tokenizr._pos,this._tokenizr._line,this._tokenizr._column)),this}},{key:"stop",value:function(){return this._tokenizr._stopped=!0,this}}]),e}(),c=function(){function e(){o(this,e),this._before=null,this._after=null,this._finish=null,this._rules=[],this._debug=!1,this.reset()}return i(e,[{key:"reset",value:function(){return this._input="",this._len=0,this._eof=!1,this._pos=0,this._line=1,this._column=1,this._state=["default"],this._tag={},this._transaction=[],this._pending=[],this._stopped=!1,this._ctx=new l(this),this}},{key:"error",value:function(e){return new u(e,this._pos,this._line,this._column,this._input)}},{key:"debug",value:function(e){return this._debug=e,this}},{key:"_log",value:function(e){this._debug&&console.log("tokenizr: "+e)}},{key:"input",value:function(e){if("string"!=typeof e)throw new Error('parameter "input" not a String');return this.reset(),this._input=e,this._len=e.length,this}},{key:"push",value:function(e){if(1!==arguments.length)throw new Error("invalid number of arguments");if("string"!=typeof e)throw new Error('parameter "state" not a String');return this._log("    STATE (PUSH): old: <"+this._state[this._state.length-1]+">, new: <"+e+">"),this._state.push(e),this}},{key:"pop",value:function(){if(0!==arguments.length)throw new Error("invalid number of arguments");if(this._state.length<2)throw new Error("no more custom states to pop");return this._log("    STATE (POP): old: <"+this._state[this._state.length-1]+">, new: <"+this._state[this._state.length-2]+">"),this._state.pop()}},{key:"state",value:function(e){if(1===arguments.length){if("string"!=typeof e)throw new Error('parameter "state" not a String');return this._log("    STATE (SET): old: <"+this._state[this._state.length-1]+">, new: <"+e+">"),this._state[this._state.length-1]=e,this}if(0===arguments.length)return this._state[this._state.length-1];throw new Error("invalid number of arguments")}},{key:"tag",value:function(e){if(1!==arguments.length)throw new Error("invalid number of arguments");if("string"!=typeof e)throw new Error('parameter "tag" not a String');return this._log("    TAG (ADD): "+e),this._tag[e]=!0,this}},{key:"tagged",value:function(e){if(1!==arguments.length)throw new Error("invalid number of arguments");if("string"!=typeof e)throw new Error('parameter "tag" not a String');return!0===this._tag[e]}},{key:"untag",value:function(e){if(1!==arguments.length)throw new Error("invalid number of arguments");if("string"!=typeof e)throw new Error('parameter "tag" not a String');return this._log("    TAG (DEL): "+e),delete this._tag[e],this}},{key:"before",value:function(e){return this._before=e,this}},{key:"after",value:function(e){return this._after=e,this}},{key:"finish",value:function(e){return this._finish=e,this}},{key:"rule",value:function(e,t,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"unknown";if(2===arguments.length&&"function"==typeof t){var o=[e,t];t=o[0],n=o[1],e="*"}else if(3===arguments.length&&"function"==typeof t){var a=[e,t,n];t=a[0],n=a[1],i=a[2],e="*"}if("string"!=typeof e)throw new Error('parameter "state" not a String');if(!("object"===(void 0===t?"undefined":r(t))&&t instanceof RegExp))throw new Error('parameter "pattern" not a RegExp');if("function"!=typeof n)throw new Error('parameter "action" not a Function');if("string"!=typeof i)throw new Error('parameter "name" not a String');e=e.split(/\s*,\s*/g).map(function(e){var t=e.split(/\s+/g),n=t.filter(function(e){return null===e.match(/^#/)}),r=t.filter(function(e){return null!==e.match(/^#/)}).map(function(e){return e.replace(/^#/,"")});if(1!==n.length)throw new Error("exactly one state required");return{state:n[0],tags:r}});var s="g";return t.multiline&&(s+="m"),t.ignoreCase&&(s+="i"),t=new RegExp(t.source,s),this._log("rule: configure rule (state: "+e+", pattern: "+t.source+")"),this._rules.push({state:e,pattern:t,action:n,name:i}),this}},{key:"_progress",value:function(e,t){for(var n=this._line,r=this._column,i=this._input,o=e;o<t;o++){var a=i.charAt(o);"\r"===a?this._column=1:"\n"===a?(this._line++,this._column=1):"\t"===a?this._column+=8-this._column%8:this._column++}this._log("    PROGRESS: characters: "+(t-e)+", from: <line "+n+", column "+r+">, to: <line "+this._line+", column "+this._column+">")}},{key:"_tokenize",value:function(){var e=this,t=function(){e._eof||(null!==e._finish&&e._finish.call(e._ctx,e._ctx),e._eof=!0,e._pending.push(new s("EOF","","",e._pos,e._line,e._column)))};if(!(this._stopped||this._pos>=this._len)){for(var n=!0;n;){if(n=!1,this._debug){var r=a(this._input,this._pos),i=Object.keys(this._tag).map(function(e){return"#"+e}).join(" ");this._log("INPUT: state: <"+this._state[this._state.length-1]+">, tags: <"+i+">, text: "+(r.prologTrunc?"...":'"')+r.prologText+"<"+r.tokenText+">"+r.epilogText+(r.epilogTrunc?"...":'"')+", at: <line "+this._line+", column "+this._column+">")}for(var o=0;o<this._rules.length;o++){if(this._debug){var u=this._rules[o].state.map(function(e){var t=e.state;return e.tags.length>0&&(t+=" "+e.tags.map(function(e){return"#"+e}).join(" ")),t}).join(", ");this._log("  RULE: state(s): <"+u+">, pattern: "+this._rules[o].pattern.source)}var l=!1,c=this._rules[o].state.map(function(e){return e.state}),p=c.indexOf("*");if(p<0&&(p=c.indexOf(this._state[this._state.length-1])),p>=0){l=!0;var f=this._rules[o].state[p].tags;(f=f.filter(function(t){return!e._tag[t]})).length>0&&(l=!1)}if(l){this._rules[o].pattern.lastIndex=this._pos;var h=this._rules[o].pattern.exec(this._input);if(this._rules[o].pattern.lastIndex=this._pos,null!==(h=this._rules[o].pattern.exec(this._input))&&h.index===this._pos){if(this._debug&&this._log("    MATCHED: "+JSON.stringify(h)),this._ctx._match=h,this._ctx._repeat=!1,this._ctx._reject=!1,this._ctx._ignore=!1,null!==this._before&&this._before.call(this._ctx,this._ctx,h,this._rules[o]),this._rules[o].action.call(this._ctx,this._ctx,h),null!==this._after&&this._after.call(this._ctx,this._ctx,h,this._rules[o]),this._ctx._reject)continue;if(this._ctx._repeat){n=!0;break}if(this._ctx._ignore){if(this._progress(this._pos,this._rules[o].pattern.lastIndex),this._pos=this._rules[o].pattern.lastIndex,this._pos>=this._len)return void t();n=!0;break}if(this._pending.length>0)return this._progress(this._pos,this._rules[o].pattern.lastIndex),this._pos=this._rules[o].pattern.lastIndex,void(this._pos>=this._len&&t());throw new Error('action of pattern "'+this._rules[o].pattern.source+'" neither rejected nor accepted any token(s)')}}}}throw this.error("token not recognized")}t()}},{key:"token",value:function(){if(0===this._pending.length&&this._tokenize(),this._pending.length>0){var e=this._pending.shift();return this._transaction.length>0&&this._transaction[0].push(e),this._log("TOKEN: "+e.toString()),e}return null}},{key:"tokens",value:function(){for(var e=[],t=void 0;null!==(t=this.token());)e.push(t);return e}},{key:"peek",value:function(e){void 0===e&&(e=0);for(var t=0;t<this._pending.length+e;t++)this._tokenize();if(e>=this._pending.length)throw new Error("not enough tokens available for peek operation");return this._log("PEEK: "+this._pending[e].toString()),this._pending[e]}},{key:"skip",value:function(e){void 0===e&&(e=1);for(var t=0;t<this._pending.length+e;t++)this._tokenize();if(e>this._pending.length)throw new Error("not enough tokens available for skip operation");for(;e-- >0;)this.token();return this}},{key:"consume",value:function(e,t){for(var n=this,i=0;i<this._pending.length+1;i++)this._tokenize();if(0===this._pending.length)throw new Error("not enough tokens available for consume operation");var o=this.token();this._log("CONSUME: "+o.toString());var a=function(){throw new u("expected: <type: "+e+", value: "+JSON.stringify(t)+" ("+(void 0===t?"undefined":r(t))+")>, found: <type: "+o.type+", value: "+JSON.stringify(o.value)+" ("+r(o.value)+")>",o.pos,o.line,o.column,n._input)};return 2!==arguments.length||o.isA(e,t)?o.isA(e)||a():a(JSON.stringify(t),void 0===t||r(t)),o}},{key:"begin",value:function(){return this._log("BEGIN: level "+this._transaction.length),this._transaction.unshift([]),this}},{key:"depth",value:function(){if(0===this._transaction.length)throw new Error("cannot determine depth -- no active transaction");return this._transaction[0].length}},{key:"commit",value:function(){if(0===this._transaction.length)throw new Error("cannot commit transaction -- no active transaction");return this._transaction.shift(),this._log("COMMIT: level "+this._transaction.length),this}},{key:"rollback",value:function(){if(0===this._transaction.length)throw new Error("cannot rollback transaction -- no active transaction");return this._pending=this._transaction[0].concat(this._pending),this._transaction.shift(),this._log("ROLLBACK: level "+this._transaction.length),this}},{key:"alternatives",value:function(){for(var e=null,t=[],n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];for(var o=0;o<r.length;o++)try{this.begin(),e=r[o].call(this),this.commit();break}catch(e){this._log("EXCEPTION: "+e.toString()),t.push({ex:e,depth:this.depth()}),this.rollback();continue}if(null===e&&t.length>0)throw(t=t.sort(function(e,t){return e.depth-t.depth}))[0].ex;return e}}]),e}();c.Token=s,c.ParsingError=u,c.ActionContext=l,t.exports=c},{}]},{},[1])(1)},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(1),a=n(25),s=n(24),u=n(0),l=function(e){function t(t,n){var r=e.call(this,o.ParsedMessagePartType.ICU_MESSAGE)||this;return r._parser=n,t&&r.parseICUMessage(t),r}return i(t,e),t.looksLikeICUMessage=function(e){return new t(null,null).looksLikeICUMessage(e)},t.prototype.asDisplayString=function(e){return"<ICU-Message/>"},t.prototype.getICUMessage=function(){return this._message},t.prototype.parseICUMessage=function(e){this._messageText=e,this._tokenizer=new a.ICUMessageTokenizer,this._tokenizer.input(e),this.expectNext(a.CURLY_BRACE_OPEN),this.expectNext(a.TEXT),this.expectNext(a.COMMA);var t=this._tokenizer.next();for(t.type===a.PLURAL?this._message=new s.ICUMessage(this._parser,!0):t.type===a.SELECT&&(this._message=new s.ICUMessage(this._parser,!1)),this.expectNext(a.COMMA),t=this._tokenizer.peek();t.type!==a.CURLY_BRACE_CLOSE;){var n=this.expectNext(a.TEXT).value.trim();this.expectNext(a.CURLY_BRACE_OPEN);var r=this.expectNext(a.TEXT).value;this._message.addCategory(n,this.parseNativeSubMessage(r)),this.expectNext(a.CURLY_BRACE_CLOSE),t=this._tokenizer.peek()}this.expectNext(a.CURLY_BRACE_CLOSE),this.expectNext("EOF")},t.prototype.looksLikeICUMessage=function(e){this._tokenizer=new a.ICUMessageTokenizer,this._tokenizer.input(e);try{this.expectNext(a.CURLY_BRACE_OPEN),this.expectNext(a.TEXT),this.expectNext(a.COMMA);var t=this._tokenizer.next();return(t.type===a.PLURAL||t.type===a.SELECT)&&(this.expectNext(a.COMMA),!0)}catch(e){return!1}},t.prototype.expectNext=function(e){var t=this._tokenizer.next();if(t.type!==e)throw new Error(u.format("Error parsing ICU Message: expected %s, found %s (%s) (message %s)",e,t.type,t.value,this._messageText));return t},t.prototype.parseNativeSubMessage=function(e){return this._parser.createNormalizedMessageFromXMLString(e,null)},t}(o.ParsedMessagePart);t.ParsedMessagePartICUMessage=l},function(e,t){function n(e,t){for(var n in e)t[n]=e[n]}function r(e,t){var r=e.prototype;if(Object.create){var i=Object.create(t.prototype);r.__proto__=i}if(!(r instanceof t)){function o(){}o.prototype=t.prototype,n(r,o=new o),e.prototype=r=o}r.constructor!=e&&("function"!=typeof e&&console.error("unknow Class:"+e),r.constructor=e)}var i="http://www.w3.org/1999/xhtml",o={},a=o.ELEMENT_NODE=1,s=o.ATTRIBUTE_NODE=2,u=o.TEXT_NODE=3,l=o.CDATA_SECTION_NODE=4,c=o.ENTITY_REFERENCE_NODE=5,p=o.ENTITY_NODE=6,f=o.PROCESSING_INSTRUCTION_NODE=7,h=o.COMMENT_NODE=8,g=o.DOCUMENT_NODE=9,m=o.DOCUMENT_TYPE_NODE=10,d=o.DOCUMENT_FRAGMENT_NODE=11,_=o.NOTATION_NODE=12,y={},T={},E=(y.INDEX_SIZE_ERR=(T[1]="Index size error",1),y.DOMSTRING_SIZE_ERR=(T[2]="DOMString size error",2),y.HIERARCHY_REQUEST_ERR=(T[3]="Hierarchy request error",3)),v=(y.WRONG_DOCUMENT_ERR=(T[4]="Wrong document",4),y.INVALID_CHARACTER_ERR=(T[5]="Invalid character",5),y.NO_DATA_ALLOWED_ERR=(T[6]="No data allowed",6),y.NO_MODIFICATION_ALLOWED_ERR=(T[7]="No modification allowed",7),y.NOT_FOUND_ERR=(T[8]="Not found",8)),N=(y.NOT_SUPPORTED_ERR=(T[9]="Not supported",9),y.INUSE_ATTRIBUTE_ERR=(T[10]="Attribute in use",10));y.INVALID_STATE_ERR=(T[11]="Invalid state",11),y.SYNTAX_ERR=(T[12]="Syntax error",12),y.INVALID_MODIFICATION_ERR=(T[13]="Invalid modification",13),y.NAMESPACE_ERR=(T[14]="Invalid namespace",14),y.INVALID_ACCESS_ERR=(T[15]="Invalid access",15);function b(e,t){if(t instanceof Error)var n=t;else n=this,Error.call(this,T[e]),this.message=T[e],Error.captureStackTrace&&Error.captureStackTrace(this,b);return n.code=e,t&&(this.message=this.message+": "+t),n}function w(){}function A(e,t){this._node=e,this._refresh=t,M(this)}function M(e){var t=e._node._inc||e._node.ownerDocument._inc;if(e._inc!=t){var r=e._refresh(e._node);ne(e,"length",r.length),n(r,e),e._inc=t}}function C(){}function O(e,t){for(var n=e.length;n--;)if(e[n]===t)return n}function S(e,t,n,r){if(r?t[O(t,r)]=n:t[t.length++]=n,e){n.ownerElement=e;var i=e.ownerDocument;i&&(r&&F(i,e,r),function(e,t,n){e&&e._inc++,"http://www.w3.org/2000/xmlns/"==n.namespaceURI&&(t._nsMap[n.prefix?n.localName:""]=n.value)}(i,e,n))}}function x(e,t,n){var r=O(t,n);if(!(r>=0))throw b(v,new Error(e.tagName+"@"+n));for(var i=t.length-1;r<i;)t[r]=t[++r];if(t.length=i,e){var o=e.ownerDocument;o&&(F(o,e,n),n.ownerElement=null)}}function P(e){if(this._features={},e)for(var t in e)this._features=e[t]}function U(){}function D(e){return("<"==e?"&lt;":">"==e&&"&gt;")||"&"==e&&"&amp;"||'"'==e&&"&quot;"||"&#"+e.charCodeAt()+";"}function I(e,t){if(t(e))return!0;if(e=e.firstChild)do{if(I(e,t))return!0}while(e=e.nextSibling)}function R(){}function F(e,t,n,r){e&&e._inc++,"http://www.w3.org/2000/xmlns/"==n.namespaceURI&&delete t._nsMap[n.prefix?n.localName:""]}function L(e,t,n){if(e&&e._inc){e._inc++;var r=t.childNodes;if(n)r[r.length++]=n;else{for(var i=t.firstChild,o=0;i;)r[o++]=i,i=i.nextSibling;r.length=o}}}function X(e,t){var n=t.previousSibling,r=t.nextSibling;return n?n.nextSibling=r:e.firstChild=r,r?r.previousSibling=n:e.lastChild=n,L(e.ownerDocument,e),t}function k(e,t,n){var r=t.parentNode;if(r&&r.removeChild(t),t.nodeType===d){var i=t.firstChild;if(null==i)return t;var o=t.lastChild}else i=o=t;var a=n?n.previousSibling:e.lastChild;i.previousSibling=a,o.nextSibling=n,a?a.nextSibling=i:e.firstChild=i,null==n?e.lastChild=o:n.previousSibling=o;do{i.parentNode=e}while(i!==o&&(i=i.nextSibling));return L(e.ownerDocument||e,e),t.nodeType==d&&(t.firstChild=t.lastChild=null),t}function z(){this._nsMap={}}function B(){}function j(){}function W(){}function G(){}function Y(){}function H(){}function $(){}function V(){}function q(){}function J(){}function Z(){}function K(){}function Q(e,t){var n=[],r=9==this.nodeType?this.documentElement:this,i=r.prefix,o=r.namespaceURI;if(o&&null==i&&null==(i=r.lookupPrefix(o)))var a=[{namespace:o,prefix:null}];return te(this,n,e,t,a),n.join("")}function ee(e,t,n){var r=e.prefix||"",i=e.namespaceURI;if(!r&&!i)return!1;if("xml"===r&&"http://www.w3.org/XML/1998/namespace"===i||"http://www.w3.org/2000/xmlns/"==i)return!1;for(var o=n.length;o--;){var a=n[o];if(a.prefix==r)return a.namespace!=i}return!0}function te(e,t,n,r,o){if(r){if(!(e=r(e)))return;if("string"==typeof e)return void t.push(e)}switch(e.nodeType){case a:o||(o=[]);o.length;var p=e.attributes,_=p.length,y=e.firstChild,T=e.tagName;n=i===e.namespaceURI||n,t.push("<",T);for(var E=0;E<_;E++){"xmlns"==(v=p.item(E)).prefix?o.push({prefix:v.localName,namespace:v.value}):"xmlns"==v.nodeName&&o.push({prefix:"",namespace:v.value})}for(E=0;E<_;E++){var v;if(ee(v=p.item(E),0,o)){var N=v.prefix||"",b=v.namespaceURI,w=N?" xmlns:"+N:" xmlns";t.push(w,'="',b,'"'),o.push({prefix:N,namespace:b})}te(v,t,n,r,o)}if(ee(e,0,o)){N=e.prefix||"",b=e.namespaceURI,w=N?" xmlns:"+N:" xmlns";t.push(w,'="',b,'"'),o.push({prefix:N,namespace:b})}if(y||n&&!/^(?:meta|link|img|br|hr|input)$/i.test(T)){if(t.push(">"),n&&/^script$/i.test(T))for(;y;)y.data?t.push(y.data):te(y,t,n,r,o),y=y.nextSibling;else for(;y;)te(y,t,n,r,o),y=y.nextSibling;t.push("</",T,">")}else t.push("/>");return;case g:case d:for(y=e.firstChild;y;)te(y,t,n,r,o),y=y.nextSibling;return;case s:return t.push(" ",e.name,'="',e.value.replace(/[<&"]/g,D),'"');case u:return t.push(e.data.replace(/[<&]/g,D));case l:return t.push("<![CDATA[",e.data,"]]>");case h:return t.push("\x3c!--",e.data,"--\x3e");case m:var A=e.publicId,M=e.systemId;if(t.push("<!DOCTYPE ",e.name),A)t.push(' PUBLIC "',A),M&&"."!=M&&t.push('" "',M),t.push('">');else if(M&&"."!=M)t.push(' SYSTEM "',M,'">');else{var C=e.internalSubset;C&&t.push(" [",C,"]"),t.push(">")}return;case f:return t.push("<?",e.target," ",e.data,"?>");case c:return t.push("&",e.nodeName,";");default:t.push("??",e.nodeName)}}function ne(e,t,n){e[t]=n}b.prototype=Error.prototype,n(y,b),w.prototype={length:0,item:function(e){return this[e]||null},toString:function(e,t){for(var n=[],r=0;r<this.length;r++)te(this[r],n,e,t);return n.join("")}},A.prototype.item=function(e){return M(this),this[e]},r(A,w),C.prototype={length:0,item:w.prototype.item,getNamedItem:function(e){for(var t=this.length;t--;){var n=this[t];if(n.nodeName==e)return n}},setNamedItem:function(e){var t=e.ownerElement;if(t&&t!=this._ownerElement)throw new b(N);var n=this.getNamedItem(e.nodeName);return S(this._ownerElement,this,e,n),n},setNamedItemNS:function(e){var t,n=e.ownerElement;if(n&&n!=this._ownerElement)throw new b(N);return t=this.getNamedItemNS(e.namespaceURI,e.localName),S(this._ownerElement,this,e,t),t},removeNamedItem:function(e){var t=this.getNamedItem(e);return x(this._ownerElement,this,t),t},removeNamedItemNS:function(e,t){var n=this.getNamedItemNS(e,t);return x(this._ownerElement,this,n),n},getNamedItemNS:function(e,t){for(var n=this.length;n--;){var r=this[n];if(r.localName==t&&r.namespaceURI==e)return r}return null}},P.prototype={hasFeature:function(e,t){var n=this._features[e.toLowerCase()];return!(!n||t&&!(t in n))},createDocument:function(e,t,n){var r=new R;if(r.implementation=this,r.childNodes=new w,r.doctype=n,n&&r.appendChild(n),t){var i=r.createElementNS(e,t);r.appendChild(i)}return r},createDocumentType:function(e,t,n){var r=new H;return r.name=e,r.nodeName=e,r.publicId=t,r.systemId=n,r}},U.prototype={firstChild:null,lastChild:null,previousSibling:null,nextSibling:null,attributes:null,parentNode:null,childNodes:null,ownerDocument:null,nodeValue:null,namespaceURI:null,prefix:null,localName:null,insertBefore:function(e,t){return k(this,e,t)},replaceChild:function(e,t){this.insertBefore(e,t),t&&this.removeChild(t)},removeChild:function(e){return X(this,e)},appendChild:function(e){return this.insertBefore(e,null)},hasChildNodes:function(){return null!=this.firstChild},cloneNode:function(e){return function e(t,n,r){var i=new n.constructor;for(var o in n){var u=n[o];"object"!=typeof u&&u!=i[o]&&(i[o]=u)}n.childNodes&&(i.childNodes=new w);i.ownerDocument=t;switch(i.nodeType){case a:var l=n.attributes,c=i.attributes=new C,p=l.length;c._ownerElement=i;for(var f=0;f<p;f++)i.setAttributeNode(e(t,l.item(f),!0));break;case s:r=!0}if(r)for(var h=n.firstChild;h;)i.appendChild(e(t,h,r)),h=h.nextSibling;return i}(this.ownerDocument||this,this,e)},normalize:function(){for(var e=this.firstChild;e;){var t=e.nextSibling;t&&t.nodeType==u&&e.nodeType==u?(this.removeChild(t),e.appendData(t.data)):(e.normalize(),e=t)}},isSupported:function(e,t){return this.ownerDocument.implementation.hasFeature(e,t)},hasAttributes:function(){return this.attributes.length>0},lookupPrefix:function(e){for(var t=this;t;){var n=t._nsMap;if(n)for(var r in n)if(n[r]==e)return r;t=t.nodeType==s?t.ownerDocument:t.parentNode}return null},lookupNamespaceURI:function(e){for(var t=this;t;){var n=t._nsMap;if(n&&e in n)return n[e];t=t.nodeType==s?t.ownerDocument:t.parentNode}return null},isDefaultNamespace:function(e){return null==this.lookupPrefix(e)}},n(o,U),n(o,U.prototype),R.prototype={nodeName:"#document",nodeType:g,doctype:null,documentElement:null,_inc:1,insertBefore:function(e,t){if(e.nodeType==d){for(var n=e.firstChild;n;){var r=n.nextSibling;this.insertBefore(n,t),n=r}return e}return null==this.documentElement&&e.nodeType==a&&(this.documentElement=e),k(this,e,t),e.ownerDocument=this,e},removeChild:function(e){return this.documentElement==e&&(this.documentElement=null),X(this,e)},importNode:function(e,t){return function e(t,n,r){var i;switch(n.nodeType){case a:(i=n.cloneNode(!1)).ownerDocument=t;case d:break;case s:r=!0}i||(i=n.cloneNode(!1));i.ownerDocument=t;i.parentNode=null;if(r)for(var o=n.firstChild;o;)i.appendChild(e(t,o,r)),o=o.nextSibling;return i}(this,e,t)},getElementById:function(e){var t=null;return I(this.documentElement,function(n){if(n.nodeType==a&&n.getAttribute("id")==e)return t=n,!0}),t},createElement:function(e){var t=new z;return t.ownerDocument=this,t.nodeName=e,t.tagName=e,t.childNodes=new w,(t.attributes=new C)._ownerElement=t,t},createDocumentFragment:function(){var e=new J;return e.ownerDocument=this,e.childNodes=new w,e},createTextNode:function(e){var t=new W;return t.ownerDocument=this,t.appendData(e),t},createComment:function(e){var t=new G;return t.ownerDocument=this,t.appendData(e),t},createCDATASection:function(e){var t=new Y;return t.ownerDocument=this,t.appendData(e),t},createProcessingInstruction:function(e,t){var n=new Z;return n.ownerDocument=this,n.tagName=n.target=e,n.nodeValue=n.data=t,n},createAttribute:function(e){var t=new B;return t.ownerDocument=this,t.name=e,t.nodeName=e,t.localName=e,t.specified=!0,t},createEntityReference:function(e){var t=new q;return t.ownerDocument=this,t.nodeName=e,t},createElementNS:function(e,t){var n=new z,r=t.split(":"),i=n.attributes=new C;return n.childNodes=new w,n.ownerDocument=this,n.nodeName=t,n.tagName=t,n.namespaceURI=e,2==r.length?(n.prefix=r[0],n.localName=r[1]):n.localName=t,i._ownerElement=n,n},createAttributeNS:function(e,t){var n=new B,r=t.split(":");return n.ownerDocument=this,n.nodeName=t,n.name=t,n.namespaceURI=e,n.specified=!0,2==r.length?(n.prefix=r[0],n.localName=r[1]):n.localName=t,n}},r(R,U),z.prototype={nodeType:a,hasAttribute:function(e){return null!=this.getAttributeNode(e)},getAttribute:function(e){var t=this.getAttributeNode(e);return t&&t.value||""},getAttributeNode:function(e){return this.attributes.getNamedItem(e)},setAttribute:function(e,t){var n=this.ownerDocument.createAttribute(e);n.value=n.nodeValue=""+t,this.setAttributeNode(n)},removeAttribute:function(e){var t=this.getAttributeNode(e);t&&this.removeAttributeNode(t)},appendChild:function(e){return e.nodeType===d?this.insertBefore(e,null):function(e,t){var n=t.parentNode;if(n){var r=e.lastChild;n.removeChild(t),r=e.lastChild}return r=e.lastChild,t.parentNode=e,t.previousSibling=r,t.nextSibling=null,r?r.nextSibling=t:e.firstChild=t,e.lastChild=t,L(e.ownerDocument,e,t),t}(this,e)},setAttributeNode:function(e){return this.attributes.setNamedItem(e)},setAttributeNodeNS:function(e){return this.attributes.setNamedItemNS(e)},removeAttributeNode:function(e){return this.attributes.removeNamedItem(e.nodeName)},removeAttributeNS:function(e,t){var n=this.getAttributeNodeNS(e,t);n&&this.removeAttributeNode(n)},hasAttributeNS:function(e,t){return null!=this.getAttributeNodeNS(e,t)},getAttributeNS:function(e,t){var n=this.getAttributeNodeNS(e,t);return n&&n.value||""},setAttributeNS:function(e,t,n){var r=this.ownerDocument.createAttributeNS(e,t);r.value=r.nodeValue=""+n,this.setAttributeNode(r)},getAttributeNodeNS:function(e,t){return this.attributes.getNamedItemNS(e,t)},getElementsByTagName:function(e){return new A(this,function(t){var n=[];return I(t,function(r){r===t||r.nodeType!=a||"*"!==e&&r.tagName!=e||n.push(r)}),n})},getElementsByTagNameNS:function(e,t){return new A(this,function(n){var r=[];return I(n,function(i){i===n||i.nodeType!==a||"*"!==e&&i.namespaceURI!==e||"*"!==t&&i.localName!=t||r.push(i)}),r})}},R.prototype.getElementsByTagName=z.prototype.getElementsByTagName,R.prototype.getElementsByTagNameNS=z.prototype.getElementsByTagNameNS,r(z,U),B.prototype.nodeType=s,r(B,U),j.prototype={data:"",substringData:function(e,t){return this.data.substring(e,e+t)},appendData:function(e){e=this.data+e,this.nodeValue=this.data=e,this.length=e.length},insertData:function(e,t){this.replaceData(e,0,t)},appendChild:function(e){throw new Error(T[E])},deleteData:function(e,t){this.replaceData(e,t,"")},replaceData:function(e,t,n){n=this.data.substring(0,e)+n+this.data.substring(e+t),this.nodeValue=this.data=n,this.length=n.length}},r(j,U),W.prototype={nodeName:"#text",nodeType:u,splitText:function(e){var t=this.data,n=t.substring(e);t=t.substring(0,e),this.data=this.nodeValue=t,this.length=t.length;var r=this.ownerDocument.createTextNode(n);return this.parentNode&&this.parentNode.insertBefore(r,this.nextSibling),r}},r(W,j),G.prototype={nodeName:"#comment",nodeType:h},r(G,j),Y.prototype={nodeName:"#cdata-section",nodeType:l},r(Y,j),H.prototype.nodeType=m,r(H,U),$.prototype.nodeType=_,r($,U),V.prototype.nodeType=p,r(V,U),q.prototype.nodeType=c,r(q,U),J.prototype.nodeName="#document-fragment",J.prototype.nodeType=d,r(J,U),Z.prototype.nodeType=f,r(Z,U),K.prototype.serializeToString=function(e,t,n){return Q.call(e,t,n)},U.prototype.toString=Q;try{if(Object.defineProperty){Object.defineProperty(A.prototype,"length",{get:function(){return M(this),this.$$length}}),Object.defineProperty(U.prototype,"textContent",{get:function(){return function e(t){switch(t.nodeType){case a:case d:var n=[];for(t=t.firstChild;t;)7!==t.nodeType&&8!==t.nodeType&&n.push(e(t)),t=t.nextSibling;return n.join("");default:return t.nodeValue}}(this)},set:function(e){switch(this.nodeType){case a:case d:for(;this.firstChild;)this.removeChild(this.firstChild);(e||String(e))&&this.appendChild(this.ownerDocument.createTextNode(e));break;default:this.data=e,this.value=e,this.nodeValue=e}}}),ne=function(e,t,n){e["$$"+t]=n}}}catch(e){}t.DOMImplementation=P,t.XMLSerializer=K},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(8),a=n(1),s=n(6),u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.processStartElement=function(e,t){var n=e.tagName;if("ph"===n){var r=!1,i=!1,o=!1,a=e.getAttribute("equiv"),u=e.getAttribute("disp"),l=null,c=0,p=null;if(a)if(a.startsWith("ICU"))i=!0,l="ICU"===a?"0":a.substring("ICU_".length),c=Number.parseInt(l);else if(a.startsWith("INTERPOLATION"))r=!0,l="INTERPOLATION"===a?"0":a.substring("INTERPOLATION_".length),c=Number.parseInt(l);else{if(!(new s.TagMapping).isEmptyTagPlaceholderName(a))return!0;o=!0,p=(new s.TagMapping).getTagnameFromEmptyTagPlaceholderName(a)}else i=!0,l=e.getAttribute("id"),c=Number.parseInt(l);r?t.addPlaceholder(c,u):i?t.addICUMessageRef(c,u):o&&t.addEmptyTag(p,this.parseIdCountFromName(a))}else if("pc"===n){var f=this.tagNameFromPCElement(e);f&&t.addStartTag(f,this.parseIdCountFromName(e.getAttribute("equivStart")))}return!0},t.prototype.processEndElement=function(e,t){if("pc"!==e.tagName);else{var n=this.tagNameFromPCElement(e);n&&t.addEndTag(n)}},t.prototype.tagNameFromPCElement=function(e){var t=e.getAttribute("dispStart");return t.startsWith("<")&&(t=t.substring(1)),t.endsWith(">")&&(t=t.substring(0,t.length-1)),t},t.prototype.addXmlRepresentationToRoot=function(e,t){var n=this,r=[{element:t,tagName:"root"}],i=0;if(e.parts().forEach(function(e){switch(e.type){case a.ParsedMessagePartType.TEXT:r[r.length-1].element.appendChild(n.createXmlRepresentationOfTextPart(e,t));break;case a.ParsedMessagePartType.PLACEHOLDER:r[r.length-1].element.appendChild(n.createXmlRepresentationOfPlaceholderPart(e,t,i++));break;case a.ParsedMessagePartType.ICU_MESSAGE_REF:r[r.length-1].element.appendChild(n.createXmlRepresentationOfICUMessageRefPart(e,t));break;case a.ParsedMessagePartType.START_TAG:var o=n.createXmlRepresentationOfStartTagPart(e,t,i++);r[r.length-1].element.appendChild(o),r.push({element:o,tagName:e.tagName()});break;case a.ParsedMessagePartType.END_TAG:var s=e.tagName();if(r.length<=1||r[r.length-1].tagName!==s)throw new Error("unexpected close tag "+s);r.pop();break;case a.ParsedMessagePartType.EMPTY_TAG:var u=n.createXmlRepresentationOfEmptyTagPart(e,t,i++);r[r.length-1].element.appendChild(u)}}),1!==r.length)throw new Error("missing close tag "+r[r.length-1].tagName)},t.prototype.createXmlRepresentationOfStartTagPart=function(e,t,n){var r=new s.TagMapping,i=t.ownerDocument.createElement("pc"),o=e.tagName(),a=r.getStartTagPlaceholderName(o,e.idCounter()),u=r.getCloseTagPlaceholderName(o),l="<"+o+">",c="</"+o+">";return i.setAttribute("id",n.toString(10)),i.setAttribute("equivStart",a),i.setAttribute("equivEnd",u),i.setAttribute("type",this.getTypeForTag(o)),i.setAttribute("dispStart",l),i.setAttribute("dispEnd",c),i},t.prototype.createXmlRepresentationOfEndTagPart=function(e,t){return null},t.prototype.createXmlRepresentationOfEmptyTagPart=function(e,t,n){var r=new s.TagMapping,i=t.ownerDocument.createElement("ph"),o=e.tagName(),a=r.getEmptyTagPlaceholderName(o,e.idCounter()),u="<"+o+"/>";return i.setAttribute("id",n.toString(10)),i.setAttribute("equiv",a),i.setAttribute("type",this.getTypeForTag(o)),i.setAttribute("disp",u),i},t.prototype.getTypeForTag=function(e){switch(e.toLowerCase()){case"br":case"b":case"i":case"u":return"fmt";case"img":return"image";case"a":return"link";default:return"other"}},t.prototype.createXmlRepresentationOfPlaceholderPart=function(e,t,n){var r=t.ownerDocument.createElement("ph"),i="INTERPOLATION";e.index()>0&&(i="INTERPOLATION_"+e.index().toString(10)),r.setAttribute("id",n.toString(10)),r.setAttribute("equiv",i);var o=e.disp();return o&&r.setAttribute("disp",o),r},t.prototype.createXmlRepresentationOfICUMessageRefPart=function(e,t){var n=t.ownerDocument.createElement("ph"),r="ICU";e.index()>0&&(r="ICU_"+e.index().toString(10)),n.setAttribute("id",e.index().toString(10)),n.setAttribute("equiv",r);var i=e.disp();return i&&n.setAttribute("disp",i),n},t}(o.AbstractMessageParser);t.Xliff2MessageParser=u},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(3),a=n(2),s=n(5),u=n(16),l=n(0),c=function(e){function t(t,n,r){return e.call(this,t,n,r)||this}return i(t,e),t.prototype.sourceContent=function(){var e=a.DOMUtilities.getFirstElementByTagName(this._element,"source");return a.DOMUtilities.getXMLContent(e)},t.prototype.setSourceContent=function(e){var t=a.DOMUtilities.getFirstElementByTagName(this._element,"source");t||(t=a.DOMUtilities.getFirstElementByTagName(this._element,"segment").parentNode.appendChild(this._element.ownerDocument.createElement("source")));a.DOMUtilities.replaceContentWithXMLContent(t,e)},t.prototype.messageParser=function(){return new u.Xliff2MessageParser},t.prototype.createSourceContentNormalized=function(){var e=a.DOMUtilities.getFirstElementByTagName(this._element,"source");return e?this.messageParser().createNormalizedMessageFromXML(e,null):null},t.prototype.targetContent=function(){var e=a.DOMUtilities.getFirstElementByTagName(this._element,"target");return a.DOMUtilities.getXMLContent(e)},t.prototype.targetContentNormalized=function(){var e=a.DOMUtilities.getFirstElementByTagName(this._element,"target");return(new u.Xliff2MessageParser).createNormalizedMessageFromXML(e,this.sourceContentNormalized())},t.prototype.nativeTargetState=function(){var e=a.DOMUtilities.getFirstElementByTagName(this._element,"segment");return e?e.getAttribute("state"):null},t.prototype.setNativeTargetState=function(e){var t=a.DOMUtilities.getFirstElementByTagName(this._element,"segment");t&&t.setAttribute("state",e)},t.prototype.mapStateToNativeState=function(e){switch(e){case o.STATE_NEW:return"initial";case o.STATE_TRANSLATED:return"translated";case o.STATE_FINAL:return"final";default:throw new Error("unknown state "+e)}},t.prototype.mapNativeStateToState=function(e){switch(e){case"initial":return o.STATE_NEW;case"translated":case"reviewed":return o.STATE_TRANSLATED;case"final":return o.STATE_FINAL;default:return o.STATE_NEW}},t.prototype.sourceReferences=function(){for(var e=this._element.getElementsByTagName("note"),t=[],n=0;n<e.length;n++){var r=e.item(n);if("location"===r.getAttribute("category")){var i=a.DOMUtilities.getPCDATA(r);t.push(this.parseSourceAndPos(i))}}return t},t.prototype.parseSourceAndPos=function(e){var t=e.lastIndexOf(":");return t<0?{sourcefile:e,linenumber:0}:{sourcefile:e.substring(0,t),linenumber:this.parseLineNumber(e.substring(t+1))}},t.prototype.parseLineNumber=function(e){return Number.parseInt(e)},t.prototype.setSourceReferences=function(e){var t=this;this.removeAllSourceReferences();var n=a.DOMUtilities.getFirstElementByTagName(this._element,"notes");0!==e.length||l.isNullOrUndefined(n)||0!==n.childNodes.length?(l.isNullOrUndefined(n)&&(n=this._element.ownerDocument.createElement("notes"),this._element.insertBefore(n,this._element.childNodes.item(0))),e.forEach(function(e){var r=t._element.ownerDocument.createElement("note");r.setAttribute("category","location"),r.appendChild(t._element.ownerDocument.createTextNode(e.sourcefile+":"+e.linenumber.toString(10))),n.appendChild(r)})):n.parentNode.removeChild(n)},t.prototype.removeAllSourceReferences=function(){for(var e=this._element.getElementsByTagName("note"),t=[],n=0;n<e.length;n++){var r=e.item(n);"location"===r.getAttribute("category")&&t.push(r)}t.forEach(function(e){e.parentNode.removeChild(e)})},t.prototype.description=function(){var e=this.findNoteElementWithCategoryAttribute("description");return e?a.DOMUtilities.getPCDATA(e):null},t.prototype.setDescription=function(e){var t=this.findNoteElementWithCategoryAttribute("description");e?(l.isNullOrUndefined(t)&&(t=this.createNoteElementWithCategoryAttribute("description")),a.DOMUtilities.replaceContentWithXMLContent(t,e)):l.isNullOrUndefined(t)||this.removeNoteElementWithCategoryAttribute("description")},t.prototype.findNoteElementWithCategoryAttribute=function(e){for(var t=this._element.getElementsByTagName("note"),n=0;n<t.length;n++){var r=t.item(n);if(r.getAttribute("category")===e)return r}return null},t.prototype.createNoteElementWithCategoryAttribute=function(e){var t=a.DOMUtilities.getFirstElementByTagName(this._element,"notes");l.isNullOrUndefined(t)&&(t=this._element.ownerDocument.createElement("notes"),this._element.appendChild(t));var n=this._element.ownerDocument.createElement("note");return n.setAttribute("category",e),t.appendChild(n),n},t.prototype.removeNoteElementWithCategoryAttribute=function(e){var t=this.findNoteElementWithCategoryAttribute(e);t&&this._element.removeChild(t)},t.prototype.meaning=function(){var e=this.findNoteElementWithCategoryAttribute("meaning");return e?a.DOMUtilities.getPCDATA(e):null},t.prototype.setMeaning=function(e){var t=this.findNoteElementWithCategoryAttribute("meaning");e?(l.isNullOrUndefined(t)&&(t=this.createNoteElementWithCategoryAttribute("meaning")),a.DOMUtilities.replaceContentWithXMLContent(t,e)):l.isNullOrUndefined(t)||this.removeNoteElementWithCategoryAttribute("meaning")},t.prototype.translateNative=function(e){var t=a.DOMUtilities.getFirstElementByTagName(this._element,"target");t||(t=a.DOMUtilities.getFirstElementByTagName(this._element,"source").parentNode.appendChild(this._element.ownerDocument.createElement("target")));a.DOMUtilities.replaceContentWithXMLContent(t,e),this.setTargetState(o.STATE_TRANSLATED)},t.prototype.cloneWithSourceAsTarget=function(e,n,r){var i=new t(this._element.cloneNode(!0),this._id,r);return i.useSourceAsTarget(e,n),i},t.prototype.useSourceAsTarget=function(e,t){var n=a.DOMUtilities.getFirstElementByTagName(this._element,"source"),r=a.DOMUtilities.getFirstElementByTagName(this._element,"target");if(r||(r=n.parentNode.appendChild(this._element.ownerDocument.createElement("target"))),e||t){var i=a.DOMUtilities.getXMLContent(n),s=i;this.isICUMessage(i)||(s=this.translationMessagesFile().getNewTransUnitTargetPraefix()+i+this.translationMessagesFile().getNewTransUnitTargetSuffix()),a.DOMUtilities.replaceContentWithXMLContent(r,s)}else a.DOMUtilities.replaceContentWithXMLContent(r,"");var u=a.DOMUtilities.getFirstElementByTagName(this._element,"segment");u&&(e?u.setAttribute("state",this.mapStateToNativeState(o.STATE_FINAL)):u.setAttribute("state",this.mapStateToNativeState(o.STATE_NEW)))},t}(s.AbstractTransUnit);t.Xliff2TransUnit=c},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),a=n(3),s=n(2),u=n(17),l=function(e){function t(t,n,r){var i=e.call(this)||this;return i._warnings=[],i._numberOfTransUnitsWithMissingId=0,i.initializeFromContent(t,n,r),i}return i(t,e),t.prototype.initializeFromContent=function(e,t,n){this.parseContent(e,t,n);var r=this._parsedDocument.getElementsByTagName("xliff");if(1!==r.length)throw new Error(o.format('File "%s" seems to be no xliff file (should contain an xliff element)',t));var i=r.item(0).getAttribute("version");if("2.0"!==i)throw new Error(o.format('File "%s" seems to be no xliff 2 file, version should be %s, found %s',t,"2.0",i));return this},t.prototype.i18nFormat=function(){return a.FORMAT_XLIFF20},t.prototype.fileType=function(){return a.FILETYPE_XLIFF20},t.prototype.elementsWithMixedContent=function(){return["skeleton","note","data","source","target","pc","mrk"]},t.prototype.initializeTransUnits=function(){this.transUnits=[];for(var e=this._parsedDocument.getElementsByTagName("unit"),t=0;t<e.length;t++){var n=e.item(t),r=n.getAttribute("id");r||this._warnings.push(o.format('oops, trans-unit without "id" found in master, please check file %s',this._filename)),this.transUnits.push(new u.Xliff2TransUnit(n,r,this))}},t.prototype.sourceLanguage=function(){var e=s.DOMUtilities.getFirstElementByTagName(this._parsedDocument,"xliff");return e?e.getAttribute("srcLang"):null},t.prototype.setSourceLanguage=function(e){var t=s.DOMUtilities.getFirstElementByTagName(this._parsedDocument,"xliff");t&&t.setAttribute("srcLang",e)},t.prototype.targetLanguage=function(){var e=s.DOMUtilities.getFirstElementByTagName(this._parsedDocument,"xliff");return e?e.getAttribute("trgLang"):null},t.prototype.setTargetLanguage=function(e){var t=s.DOMUtilities.getFirstElementByTagName(this._parsedDocument,"xliff");t&&t.setAttribute("trgLang",e)},t.prototype.importNewTransUnit=function(e,t,n,r){if(this.transUnitWithId(e.id))throw new Error(o.format("tu with id %s already exists in file, cannot import it",e.id));var i=e.cloneWithSourceAsTarget(t,n,this),a=s.DOMUtilities.getFirstElementByTagName(this._parsedDocument,"file");if(!a)throw new Error(o.format('File "%s" seems to be no xliff 2.0 file (should contain a file element)',this._filename));var u=!1,l=!1;r&&(this.transUnitWithId(r.id)&&(l=!0));if(void 0===r||r&&!l)a.appendChild(i.asXmlElement()),u=!0;else if(null===r){var c=s.DOMUtilities.getFirstElementByTagName(this._parsedDocument,"unit");c?(s.DOMUtilities.insertBefore(i.asXmlElement(),c),u=!0):(a.appendChild(i.asXmlElement()),u=!0)}else{var p=s.DOMUtilities.getElementByTagNameAndId(this._parsedDocument,"unit",r.id);p&&(s.DOMUtilities.insertAfter(i.asXmlElement(),p),u=!0)}return u?(this.lazyInitializeTransUnits(),this.transUnits.push(i),this.countNumbers(),i):null},t.prototype.createTranslationFileForLang=function(e,n,r,i){var o=new t(this.editedContent(),n,this.encoding());return o.setNewTransUnitTargetPraefix(this.targetPraefix),o.setNewTransUnitTargetSuffix(this.targetSuffix),o.setTargetLanguage(e),o.forEachTransUnit(function(e){e.useSourceAsTarget(r,i)}),o},t}(n(4).AbstractTranslationMessagesFile);t.Xliff2File=l},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),a=n(2),s=n(5),u=n(11),l=function(e){function t(t,n,r,i){var o=e.call(this,t,n,r)||this;return o._sourceTransUnitFromMaster=i,o}return i(t,e),t.prototype.sourceContent=function(){return this._sourceTransUnitFromMaster?this._sourceTransUnitFromMaster.sourceContent():null},t.prototype.supportsSetSourceContent=function(){return!1},t.prototype.setSourceContent=function(e){},t.prototype.messageParser=function(){return new u.XmbMessageParser},t.prototype.createSourceContentNormalized=function(){return this._sourceTransUnitFromMaster?this._sourceTransUnitFromMaster.createSourceContentNormalized():null},t.prototype.targetContent=function(){return a.DOMUtilities.getXMLContent(this._element)},t.prototype.targetContentNormalized=function(){return this.messageParser().createNormalizedMessageFromXML(this._element,this.sourceContentNormalized())},t.prototype.nativeTargetState=function(){if(this._sourceTransUnitFromMaster){var e=this._sourceTransUnitFromMaster.sourceContent();return e&&e!==this.targetContent()&&this.targetContent()?"final":"new"}return null},t.prototype.mapStateToNativeState=function(e){return e},t.prototype.mapNativeStateToState=function(e){return e},t.prototype.setNativeTargetState=function(e){},t.prototype.sourceReferences=function(){return this._sourceTransUnitFromMaster?this._sourceTransUnitFromMaster.sourceReferences():[]},t.prototype.supportsSetSourceReferences=function(){return!1},t.prototype.setSourceReferences=function(e){},t.prototype.description=function(){return this._sourceTransUnitFromMaster?this._sourceTransUnitFromMaster.description():null},t.prototype.meaning=function(){return this._sourceTransUnitFromMaster?this._sourceTransUnitFromMaster.meaning():null},t.prototype.supportsSetDescriptionAndMeaning=function(){return!1},t.prototype.setDescription=function(e){},t.prototype.setMeaning=function(e){},t.prototype.cloneWithSourceAsTarget=function(e,t,n){return this},t.prototype.useSourceAsTarget=function(e,t){},t.prototype.translateNative=function(e){var t=this._element;o.isNullOrUndefined(e)&&(e=""),a.DOMUtilities.replaceContentWithXMLContent(t,e)},t}(s.AbstractTransUnit);t.XtbTransUnit=l},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(2),a=n(5),s=n(11),u=function(e){function t(t,n,r){return e.call(this,t,n,r)||this}return i(t,e),t.prototype.sourceContent=function(){var e=o.DOMUtilities.getXMLContent(this._element);return e=e.replace(/<source>.*<\/source>/g,"")},t.prototype.supportsSetSourceContent=function(){return!1},t.prototype.setSourceContent=function(e){},t.prototype.messageParser=function(){return new s.XmbMessageParser},t.prototype.createSourceContentNormalized=function(){return this.messageParser().createNormalizedMessageFromXML(this._element,null)},t.prototype.targetContent=function(){return this.sourceContent()},t.prototype.targetContentNormalized=function(){return(new s.XmbMessageParser).createNormalizedMessageFromXML(this._element,this.sourceContentNormalized())},t.prototype.nativeTargetState=function(){return null},t.prototype.mapStateToNativeState=function(e){return e},t.prototype.mapNativeStateToState=function(e){return e},t.prototype.setNativeTargetState=function(e){},t.prototype.sourceReferences=function(){for(var e=this._element.getElementsByTagName("source"),n=[],r=0;r<e.length;r++){var i=e.item(r),a=o.DOMUtilities.getPCDATA(i);n.push(t.parseSourceAndPos(a))}return n},t.prototype.setSourceReferences=function(e){this.removeAllSourceReferences();for(var t=this._element.childNodes.item(0),n=e.length-1;n>=0;n--){var r=e[n],i=this._element.ownerDocument.createElement("source");i.appendChild(this._element.ownerDocument.createTextNode(r.sourcefile+":"+r.linenumber.toString(10))),this._element.insertBefore(i,t),t=i}},t.prototype.removeAllSourceReferences=function(){for(var e=this._element.getElementsByTagName("source"),t=[],n=0;n<e.length;n++){var r=e.item(n);t.push(r)}t.forEach(function(e){e.parentNode.removeChild(e)})},t.parseSourceAndPos=function(e){var n=e.lastIndexOf(":");return n<0?{sourcefile:e,linenumber:0}:{sourcefile:e.substring(0,n),linenumber:t.parseLineNumber(e.substring(n+1))}},t.parseLineNumber=function(e){return Number.parseInt(e)},t.prototype.description=function(){return this._element.getAttribute("desc")},t.prototype.meaning=function(){return this._element.getAttribute("meaning")},t.prototype.supportsSetDescriptionAndMeaning=function(){return!1},t.prototype.setDescription=function(e){},t.prototype.setMeaning=function(e){},t.prototype.cloneWithSourceAsTarget=function(e,t,n){return this},t.prototype.useSourceAsTarget=function(e,t){},t.prototype.translateNative=function(e){throw new Error("You cannot translate xmb files, use xtb instead.")},t.prototype.sourceRefsToHtml=function(){var e="";return this.sourceReferences().forEach(function(t){e=e+"<source>"+t.sourcefile+":"+t.linenumber+"</source>"}),e},t}(a.AbstractTransUnit);t.XmbTransUnit=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(13),i=n(0);t.TEXT="TEXT",t.START_TAG="START_TAG",t.END_TAG="END_TAG",t.EMPTY_TAG="EMPTY_TAG",t.PLACEHOLDER="PLACEHOLDER",t.ICU_MESSAGE_REF="ICU_MESSAGE_REF",t.ICU_MESSAGE="ICU_MESSAGE";var o=function(){function e(){}return e.prototype.getLexer=function(){var e=new r,n="";return e.before(function(e,r,i){i.name!==t.TEXT&&""!==n&&(e.accept(t.TEXT,{text:n}),n="")}),e.finish(function(e){""!==n&&e.accept(t.TEXT,{text:n})}),e.rule(/<(br|hr|img|area|link|wbr)( id="([0-9])*")?\>/,function(e,n){var r=i.isNullOrUndefined(n[3])?0:parseInt(n[3],10);e.accept(t.EMPTY_TAG,{name:n[1],idcounter:r})},t.EMPTY_TAG),e.rule(/<([a-zA-Z][a-zA-Z-0-9]*)( id="([0-9]*)")?>/,function(e,n){var r=i.isNullOrUndefined(n[3])?0:parseInt(n[3],10);e.accept(t.START_TAG,{name:n[1],idcounter:r})},t.START_TAG),e.rule(/<\/([a-zA-Z][a-zA-Z-0-9]*)>/,function(e,n){e.accept(t.END_TAG,{name:n[1]})},t.END_TAG),e.rule(/{{([0-9]+)}}/,function(e,n){e.accept(t.PLACEHOLDER,{idcounter:parseInt(n[1],10)})},t.PLACEHOLDER),e.rule(/<ICU-Message-Ref_([0-9]+)\/>/,function(e,n){e.accept(t.ICU_MESSAGE_REF,{idcounter:parseInt(n[1],10)})},t.ICU_MESSAGE_REF),e.rule(/<ICU-Message\/>/,function(e,n){e.accept(t.ICU_MESSAGE,{message:n[0]})},t.ICU_MESSAGE),e.rule(/./,function(e,t){n+=t[0],e.ignore()},t.TEXT),e.rule(/[\t\r\n]+/,function(e,t){n+=t[0],e.ignore()},t.TEXT),e},e.prototype.tokenize=function(e){var t=this.getLexer();return t.reset(),t.input(e),t.tokens()},e}();t.ParsedMesageTokenizer=o},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(1),a=function(e){function t(t,n){var r=e.call(this,o.ParsedMessagePartType.EMPTY_TAG)||this;return r._tagname=t,r._idcounter=n,r}return i(t,e),t.prototype.asDisplayString=function(e){return 0===this._idcounter?"<"+this._tagname+">":"<"+this._tagname+' id="'+this._idcounter.toString()+'">'},t.prototype.tagName=function(){return this._tagname},t.prototype.idCounter=function(){return this._idcounter},t}(o.ParsedMessagePart);t.ParsedMessagePartEmptyTag=a},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(1),a=function(e){function t(t,n){var r=e.call(this,o.ParsedMessagePartType.ICU_MESSAGE_REF)||this;return r._index=t,r._disp=n,r}return i(t,e),t.prototype.asDisplayString=function(e){return"<ICU-Message-Ref_"+this._index+"/>"},t.prototype.index=function(){return this._index},t.prototype.disp=function(){return this._disp},t}(o.ParsedMessagePart);t.ParsedMessagePartICUMessageRef=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=function(){function e(e,t){this._category=e,this._message=t}return e.prototype.getCategory=function(){return this._category},e.prototype.getMessageNormalized=function(){return this._message},e}(),o=function(){function e(e,t){this._parser=e,this._isPluralMessage=t,this._categories=[]}return e.prototype.addCategory=function(e,t){this._categories.push(new i(e,t))},e.prototype.asNativeString=function(){var e=this.isPluralMessage()?"VAR_PLURAL":"VAR_SELECT",t=this.isPluralMessage()?"plural":"select",n="";return this._categories.forEach(function(e){n+=r.format(" %s {%s}",e.getCategory(),e.getMessageNormalized().asNativeString())}),r.format("{%s, %s,%s}",e,t,n)},e.prototype.isPluralMessage=function(){return this._isPluralMessage},e.prototype.isSelectMessage=function(){return!this._isPluralMessage},e.prototype.getCategories=function(){return this._categories},e.prototype.translate=function(t){var n=this,i=new e(this._parser,this.isPluralMessage()),o=new Set;return this._categories.forEach(function(e){var a,s=t[e.getCategory()];r.isNullOrUndefined(s)?a=e.getMessageNormalized():r.isString(s)?(o.add(e.getCategory()),a=n._parser.parseNormalizedString(s,null)):a=null,i.addCategory(e.getCategory(),a)}),Object.keys(t).forEach(function(e){if(!o.has(e)){if(n.isSelectMessage())throw new Error(r.format('adding a new category not allowed for select messages ("%s" is not part of message)',e));n.checkValidPluralCategory(e);var a=n._parser.parseNormalizedString(t[e],null);i.addCategory(e,a)}}),i},e.prototype.checkValidPluralCategory=function(e){var t=["zero","one","two","few","many","other"];if(!e.match(/=\d+/)&&!t.find(function(t){return t===e}))throw new Error(r.format('invalid plural category "%s", allowed are =<n> and %s',e,t))},e}();t.ICUMessage=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(13);t.TEXT="TEXT",t.CURLY_BRACE_OPEN="CURLY_BRACE_OPEN",t.CURLY_BRACE_CLOSE="CURLY_BRACE_CLOSE",t.COMMA="COMMA",t.PLURAL="PLURAL",t.SELECT="SELECT";var i=function(){function e(){}return e.prototype.getLexer=function(){var e=this,n=new r,i="",o=0;return n.before(function(n,r,o){o.name!==t.TEXT&&(e.containsNonWhiteSpace(i)?(n.accept(t.TEXT,i),i=""):n.ignore())}),n.finish(function(n){e.containsNonWhiteSpace(i)&&n.accept(t.TEXT,i)}),n.rule("default",/{/,function(e,n){e.accept(t.CURLY_BRACE_OPEN,n[0]),e.push("normal")},t.CURLY_BRACE_OPEN),n.rule("normal",/{/,function(e,n){e.accept(t.CURLY_BRACE_OPEN,n[0]),e.push("in_message")},t.CURLY_BRACE_OPEN),n.rule("normal",/}/,function(e,n){e.pop(),e.accept(t.CURLY_BRACE_CLOSE,n[0])},t.CURLY_BRACE_CLOSE),n.rule("in_message",/'[{}]?'/,function(e,t){"''"===t[0]?i+="'":"'{'"===t[0]?i+="{":"'}'"===t[0]&&(i+="}"),e.ignore()},t.TEXT),n.rule("in_message",/./,function(e,n){var r=n[0];"{"===r?(o++,i+=n[0],e.ignore()):"}"===r?o>0?(o--,i+=n[0],e.ignore()):(e.pop(),e.accept(t.TEXT,i),i="",e.accept(t.CURLY_BRACE_CLOSE,n[0])):(i+=n[0],e.ignore())},t.TEXT),n.rule("normal",/,/,function(e,n){e.accept(t.COMMA,n[0])},t.COMMA),n.rule("normal",/plural/,function(e,n){e.accept(t.PLURAL,n[0])},t.PLURAL),n.rule("normal",/select/,function(e,n){e.accept(t.SELECT,n[0])},t.SELECT),n.rule(/./,function(e,t){i+=t[0],e.ignore()},t.TEXT),n.rule(/[\s]+/,function(e,t){i+=t[0],e.ignore()},t.TEXT),n},e.prototype.containsNonWhiteSpace=function(e){for(var t=0;t<e.length;t++)if(!/\s/.test(e.charAt(t)))return!0;return!1},e.prototype.tokenize=function(e){var t=this.getLexer();return t.input(e),t.tokens()},e.prototype.input=function(e){this.lexer=this.getLexer(),this.lexer.input(e)},e.prototype.next=function(){return this.lexer.token()},e.prototype.peek=function(){return this.lexer.peek()},e}();t.ICUMessageTokenizer=i},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(1),a=function(e){function t(t){var n=e.call(this,o.ParsedMessagePartType.END_TAG)||this;return n._tagname=t,n}return i(t,e),t.prototype.asDisplayString=function(e){return"</"+this._tagname+">"},t.prototype.tagName=function(){return this._tagname},t}(o.ParsedMessagePart);t.ParsedMessagePartEndTag=a},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(1),a=function(e){function t(t,n){var r=e.call(this,o.ParsedMessagePartType.START_TAG)||this;return r._tagname=t,r._idcounter=n,r}return i(t,e),t.prototype.asDisplayString=function(e){return 0===this._idcounter?"<"+this._tagname+">":"<"+this._tagname+' id="'+this._idcounter.toString()+'">'},t.prototype.tagName=function(){return this._tagname},t.prototype.idCounter=function(){return this._idcounter},t}(o.ParsedMessagePart);t.ParsedMessagePartStartTag=a},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(1),a=n(7),s=function(e){function t(t,n){var r=e.call(this,o.ParsedMessagePartType.PLACEHOLDER)||this;return r._index=t,r._disp=n,r}return i(t,e),t.prototype.asDisplayString=function(e){return a.NORMALIZATION_FORMAT_NGXTRANSLATE,"{{"+this._index+"}}"},t.prototype.index=function(){return this._index},t.prototype.disp=function(){return this._disp},t}(o.ParsedMessagePart);t.ParsedMessagePartPlaceholder=s},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(1),a=function(e){function t(t){var n=e.call(this,o.ParsedMessagePartType.TEXT)||this;return n.text=t,n}return i(t,e),t.prototype.asDisplayString=function(e){return this.text},t}(o.ParsedMessagePart);t.ParsedMessagePartText=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),i=n(29),o=n(28),a=n(27),s=n(26),u=n(2),l=n(0),c=n(14),p=n(23),f=n(22),h=function(){function e(e,t){this._parser=e,this.sourceMessage=t,this._parts=[]}return e.prototype.getParser=function(){return this._parser},e.prototype.translate=function(e){if(l.isNullOrUndefined(this.getICUMessage()))return this._parser.parseNormalizedString(e,this);throw new Error(l.format('cannot translate ICU message with simple string, use translateICUMessage() instead ("%s", "%s")',e,this.asNativeString()))},e.prototype.translateICUMessage=function(e){var t=this.getICUMessage();if(l.isNullOrUndefined(t))throw new Error(l.format('this is not an ICU message, use translate() instead ("%s", "%s")',e,this.asNativeString()));var n=t.translate(e);return this._parser.parseICUMessage(n.asNativeString(),this)},e.prototype.translateNativeString=function(e){return this._parser.createNormalizedMessageFromXMLString(e,this)},e.prototype.asDisplayString=function(e){return this._parts.map(function(t){return t.asDisplayString(e)}).join("")},e.prototype.asNativeString=function(){return l.isNullOrUndefined(this.getICUMessage())?u.DOMUtilities.getXMLContent(this._xmlRepresentation):this.getICUMessage().asNativeString()},e.prototype.validate=function(){var e,t=!1,n={};return e=this.checkPlaceholderAdded(),l.isNullOrUndefined(e)||(n.placeholderAdded=e,t=!0),e=this.checkICUMessageRefRemoved(),l.isNullOrUndefined(e)||(n.icuMessageRefRemoved=e,t=!0),e=this.checkICUMessageRefAdded(),l.isNullOrUndefined(e)||(n.icuMessageRefAdded=e,t=!0),t?n:null},e.prototype.validateWarnings=function(){var e,t=!1,n={};return e=this.checkPlaceholderRemoved(),l.isNullOrUndefined(e)||(n.placeholderRemoved=e,t=!0),e=this.checkTagRemoved(),l.isNullOrUndefined(e)||(n.tagRemoved=e,t=!0),e=this.checkTagAdded(),l.isNullOrUndefined(e)||(n.tagAdded=e,t=!0),t?n:null},e.prototype.getICUMessage=function(){return 1===this._parts.length&&this._parts[0].type===r.ParsedMessagePartType.ICU_MESSAGE?this._parts[0].getICUMessage():null},e.prototype.checkPlaceholderAdded=function(){var e=null,t=[];if(this.sourceMessage){var n=this.sourceMessage.allPlaceholders();this.allPlaceholders().forEach(function(e){n.has(e)||t.push(e)})}if(1===t.length)e="added placeholder "+t[0]+", which is not in original message";else if(t.length>1){var r="",i=!0;t.forEach(function(e){i||(r+=", "),r+=e,i=!1}),e="added placeholders "+r+", which are not in original message"}return e},e.prototype.checkPlaceholderRemoved=function(){var e=null,t=[];if(this.sourceMessage){var n=this.sourceMessage.allPlaceholders(),r=this.allPlaceholders();n.forEach(function(e){r.has(e)||t.push(e)})}if(1===t.length)e="removed placeholder "+t[0]+" from original message";else if(t.length>1){var i="",o=!0;t.forEach(function(e){o||(i+=", "),i+=e,o=!1}),e="removed placeholders "+i+" from original message"}return e},e.prototype.checkICUMessageRefAdded=function(){var e=null,t=[];if(this.sourceMessage){var n=this.sourceMessage.allICUMessageRefs();this.allICUMessageRefs().forEach(function(e){n.has(e)||t.push(e)})}if(1===t.length)e="added ICU message reference "+t[0]+", which is not in original message";else if(t.length>1){var r="",i=!0;t.forEach(function(e){i||(r+=", "),r+=e,i=!1}),e="added ICU message references "+r+", which are not in original message"}return e},e.prototype.checkICUMessageRefRemoved=function(){var e=null,t=[];if(this.sourceMessage){var n=this.sourceMessage.allICUMessageRefs(),r=this.allICUMessageRefs();n.forEach(function(e){r.has(e)||t.push(e)})}if(1===t.length)e="removed ICU message reference "+t[0]+" from original message";else if(t.length>1){var i="",o=!0;t.forEach(function(e){o||(i+=", "),i+=e,o=!1}),e="removed ICU message references "+i+" from original message"}return e},e.prototype.allPlaceholders=function(){var e=new Set;return this.parts().forEach(function(t){if(t.type===r.ParsedMessagePartType.PLACEHOLDER){var n=t.index();e.add(n)}}),e},e.prototype.getPlaceholderDisp=function(e){var t=null;return this.parts().forEach(function(n){if(n.type===r.ParsedMessagePartType.PLACEHOLDER){var i=n;i.index()===e&&(t=i)}}),t?t.disp():null},e.prototype.allICUMessageRefs=function(){var e=new Set;return this.parts().forEach(function(t){if(t.type===r.ParsedMessagePartType.ICU_MESSAGE_REF){var n=t.index();e.add(n)}}),e},e.prototype.getICUMessageRefDisp=function(e){var t=null;return this.parts().forEach(function(n){if(n.type===r.ParsedMessagePartType.ICU_MESSAGE_REF){var i=n;i.index()===e&&(t=i)}}),t?t.disp():null},e.prototype.checkTagAdded=function(){var e=null,t=[];if(this.sourceMessage){var n=this.sourceMessage.allTags();this.allTags().forEach(function(e){n.has(e)||t.push(e)})}if(1===t.length)e="added tag <"+t[0]+">, which is not in original message";else if(t.length>1){var r="",i=!0;t.forEach(function(e){i||(r+=", "),r=r+"<"+e+">",i=!1}),e="added tags "+r+", which are not in original message"}return e},e.prototype.checkTagRemoved=function(){var e=null,t=[];if(this.sourceMessage){var n=this.sourceMessage.allTags(),r=this.allTags();n.forEach(function(e){r.has(e)||t.push(e)})}if(1===t.length)e="removed tag <"+t[0]+"> from original message";else if(t.length>1){var i="",o=!0;t.forEach(function(e){o||(i+=", "),i=i+"<"+e+">",o=!1}),e="removed tags "+i+" from original message"}return e},e.prototype.allTags=function(){var e=new Set;return this.parts().forEach(function(t){if(t.type===r.ParsedMessagePartType.START_TAG||t.type===r.ParsedMessagePartType.EMPTY_TAG){var n=t.tagName();e.add(n)}}),e},e.prototype.parts=function(){return this._parts},e.prototype.setXmlRepresentation=function(e){this._xmlRepresentation=e},e.prototype.addText=function(e){this._parts.push(new i.ParsedMessagePartText(e))},e.prototype.addPlaceholder=function(e,t){this._parts.push(new o.ParsedMessagePartPlaceholder(e,t))},e.prototype.addStartTag=function(e,t){this._parts.push(new a.ParsedMessagePartStartTag(e,t))},e.prototype.addEndTag=function(e){var t=this.calculateOpenTagName();if(!t||t!==e)throw new Error(l.format('unexpected close tag %s (currently open is %s, native xml is "%s")',e,t,this.asNativeString()));this._parts.push(new s.ParsedMessagePartEndTag(e))},e.prototype.addEmptyTag=function(e,t){this._parts.push(new f.ParsedMessagePartEmptyTag(e,t))},e.prototype.addICUMessageRef=function(e,t){this._parts.push(new p.ParsedMessagePartICUMessageRef(e,t))},e.prototype.addICUMessage=function(e){this._parts.push(new c.ParsedMessagePartICUMessage(e,this._parser))},e.prototype.calculateOpenTagName=function(){var e=this,t=[];return this._parts.forEach(function(n){switch(n.type){case r.ParsedMessagePartType.START_TAG:t.push(n.tagName());break;case r.ParsedMessagePartType.END_TAG:var i=n.tagName();if(0===t.length||t[t.length-1]!==i){var o=0===t.length?"nothing":t[t.length-1];throw new Error(l.format('unexpected close tag %s (currently open is %s, native xml is "%s")',i,o,e.asNativeString()))}t.pop()}}),0===t.length?null:t[t.length-1]},e}();t.ParsedMessage=h},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(8),a=n(6),s=n(1),u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.processStartElement=function(e,t){var n=e.tagName,r=new a.TagMapping;if("x"===n){var i=e.getAttribute("id");if(!i)return;if(i.startsWith("INTERPOLATION")){var o=this.parsePlaceholderIndexFromId(i);t.addPlaceholder(o,null)}else if(i.startsWith("ICU")){o=this.parseICUMessageRefIndexFromId(i);t.addICUMessageRef(o,null)}else if(i.startsWith("START_")){if(u=r.getTagnameFromStartTagPlaceholderName(i)){var s=this.parseIdCountFromName(i);t.addStartTag(u,s)}}else if(i.startsWith("CLOSE_")){(u=r.getTagnameFromCloseTagPlaceholderName(i))&&t.addEndTag(u)}else if(r.isEmptyTagPlaceholderName(i)){var u;if(u=r.getTagnameFromEmptyTagPlaceholderName(i)){s=this.parseIdCountFromName(i);t.addEmptyTag(u,s)}}}return!0},t.prototype.processEndElement=function(e,t){},t.prototype.parsePlaceholderIndexFromId=function(e){var t="";return t="INTERPOLATION"===e?"0":e.substring("INTERPOLATION_".length),Number.parseInt(t)},t.prototype.parseICUMessageRefIndexFromId=function(e){var t="";return t="ICU"===e?"0":e.substring("ICU_".length),Number.parseInt(t)},t.prototype.addXmlRepresentationToRoot=function(e,t){var n=this;e.parts().forEach(function(e){var r;switch(e.type){case s.ParsedMessagePartType.TEXT:r=n.createXmlRepresentationOfTextPart(e,t);break;case s.ParsedMessagePartType.START_TAG:r=n.createXmlRepresentationOfStartTagPart(e,t);break;case s.ParsedMessagePartType.END_TAG:r=n.createXmlRepresentationOfEndTagPart(e,t);break;case s.ParsedMessagePartType.EMPTY_TAG:r=n.createXmlRepresentationOfEmptyTagPart(e,t);break;case s.ParsedMessagePartType.PLACEHOLDER:r=n.createXmlRepresentationOfPlaceholderPart(e,t);break;case s.ParsedMessagePartType.ICU_MESSAGE_REF:r=n.createXmlRepresentationOfICUMessageRefPart(e,t)}r&&t.appendChild(r)})},t.prototype.createXmlRepresentationOfStartTagPart=function(e,t){var n=t.ownerDocument.createElement("x"),r=new a.TagMapping,i=r.getStartTagPlaceholderName(e.tagName(),e.idCounter()),o=r.getCtypeForTag(e.tagName()),s="<"+e.tagName()+">";return n.setAttribute("id",i),n.setAttribute("ctype",o),n.setAttribute("equiv-text",s),n},t.prototype.createXmlRepresentationOfEndTagPart=function(e,t){var n=t.ownerDocument.createElement("x"),r=(new a.TagMapping).getCloseTagPlaceholderName(e.tagName()),i="x-"+e.tagName();return n.setAttribute("id",r),n.setAttribute("ctype",i),n},t.prototype.createXmlRepresentationOfEmptyTagPart=function(e,t){var n=t.ownerDocument.createElement("x"),r=new a.TagMapping,i=r.getEmptyTagPlaceholderName(e.tagName(),e.idCounter()),o=r.getCtypeForTag(e.tagName()),s="<"+e.tagName()+"/>";return n.setAttribute("id",i),n.setAttribute("ctype",o),n.setAttribute("equiv-text",s),n},t.prototype.createXmlRepresentationOfPlaceholderPart=function(e,t){var n=t.ownerDocument.createElement("x"),r="INTERPOLATION";e.index()>0&&(r="INTERPOLATION_"+e.index().toString(10));var i=e.disp();return n.setAttribute("id",r),i&&n.setAttribute("equiv-text",i),n},t.prototype.createXmlRepresentationOfICUMessageRefPart=function(e,t){var n=t.ownerDocument.createElement("x"),r="ICU";return e.index()>0&&(r="ICU_"+e.index().toString(10)),n.setAttribute("id",r),n},t}(o.AbstractMessageParser);t.XliffMessageParser=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){}return e.prototype.serializeToString=function(e,t){var n=[],r=[],i=e.documentElement,o=i.prefix,a=i.namespaceURI;if(a&&null==o&&null==(o=i.lookupPrefix(a))&&(r=[{namespace:a,prefix:null}]),t||(t={}),t.indentString&&!this.containsOnlyWhiteSpace(t.indentString))throw new Error("indentString must not contain non white characters");return this.doSerializeToString(e,t,n,0,!1,r),n.join("")},e.prototype.doSerializeToString=function(e,t,n,r,i,o){var a;switch(e.nodeType){case e.ELEMENT_NODE:var s=e,u=s.attributes,l=u.length;a=s.firstChild;var c=s.tagName,p=this.isMixedContentElement(c,t);i?n.push("<",c):this.outputIndented(t,n,r,"<",c);for(var f=0;f<l;f++){"xmlns"===(h=u.item(f)).prefix?o.push({prefix:h.localName,namespace:h.value}):"xmlns"===h.nodeName&&o.push({prefix:"",namespace:h.value})}for(f=0;f<l;f++){var h=u.item(f);if(this.needNamespaceDefine(h,o)){var g=h.prefix||"",m=h.namespaceURI,d=g?" xmlns:"+g:" xmlns";n.push(d,'="',m,'"'),o.push({prefix:g,namespace:m})}this.doSerializeToString(h,t,n,r,!1,o)}if(this.needNamespaceDefine(s,o)){g=s.prefix||"",m=e.namespaceURI,d=g?" xmlns:"+g:" xmlns";n.push(d,'="',m,'"'),o.push({prefix:g,namespace:m})}if(a){n.push(">");for(var _=!1;a;)a.nodeType===a.ELEMENT_NODE&&(_=!0),this.doSerializeToString(a,t,n,r+1,i||p,o),a=a.nextSibling;i||p||!_?n.push("</",c,">"):this.outputIndented(t,n,r,"</",c,">")}else n.push("/>");return;case e.DOCUMENT_NODE:case e.DOCUMENT_FRAGMENT_NODE:for(a=e.firstChild;a;)this.doSerializeToString(a,t,n,r,!1,o),a=a.nextSibling;return;case e.ATTRIBUTE_NODE:var y=e;return n.push(" ",y.name,'="',y.value.replace(/[<&"]/g,this._xmlEncoder),'"');case e.TEXT_NODE:var T=e;return t.beautify&&!i&&this.containsOnlyWhiteSpace(T.data)?void 0:n.push(T.data.replace(/[<&]/g,this._xmlEncoder));case e.CDATA_SECTION_NODE:var E=e;return n.push("<![CDATA[",E.data,"]]>");case e.COMMENT_NODE:var v=e;return n.push("\x3c!--",v.data,"--\x3e");case e.DOCUMENT_TYPE_NODE:var N=e,b=N.publicId,w=N.systemId;if(n.push("<!DOCTYPE ",N.name),b)n.push(' PUBLIC "',b),w&&"."!==w&&n.push('" "',w),n.push('">');else if(w&&"."!==w)n.push(' SYSTEM "',w,'">');else{var A=N.internalSubset;A&&n.push(" [",A,"]"),n.push(">")}return;case e.PROCESSING_INSTRUCTION_NODE:var M=e;return n.push("<?",M.target," ",M.data,"?>");case e.ENTITY_REFERENCE_NODE:return n.push("&",e.nodeName,";");default:n.push("??",e.nodeName)}},e.prototype.needNamespaceDefine=function(e,t){var n=e.prefix||"",r=e.namespaceURI;if(!n&&!r)return!1;if("xml"===n&&"http://www.w3.org/XML/1998/namespace"===r||"http://www.w3.org/2000/xmlns/"===r)return!1;for(var i=t.length;i--;){var o=t[i];if(o.prefix===n)return o.namespace!==r}return!0},e.prototype._xmlEncoder=function(e){return("<"===e?"&lt;":">"===e&&"&gt;")||"&"===e&&"&amp;"||'"'===e&&"&quot;"||"&#"+e.charCodeAt(0)+";"},e.prototype.outputIndented=function(e,t,n){for(var r=[],i=3;i<arguments.length;i++)r[i-3]=arguments[i];e.beautify&&(t.push("\n"),n>0&&t.push(this.indentationString(e,n))),t.push.apply(t,r)},e.prototype.indentationString=function(e,t){for(var n=e.indentString?e.indentString:"  ",r="",i=0;i<t;i++)r+=n;return r},e.prototype.isMixedContentElement=function(e,t){return!(!t||!t.mixedContentElements)&&!!t.mixedContentElements.find(function(t){return t===e})},e.prototype.containsOnlyWhiteSpace=function(e){for(var t=0;t<e.length;t++){var n=e.charAt(t);if(" "!==n&&"\t"!==n&&"\r"!==n&&"\n"!==n)return!1}return!0},e}();t.XmlSerializer=r},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(3),a=n(2),s=n(5),u=n(31),l=n(0),c=function(e){function t(t,n,r){return e.call(this,t,n,r)||this}return i(t,e),t.prototype.sourceContent=function(){var e=a.DOMUtilities.getFirstElementByTagName(this._element,"source");return a.DOMUtilities.getXMLContent(e)},t.prototype.setSourceContent=function(e){var t=a.DOMUtilities.getFirstElementByTagName(this._element,"source");t||(t=this._element.appendChild(this._element.ownerDocument.createElement("source"))),a.DOMUtilities.replaceContentWithXMLContent(t,e)},t.prototype.messageParser=function(){return new u.XliffMessageParser},t.prototype.createSourceContentNormalized=function(){var e=a.DOMUtilities.getFirstElementByTagName(this._element,"source");return e?this.messageParser().createNormalizedMessageFromXML(e,null):null},t.prototype.targetContent=function(){var e=a.DOMUtilities.getFirstElementByTagName(this._element,"target");return a.DOMUtilities.getXMLContent(e)},t.prototype.targetContentNormalized=function(){var e=a.DOMUtilities.getFirstElementByTagName(this._element,"target");return(new u.XliffMessageParser).createNormalizedMessageFromXML(e,this.sourceContentNormalized())},t.prototype.nativeTargetState=function(){var e=a.DOMUtilities.getFirstElementByTagName(this._element,"target");return e?e.getAttribute("state"):null},t.prototype.setNativeTargetState=function(e){var t=a.DOMUtilities.getFirstElementByTagName(this._element,"target");t&&t.setAttribute("state",e)},t.prototype.mapStateToNativeState=function(e){switch(e){case o.STATE_NEW:return"new";case o.STATE_TRANSLATED:return"translated";case o.STATE_FINAL:return"final";default:throw new Error("unknown state "+e)}},t.prototype.mapNativeStateToState=function(e){switch(e){case"new":case"needs-translation":return o.STATE_NEW;case"translated":case"needs-adaptation":case"needs-l10n":case"needs-review-adaptation":case"needs-review-l10n":case"needs-review-translation":return o.STATE_TRANSLATED;case"final":case"signed-off":return o.STATE_FINAL;default:return o.STATE_NEW}},t.prototype.sourceReferences=function(){for(var e=this._element.getElementsByTagName("context-group"),t=[],n=0;n<e.length;n++){var r=e.item(n);if("location"===r.getAttribute("purpose")){for(var i=r.getElementsByTagName("context"),o=null,s=0,u=0;u<i.length;u++){var l=i.item(u);"sourcefile"===l.getAttribute("context-type")&&(o=a.DOMUtilities.getPCDATA(l)),"linenumber"===l.getAttribute("context-type")&&(s=Number.parseInt(a.DOMUtilities.getPCDATA(l)))}t.push({sourcefile:o,linenumber:s})}}return t},t.prototype.setSourceReferences=function(e){var t=this;this.removeAllSourceReferences(),e.forEach(function(e){var n=t._element.ownerDocument.createElement("context-group");n.setAttribute("purpose","location");var r=t._element.ownerDocument.createElement("context");r.setAttribute("context-type","sourcefile"),r.appendChild(t._element.ownerDocument.createTextNode(e.sourcefile));var i=t._element.ownerDocument.createElement("context");i.setAttribute("context-type","linenumber"),i.appendChild(t._element.ownerDocument.createTextNode(e.linenumber.toString(10))),n.appendChild(r),n.appendChild(i),t._element.appendChild(n)})},t.prototype.removeAllSourceReferences=function(){for(var e=this._element.getElementsByTagName("context-group"),t=[],n=0;n<e.length;n++){var r=e.item(n);"location"===r.getAttribute("purpose")&&t.push(r)}t.forEach(function(e){e.parentNode.removeChild(e)})},t.prototype.description=function(){var e=this.findNoteElementWithFromAttribute("description");return e?a.DOMUtilities.getPCDATA(e):null},t.prototype.setDescription=function(e){var t=this.findNoteElementWithFromAttribute("description");e?(l.isNullOrUndefined(t)&&(t=this.createNoteElementWithFromAttribute("description")),a.DOMUtilities.replaceContentWithXMLContent(t,e)):l.isNullOrUndefined(t)||this.removeNoteElementWithFromAttribute("description")},t.prototype.findNoteElementWithFromAttribute=function(e){for(var t=this._element.getElementsByTagName("note"),n=0;n<t.length;n++){var r=t.item(n);if(r.getAttribute("from")===e)return r}return null},t.prototype.createNoteElementWithFromAttribute=function(e){var t=this._element.ownerDocument.createElement("note");return t.setAttribute("from",e),t.setAttribute("priority","1"),this._element.appendChild(t),t},t.prototype.removeNoteElementWithFromAttribute=function(e){var t=this.findNoteElementWithFromAttribute(e);t&&this._element.removeChild(t)},t.prototype.meaning=function(){var e=this.findNoteElementWithFromAttribute("meaning");return e?a.DOMUtilities.getPCDATA(e):null},t.prototype.setMeaning=function(e){var t=this.findNoteElementWithFromAttribute("meaning");e?(l.isNullOrUndefined(t)&&(t=this.createNoteElementWithFromAttribute("meaning")),a.DOMUtilities.replaceContentWithXMLContent(t,e)):l.isNullOrUndefined(t)||this.removeNoteElementWithFromAttribute("meaning")},t.prototype.translateNative=function(e){var t=a.DOMUtilities.getFirstElementByTagName(this._element,"target");if(!t){var n=a.DOMUtilities.getFirstElementByTagName(this._element,"source");t=a.DOMUtilities.createFollowingSibling("target",n)}a.DOMUtilities.replaceContentWithXMLContent(t,e),this.setTargetState(o.STATE_TRANSLATED)},t.prototype.cloneWithSourceAsTarget=function(e,n,r){var i=new t(this._element.cloneNode(!0),this._id,r);return i.useSourceAsTarget(e,n),i},t.prototype.useSourceAsTarget=function(e,t){var n=a.DOMUtilities.getFirstElementByTagName(this._element,"source"),r=a.DOMUtilities.getFirstElementByTagName(this._element,"target");if(r||(r=a.DOMUtilities.createFollowingSibling("target",n)),e||t){var i=a.DOMUtilities.getXMLContent(n),s=i;this.isICUMessage(i)||(s=this.translationMessagesFile().getNewTransUnitTargetPraefix()+i+this.translationMessagesFile().getNewTransUnitTargetSuffix()),a.DOMUtilities.replaceContentWithXMLContent(r,s)}else a.DOMUtilities.replaceContentWithXMLContent(r,"");e?r.setAttribute("state",this.mapStateToNativeState(o.STATE_FINAL)):r.setAttribute("state",this.mapStateToNativeState(o.STATE_NEW))},t}(s.AbstractTransUnit);t.XliffTransUnit=c},function(e,t){var n=/[A-Z_a-z\xC0-\xD6\xD8-\xF6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,r=new RegExp("[\\-\\.0-9"+n.source.slice(1,-1)+"\\u00B7\\u0300-\\u036F\\u203F-\\u2040]"),i=new RegExp("^"+n.source+r.source+"*(?::"+n.source+r.source+"*)?$"),o=0,a=1,s=2,u=3,l=4,c=5,p=6,f=7;function h(){}function g(e,t){return t.lineNumber=e.lineNumber,t.columnNumber=e.columnNumber,t}function m(e,t,n,r,i,h){for(var g,m=++t,d=o;;){var _=e.charAt(m);switch(_){case"=":if(d===a)g=e.slice(t,m),d=u;else{if(d!==s)throw new Error("attribute equal must after attrName");d=u}break;case"'":case'"':if(d===u||d===a){if(d===a&&(h.warning('attribute value must after "="'),g=e.slice(t,m)),t=m+1,!((m=e.indexOf(_,t))>0))throw new Error("attribute value no end '"+_+"' match");y=e.slice(t,m).replace(/&#?\w+;/g,i),n.add(g,y,t-1),d=c}else{if(d!=l)throw new Error('attribute value must after "="');y=e.slice(t,m).replace(/&#?\w+;/g,i),n.add(g,y,t),h.warning('attribute "'+g+'" missed start quot('+_+")!!"),t=m+1,d=c}break;case"/":switch(d){case o:n.setTagName(e.slice(t,m));case c:case p:case f:d=f,n.closed=!0;case l:case a:case s:break;default:throw new Error("attribute invalid close char('/')")}break;case"":return h.error("unexpected end of input"),d==o&&n.setTagName(e.slice(t,m)),m;case">":switch(d){case o:n.setTagName(e.slice(t,m));case c:case p:case f:break;case l:case a:"/"===(y=e.slice(t,m)).slice(-1)&&(n.closed=!0,y=y.slice(0,-1));case s:d===s&&(y=g),d==l?(h.warning('attribute "'+y+'" missed quot(")!!'),n.add(g,y.replace(/&#?\w+;/g,i),t)):("http://www.w3.org/1999/xhtml"===r[""]&&y.match(/^(?:disabled|checked|selected)$/i)||h.warning('attribute "'+y+'" missed value!! "'+y+'" instead!!'),n.add(y,y,t));break;case u:throw new Error("attribute value missed!!")}return m;case"":_=" ";default:if(_<=" ")switch(d){case o:n.setTagName(e.slice(t,m)),d=p;break;case a:g=e.slice(t,m),d=s;break;case l:var y=e.slice(t,m).replace(/&#?\w+;/g,i);h.warning('attribute "'+y+'" missed quot(")!!'),n.add(g,y,t);case c:d=p}else switch(d){case s:n.tagName;"http://www.w3.org/1999/xhtml"===r[""]&&g.match(/^(?:disabled|checked|selected)$/i)||h.warning('attribute "'+g+'" missed value!! "'+g+'" instead2!!'),n.add(g,g,t),t=m,d=a;break;case c:h.warning('attribute space is required"'+g+'"!!');case p:d=a,t=m;break;case u:d=l,t=m;break;case f:throw new Error("elements closed character '/' and '>' must be connected to")}}m++}}function d(e,t,n){for(var r=e.tagName,i=null,o=e.length;o--;){var a=e[o],s=a.qName,u=a.value;if((f=s.indexOf(":"))>0)var l=a.prefix=s.slice(0,f),c=s.slice(f+1),p="xmlns"===l&&c;else c=s,l=null,p="xmlns"===s&&"";a.localName=c,!1!==p&&(null==i&&(i={},T(n,n={})),n[p]=i[p]=u,a.uri="http://www.w3.org/2000/xmlns/",t.startPrefixMapping(p,u))}for(o=e.length;o--;){(l=(a=e[o]).prefix)&&("xml"===l&&(a.uri="http://www.w3.org/XML/1998/namespace"),"xmlns"!==l&&(a.uri=n[l||""]))}var f;(f=r.indexOf(":"))>0?(l=e.prefix=r.slice(0,f),c=e.localName=r.slice(f+1)):(l=null,c=e.localName=r);var h=e.uri=n[l||""];if(t.startElement(h,c,r,e),!e.closed)return e.currentNSMap=n,e.localNSMap=i,!0;if(t.endElement(h,c,r),i)for(l in i)t.endPrefixMapping(l)}function _(e,t,n,r,i){if(/^(?:script|textarea)$/i.test(n)){var o=e.indexOf("</"+n+">",t),a=e.substring(t+1,o);if(/[&<]/.test(a))return/^script$/i.test(n)?(i.characters(a,0,a.length),o):(a=a.replace(/&#?\w+;/g,r),i.characters(a,0,a.length),o)}return t+1}function y(e,t,n,r){var i=r[n];return null==i&&((i=e.lastIndexOf("</"+n+">"))<t&&(i=e.lastIndexOf("</"+n)),r[n]=i),i<t}function T(e,t){for(var n in e)t[n]=e[n]}function E(e,t,n,r){switch(e.charAt(t+2)){case"-":return"-"===e.charAt(t+3)?(i=e.indexOf("--\x3e",t+4))>t?(n.comment(e,t+4,i-t-4),i+3):(r.error("Unclosed comment"),-1):-1;default:if("CDATA["==e.substr(t+3,6)){var i=e.indexOf("]]>",t+9);return n.startCDATA(),n.characters(e,t+9,i-t-9),n.endCDATA(),i+3}var o=function(e,t){var n,r=[],i=/'[^']+'|"[^"]+"|[^\s<>\/=]+=?|(\/?\s*>|<)/g;i.lastIndex=t,i.exec(e);for(;n=i.exec(e);)if(r.push(n),n[1])return r}(e,t),a=o.length;if(a>1&&/!doctype/i.test(o[0][0])){var s=o[1][0],u=a>3&&/^public$/i.test(o[2][0])&&o[3][0],l=a>4&&o[4][0],c=o[a-1];return n.startDTD(s,u&&u.replace(/^(['"])(.*?)\1$/,"$2"),l&&l.replace(/^(['"])(.*?)\1$/,"$2")),n.endDTD(),c.index+c[0].length}}return-1}function v(e,t,n){var r=e.indexOf("?>",t);if(r){var i=e.substring(t,r).match(/^<\?(\S*)\s*([\s\S]*?)\s*$/);if(i){i[0].length;return n.processingInstruction(i[1],i[2]),r+2}return-1}return-1}function N(e){}function b(e,t){return e.__proto__=t,e}h.prototype={parse:function(e,t,n){var r=this.domBuilder;r.startDocument(),T(t,t={}),function(e,t,n,r,i){function o(e){var t=e.slice(1,-1);return t in n?n[t]:"#"===t.charAt(0)?function(e){if(e>65535){var t=55296+((e-=65536)>>10),n=56320+(1023&e);return String.fromCharCode(t,n)}return String.fromCharCode(e)}(parseInt(t.substr(1).replace("x","0x"))):(i.error("entity not found:"+e),e)}function a(t){if(t>T){var n=e.substring(T,t).replace(/&#?\w+;/g,o);p&&s(T),r.characters(n,0,t-T),T=t}}function s(t,n){for(;t>=l&&(n=c.exec(e));)u=n.index,l=u+n[0].length,p.lineNumber++;p.columnNumber=t-u+1}var u=0,l=0,c=/.*(?:\r\n?|\n)|.*$/g,p=r.locator,f=[{currentNSMap:t}],h={},T=0;for(;;){try{var b=e.indexOf("<",T);if(b<0){if(!e.substr(T).match(/^\s*$/)){var w=r.doc,A=w.createTextNode(e.substr(T));w.appendChild(A),r.currentElement=A}return}switch(b>T&&a(b),e.charAt(b+1)){case"/":var M=e.indexOf(">",b+3),C=e.substring(b+2,M),O=f.pop();M<0?(C=e.substring(b+2).replace(/[\s<].*/,""),i.error("end tag name: "+C+" is not complete:"+O.tagName),M=b+1+C.length):C.match(/\s</)&&(C=C.replace(/[\s<].*/,""),i.error("end tag name: "+C+" maybe not complete"),M=b+1+C.length);var S=O.localNSMap,x=O.tagName==C,P=x||O.tagName&&O.tagName.toLowerCase()==C.toLowerCase();if(P){if(r.endElement(O.uri,O.localName,C),S)for(var U in S)r.endPrefixMapping(U);x||i.fatalError("end tag name: "+C+" is not match the current start tagName:"+O.tagName)}else f.push(O);M++;break;case"?":p&&s(b),M=v(e,b,r);break;case"!":p&&s(b),M=E(e,b,r,i);break;default:p&&s(b);var D=new N,I=f[f.length-1].currentNSMap,M=m(e,b,D,I,o,i),R=D.length;if(!D.closed&&y(e,M,D.tagName,h)&&(D.closed=!0,n.nbsp||i.warning("unclosed xml attribute")),p&&R){for(var F=g(p,{}),L=0;L<R;L++){var X=D[L];s(X.offset),X.locator=g(p,{})}r.locator=F,d(D,r,I)&&f.push(D),r.locator=p}else d(D,r,I)&&f.push(D);"http://www.w3.org/1999/xhtml"!==D.uri||D.closed?M++:M=_(e,M,D.tagName,o,r)}}catch(e){i.error("element parse error: "+e),M=-1}M>T?T=M:a(Math.max(b,T)+1)}}(e,t,n,r,this.errorHandler),r.endDocument()}},N.prototype={setTagName:function(e){if(!i.test(e))throw new Error("invalid tagName:"+e);this.tagName=e},add:function(e,t,n){if(!i.test(e))throw new Error("invalid attribute:"+e);this[this.length++]={qName:e,value:t,offset:n}},length:0,getLocalName:function(e){return this[e].localName},getLocator:function(e){return this[e].locator},getQName:function(e){return this[e].qName},getURI:function(e){return this[e].uri},getValue:function(e){return this[e].value}},b({},b.prototype)instanceof b||(b=function(e,t){function n(){}for(t in n.prototype=t,n=new n,e)n[t]=e[t];return n}),t.XMLReader=h},function(e,t){"function"==typeof Object.create?e.exports=function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:e.exports=function(e,t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}},function(e,t){e.exports=function(e){return e&&"object"==typeof e&&"function"==typeof e.copy&&"function"==typeof e.fill&&"function"==typeof e.readUInt8}},function(e,t){var n,r,i=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var u,l=[],c=!1,p=-1;function f(){c&&u&&(c=!1,u.length?l=u.concat(l):p=-1,l.length&&h())}function h(){if(!c){var e=s(f);c=!0;for(var t=l.length;t;){for(u=l,l=[];++p<t;)u&&u[p].run();p=-1,t=l.length}u=null,c=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function g(e,t){this.fun=e,this.array=t}function m(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];l.push(new g(e,t)),1!==l.length||c||s(h)},g.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=m,i.addListener=m,i.once=m,i.off=m,i.removeListener=m,i.removeAllListeners=m,i.emit=m,i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),a=n(3),s=n(2),u=n(33),l=function(e){function t(t,n,r){var i=e.call(this)||this;return i._warnings=[],i._numberOfTransUnitsWithMissingId=0,i.initializeFromContent(t,n,r),i}return i(t,e),t.prototype.initializeFromContent=function(e,t,n){this.parseContent(e,t,n);var r=this._parsedDocument.getElementsByTagName("xliff");if(1!==r.length)throw new Error(o.format('File "%s" seems to be no xliff file (should contain an xliff element)',t));var i=r.item(0).getAttribute("version");if("1.2"!==i)throw new Error(o.format('File "%s" seems to be no xliff 1.2 file, version should be %s, found %s',t,"1.2",i));return this},t.prototype.i18nFormat=function(){return a.FORMAT_XLIFF12},t.prototype.fileType=function(){return a.FILETYPE_XLIFF12},t.prototype.elementsWithMixedContent=function(){return["source","target","tool","seg-source","g","ph","bpt","ept","it","sub","mrk"]},t.prototype.initializeTransUnits=function(){this.transUnits=[];for(var e=this._parsedDocument.getElementsByTagName("trans-unit"),t=0;t<e.length;t++){var n=e.item(t),r=n.getAttribute("id");r||this._warnings.push(o.format('oops, trans-unit without "id" found in master, please check file %s',this._filename)),this.transUnits.push(new u.XliffTransUnit(n,r,this))}},t.prototype.sourceLanguage=function(){var e=s.DOMUtilities.getFirstElementByTagName(this._parsedDocument,"file");return e?e.getAttribute("source-language"):null},t.prototype.setSourceLanguage=function(e){var t=s.DOMUtilities.getFirstElementByTagName(this._parsedDocument,"file");t&&t.setAttribute("source-language",e)},t.prototype.targetLanguage=function(){var e=s.DOMUtilities.getFirstElementByTagName(this._parsedDocument,"file");return e?e.getAttribute("target-language"):null},t.prototype.setTargetLanguage=function(e){var t=s.DOMUtilities.getFirstElementByTagName(this._parsedDocument,"file");t&&t.setAttribute("target-language",e)},t.prototype.importNewTransUnit=function(e,t,n,r){if(this.transUnitWithId(e.id))throw new Error(o.format("tu with id %s already exists in file, cannot import it",e.id));var i=e.cloneWithSourceAsTarget(t,n,this),a=s.DOMUtilities.getFirstElementByTagName(this._parsedDocument,"body");if(!a)throw new Error(o.format('File "%s" seems to be no xliff 1.2 file (should contain a body element)',this._filename));var u=!1,l=!1;r&&(this.transUnitWithId(r.id)&&(l=!0));if(void 0===r||r&&!l)a.appendChild(i.asXmlElement()),u=!0;else if(null===r){var c=s.DOMUtilities.getFirstElementByTagName(this._parsedDocument,"trans-unit");c?(s.DOMUtilities.insertBefore(i.asXmlElement(),c),u=!0):(a.appendChild(i.asXmlElement()),u=!0)}else{var p=s.DOMUtilities.getElementByTagNameAndId(this._parsedDocument,"trans-unit",r.id);p&&(s.DOMUtilities.insertAfter(i.asXmlElement(),p),u=!0)}return u?(this.lazyInitializeTransUnits(),this.transUnits.push(i),this.countNumbers(),i):null},t.prototype.createTranslationFileForLang=function(e,n,r,i){var o=new t(this.editedContent(),n,this.encoding());return o.setNewTransUnitTargetPraefix(this.targetPraefix),o.setNewTransUnitTargetSuffix(this.targetSuffix),o.setTargetLanguage(e),o.forEachTransUnit(function(e){e.useSourceAsTarget(r,i)}),o},t}(n(4).AbstractTranslationMessagesFile);t.XliffFile=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(39),i=n(12),o=n(0),a=n(18),s=n(7),u=n(10),l=function(){function e(){}return e.fromFileContent=function(e,t,n,l,c){if(e===s.FORMAT_XLIFF12)return new r.XliffFile(t,n,l);if(e===s.FORMAT_XLIFF20)return new a.Xliff2File(t,n,l);if(e===s.FORMAT_XMB)return new i.XmbFile(t,n,l);if(e===s.FORMAT_XTB)return new u.XtbFile(t,n,l,c);throw new Error(o.format('oops, unsupported format "%s"',e))},e.fromUnknownFormatFileContent=function(t,n,r,i){var a=[s.FORMAT_XLIFF12,s.FORMAT_XLIFF20,s.FORMAT_XMB,s.FORMAT_XTB];n&&n.endsWith("xmb")&&(a=[s.FORMAT_XMB,s.FORMAT_XTB,s.FORMAT_XLIFF12,s.FORMAT_XLIFF20]),n&&n.endsWith("xtb")&&(a=[s.FORMAT_XTB,s.FORMAT_XMB,s.FORMAT_XLIFF12,s.FORMAT_XLIFF20]);for(var u=0;u<a.length;u++){var l=a[u];try{var c=e.fromFileContent(l,t,n,r,i);if(c)return c}catch(e){}}throw new Error(o.format("could not identify file format, it is neiter XLIFF (1.2 or 2.0) nor XMB/XTB"))},e}();t.TranslationMessagesFileFactory=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}(n(3))}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,