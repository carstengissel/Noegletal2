"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var xmb_message_parser_1 = require("./xmb-message-parser");
/**
 * Created by martin on 17.05.2017.
 * Testcases for parsing normalized messages to XMB format and vive versa.
 */
describe('message parse XMB test spec', function () {
    /**
     * Helperfunction to create a parsed message from normalized string.
     * @param normalizedString
     * @param sourceMessage
     * @return {ParsedMessage}
     */
    function parsedMessageFor(normalizedString, sourceMessage) {
        var parser = new xmb_message_parser_1.XmbMessageParser();
        return parser.parseNormalizedString(normalizedString, sourceMessage);
    }
    /**
     * Helperfunction to create a parsed message from native xml.
     * @param xmlContent
     * @param sourceMessage
     * @return {ParsedMessage}
     */
    function parsedMessageFromXML(xmlContent, sourceMessage) {
        var parser = new xmb_message_parser_1.XmbMessageParser();
        return parser.createNormalizedMessageFromXMLString(xmlContent, sourceMessage);
    }
    /**
     * create normalized message from string, then create one from generated xml.
     * Check that it is the same.
     * @param normalizedMessage
     */
    function checkToXmlAndBack(normalizedMessage) {
        var xml = parsedMessageFor(normalizedMessage).asNativeString();
        expect(parsedMessageFromXML('<msg>' + xml + '</msg>').asDisplayString()).toBe(normalizedMessage);
    }
    describe('normalized message to xml', function () {
        it('should parse plain text', function () {
            var normalizedMessage = 'a text without anything special';
            var parsedMessage = parsedMessageFor(normalizedMessage);
            expect(parsedMessage.asDisplayString()).toBe(normalizedMessage);
            expect(parsedMessage.asNativeString()).toBe(normalizedMessage);
        });
        it('should parse text with placeholder', function () {
            var normalizedMessage = 'a placeholder: {{0}}';
            var parsedMessage = parsedMessageFor(normalizedMessage);
            expect(parsedMessage.asDisplayString()).toBe(normalizedMessage);
            expect(parsedMessage.asNativeString()).toBe('a placeholder: <ph name="INTERPOLATION"><ex>INTERPOLATION</ex></ph>');
            checkToXmlAndBack(normalizedMessage);
        });
        it('should parse text with 2 placeholders', function () {
            var normalizedMessage = '{{1}}: a placeholder: {{0}}';
            var parsedMessage = parsedMessageFor(normalizedMessage);
            expect(parsedMessage.asDisplayString()).toBe(normalizedMessage);
            expect(parsedMessage.asNativeString()).toBe('<ph name="INTERPOLATION_1"><ex>INTERPOLATION_1</ex></ph>: a placeholder: <ph name="INTERPOLATION"><ex>INTERPOLATION</ex></ph>');
            checkToXmlAndBack(normalizedMessage);
        });
        it('should parse simple bold tag', function () {
            var normalizedMessage = 'a text <b>with</b> a bold text';
            var parsedMessage = parsedMessageFor(normalizedMessage);
            expect(parsedMessage.asDisplayString()).toBe(normalizedMessage);
            expect(parsedMessage.asNativeString()).toBe('a text <ph name="START_BOLD_TEXT"><ex>&lt;b></ex></ph>with<ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b></ex></ph> a bold text');
            checkToXmlAndBack(normalizedMessage);
        });
        it('should parse simple italic tag', function () {
            var normalizedMessage = 'a text <i>with</i> emphasis';
            var parsedMessage = parsedMessageFor(normalizedMessage);
            expect(parsedMessage.asDisplayString()).toBe(normalizedMessage);
            expect(parsedMessage.asNativeString()).toBe('a text <ph name="START_ITALIC_TEXT"><ex>&lt;i></ex></ph>with<ph name="CLOSE_ITALIC_TEXT"><ex>&lt;/i></ex></ph> emphasis');
            checkToXmlAndBack(normalizedMessage);
        });
        it('should parse unknown tag', function () {
            var normalizedMessage = 'a text with <strange>strange emphasis</strange>';
            var parsedMessage = parsedMessageFor(normalizedMessage);
            expect(parsedMessage.asDisplayString()).toBe(normalizedMessage);
            expect(parsedMessage.asNativeString()).toBe('a text with <ph name="START_TAG_STRANGE"><ex>&lt;strange></ex></ph>strange emphasis<ph name="CLOSE_TAG_STRANGE"><ex>&lt;/strange></ex></ph>');
            checkToXmlAndBack(normalizedMessage);
        });
        it('should parse embedded tags with placeholder inside', function () {
            var normalizedMessage = '<b><i><strange>Placeholder {{0}}</strange></i></b>';
            var parsedMessage = parsedMessageFor(normalizedMessage);
            expect(parsedMessage.asDisplayString()).toBe(normalizedMessage);
            expect(parsedMessage.asNativeString()).toBe('<ph name="START_BOLD_TEXT"><ex>&lt;b></ex></ph><ph name="START_ITALIC_TEXT"><ex>&lt;i></ex></ph><ph name="START_TAG_STRANGE"><ex>&lt;strange></ex></ph>Placeholder <ph name="INTERPOLATION"><ex>INTERPOLATION</ex></ph><ph name="CLOSE_TAG_STRANGE"><ex>&lt;/strange></ex></ph><ph name="CLOSE_ITALIC_TEXT"><ex>&lt;/i></ex></ph><ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b></ex></ph>');
            checkToXmlAndBack(normalizedMessage);
        });
        it('should parse ICU Refs', function () {
            var normalizedMessage = 'a text with <ICU-Message-Ref_0/>';
            var parsedMessage = parsedMessageFor(normalizedMessage);
            expect(parsedMessage.asDisplayString()).toBe(normalizedMessage);
            expect(parsedMessage.asNativeString()).toBe('a text with <ph name="ICU"><ex>ICU</ex></ph>');
            checkToXmlAndBack(normalizedMessage);
        });
    });
    describe('xml to normalized message', function () {
        it('should parse simple text content', function () {
            var parsedMessage = parsedMessageFromXML('a simple content');
            expect(parsedMessage.asDisplayString()).toBe('a simple content');
        });
        it('should parse strange tag with placeholder content', function () {
            var parsedMessage = parsedMessageFromXML('Diese Nachricht ist <ph name="START_TAG_STRANGE"><ex>&lt;strange></ex></ph><ph name="INTERPOLATION"><ex>INTERPOLATION</ex></ph><ph name="CLOSE_TAG_STRANGE"><ex>&lt;/strange></ex></ph>');
            expect(parsedMessage.asDisplayString()).toBe('Diese Nachricht ist <strange>{{0}}</strange>');
        });
        it('should parse embedded tags', function () {
            var parsedMessage = parsedMessageFromXML('Diese Nachricht ist <ph name="START_BOLD_TEXT"><ex>&lt;b></ex></ph><ph name="START_TAG_STRANGE"><ex>&lt;strange></ex></ph>SEHR WICHTIG<ph name="CLOSE_TAG_STRANGE"><ex>&lt;/strange></ex></ph><ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b></ex></ph>');
            expect(parsedMessage.asDisplayString()).toBe('Diese Nachricht ist <b><strange>SEHR WICHTIG</strange></b>');
        });
        it('should parse complex message with embedded placeholder', function () {
            var parsedMessage = parsedMessageFromXML('<ph name="START_LINK"><ex>&lt;a></ex></ph>link1 with placeholder <ph name="INTERPOLATION"><ex>INTERPOLATION</ex></ph><ph name="CLOSE_LINK"><ex>&lt;/a></ex></ph>');
            expect(parsedMessage.asDisplayString()).toBe('<a>link1 with placeholder {{0}}</a>');
        });
        it('should throw an error due to not well formed elements <b><strange></b>', function () {
            try {
                var parsedMessage = parsedMessageFromXML('Diese Nachricht ist falsch geschachtelt: <ph name="START_BOLD_TEXT"><ex>&lt;b></ex></ph><ph name="START_TAG_STRANGE"><ex>&lt;strange></ex></ph>FALSCH<x id="CLOSE_BOLD_TEXT" ctype="x-b"/></ph><ph name="CLOSE_BOLD_TEXT"><ex>&lt;/b></ex></ph>');
                expect('parsedMessage').toBe('should throw an error');
            }
            catch (e) {
                expect(e.message).toContain('unexpected close tag b');
            }
        });
        it('should parse message with embedded ICU message reference', function () {
            var parsedMessage = parsedMessageFromXML('first: <ph name="ICU"><ex>ICU</ex></ph>');
            expect(parsedMessage.asDisplayString()).toBe('first: <ICU-Message-Ref_0/>');
        });
        it('should parse message with 2 embedded ICU message reference', function () {
            var parsedMessage = parsedMessageFromXML('first: <ph name="ICU"><ex>ICU</ex></ph>, second <ph name="ICU_1"><ex>ICU</ex></ph>');
            expect(parsedMessage.asDisplayString()).toBe('first: <ICU-Message-Ref_0/>, second <ICU-Message-Ref_1/>');
        });
        it('should parse empty tag like <br>', function () {
            var normalizedMessage = 'one line<br>second line';
            var parsedMessage = parsedMessageFor(normalizedMessage);
            expect(parsedMessage.asDisplayString()).toBe(normalizedMessage);
            expect(parsedMessage.asNativeString()).toBe('one line<ph name="LINE_BREAK"><ex>&lt;br></ex></ph>second line');
            checkToXmlAndBack(normalizedMessage);
        });
    });
});
//# sourceMappingURL=S:/experimente/ngx-i18nsupport-lib/src/impl/xmb-message-parser.spec.js.map