"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var common_1 = require("@angular/common");
var Subject_1 = require("rxjs/Subject");
var BehaviorSubject_1 = require("rxjs/BehaviorSubject");
require("rxjs/add/operator/combineLatest");
require("rxjs/add/operator/takeUntil");
var document_token_1 = require("./document.token");
var LayoutService = /** @class */ (function () {
    function LayoutService(injector, zone) {
        var _this = this;
        this.injector = injector;
        this.headerHeight = new BehaviorSubject_1.BehaviorSubject(0);
        this.footerHeight = new BehaviorSubject_1.BehaviorSubject(0);
        this.sidebarStretch = new BehaviorSubject_1.BehaviorSubject(false);
        this.sidebarWidth = new BehaviorSubject_1.BehaviorSubject(0);
        var mediaQuery = this.deviceMediaQuery();
        this.sidebarOpen = new BehaviorSubject_1.BehaviorSubject(!mediaQuery.matches);
        mediaQuery.addListener(function (_a) {
            var matches = _a.matches;
            zone.run(function () {
                _this.sidebarOpen.next(!matches);
            });
        });
    }
    LayoutService.prototype.toggleSidebar = function () {
        var open = this.sidebarOpen.getValue();
        this.sidebarOpen.next(!open);
    };
    LayoutService.prototype.deviceMediaQuery = function () {
        var defaultView = this.injector.get(document_token_1.DOCUMENT_TOKEN, document).defaultView;
        if (defaultView.matchMedia) {
            var mediaQuery = defaultView.matchMedia('(max-width: 768px)');
            return mediaQuery;
        }
        else {
            return {
                addListener: function (callback) { },
                get matches() {
                    return defaultView.innerWidth > 768;
                }
            };
        }
    };
    LayoutService.decorators = [
        { type: core_1.Injectable },
    ];
    /** @nocollapse */
    LayoutService.ctorParameters = function () { return [
        { type: core_1.Injector, },
        { type: core_1.NgZone, },
    ]; };
    return LayoutService;
}());
exports.LayoutService = LayoutService;
var OffsetBySidebarDirective = /** @class */ (function () {
    function OffsetBySidebarDirective(layoutService) {
        var _this = this;
        this.force = false;
        this.ngUnsubscribe = new Subject_1.Subject();
        layoutService.sidebarOpen
            .combineLatest(layoutService.sidebarStretch, layoutService.sidebarWidth)
            .takeUntil(this.ngUnsubscribe)
            .subscribe(function (value) {
            var sidebarOpen = value[0], sidebarStretch = value[1], sidebarWidth = value[2];
            _this.sidebarOpen = sidebarOpen;
            _this.sidebarStretch = sidebarStretch;
            _this.sidebarWidth = sidebarWidth;
            if (_this.sidebarOpen && (_this.sidebarStretch || _this.force)) {
                _this.marginLeft = _this.sidebarWidth;
            }
            else {
                _this.marginLeft = 0;
            }
        });
    }
    OffsetBySidebarDirective.prototype.ngOnDestroy = function () {
        this.ngUnsubscribe.next();
        this.ngUnsubscribe.complete();
    };
    OffsetBySidebarDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[rz-offset-by-sidebar]'
                },] },
    ];
    /** @nocollapse */
    OffsetBySidebarDirective.ctorParameters = function () { return [
        { type: LayoutService, },
    ]; };
    OffsetBySidebarDirective.propDecorators = {
        "force": [{ type: core_1.Input, args: ['rz-offset-by-sidebar',] },],
        "marginLeft": [{ type: core_1.HostBinding, args: ['style.marginLeft.px',] },],
    };
    return OffsetBySidebarDirective;
}());
exports.OffsetBySidebarDirective = OffsetBySidebarDirective;
var LayoutModule = /** @class */ (function () {
    function LayoutModule() {
    }
    LayoutModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [common_1.CommonModule],
                    declarations: [OffsetBySidebarDirective],
                    providers: [LayoutService],
                    exports: [OffsetBySidebarDirective]
                },] },
    ];
    /** @nocollapse */
    LayoutModule.ctorParameters = function () { return []; };
    return LayoutModule;
}());
exports.LayoutModule = LayoutModule;
