"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var common_1 = require("@angular/common");
var forms_1 = require("@angular/forms");
var autocomplete_1 = require("primeng/autocomplete");
var get = require("lodash/get");
var set = require("lodash/set");
var form_component_1 = require("./form-component");
var AutoCompleteComponent = /** @class */ (function (_super) {
    __extends(AutoCompleteComponent, _super);
    function AutoCompleteComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.style = {};
        _this.search = new core_1.EventEmitter();
        _this.select = new core_1.EventEmitter();
        return _this;
    }
    Object.defineProperty(AutoCompleteComponent.prototype, "value", {
        get: function () {
            return this.innerValue;
        },
        set: function (value) {
            var _this = this;
            if (value != this.innerValue) {
                this.innerValue = value;
                this.onChange(value);
                if (this.textProperty && this.data) {
                    var item = this.data.find(function (item) { return get(item, _this.textProperty) == value; });
                    if (!item) {
                        item = {};
                        set(item, this.textProperty, value);
                    }
                    this.change.next(item);
                }
                else {
                    this.change.next(value);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    AutoCompleteComponent.prototype.onSearch = function (event) {
        this.search.next(new AutoCompleteLoadData(event.query, this));
    };
    AutoCompleteComponent.prototype.onSelect = function (event) {
        this.select.next(event);
    };
    AutoCompleteComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'rz-autocomplete',
                    template: "\n  <p-autoComplete\n    appendTo=\"body\"\n    [(ngModel)]=\"value\"\n    [style]=\"style\"\n    [placeholder]=\"placeholder\"\n    [field]=\"textProperty\"\n    [inputId]=\"name\"\n    [suggestions]=\"data\"\n    [disabled]=\"disabled\"\n    (blur)=\"onTouched()\"\n    (onSelect)=\"onSelect($event)\"\n    (completeMethod)=\"onSearch($event)\">\n  </p-autoComplete>\n  ",
                    providers: [
                        {
                            provide: forms_1.NG_VALUE_ACCESSOR,
                            useExisting: core_1.forwardRef(function () { return AutoCompleteComponent; }),
                            multi: true
                        },
                        {
                            provide: form_component_1.FormComponent,
                            useExisting: core_1.forwardRef(function () { return AutoCompleteComponent; })
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    AutoCompleteComponent.ctorParameters = function () { return []; };
    AutoCompleteComponent.propDecorators = {
        "style": [{ type: core_1.Input },],
        "placeholder": [{ type: core_1.Input },],
        "textProperty": [{ type: core_1.Input },],
        "search": [{ type: core_1.Output },],
        "select": [{ type: core_1.Output },],
        "value": [{ type: core_1.Input },],
    };
    return AutoCompleteComponent;
}(form_component_1.FormComponent));
exports.AutoCompleteComponent = AutoCompleteComponent;
var AutoCompleteLoadData = /** @class */ (function () {
    function AutoCompleteLoadData(text, autoComplete) {
        this.text = text;
        this.autoComplete = autoComplete;
    }
    Object.defineProperty(AutoCompleteLoadData.prototype, "data", {
        get: function () {
            return this.autoComplete.data;
        },
        set: function (value) {
            this.autoComplete.data = value;
        },
        enumerable: true,
        configurable: true
    });
    return AutoCompleteLoadData;
}());
var AutoCompleteModule = /** @class */ (function () {
    function AutoCompleteModule() {
    }
    AutoCompleteModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [common_1.CommonModule, forms_1.FormsModule, autocomplete_1.AutoCompleteModule],
                    declarations: [AutoCompleteComponent],
                    exports: [AutoCompleteComponent]
                },] },
    ];
    /** @nocollapse */
    AutoCompleteModule.ctorParameters = function () { return []; };
    return AutoCompleteModule;
}());
exports.AutoCompleteModule = AutoCompleteModule;
