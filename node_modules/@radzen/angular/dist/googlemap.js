"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var common_1 = require("@angular/common");
var document_token_1 = require("./document.token");
var GoogleMapMarker = /** @class */ (function () {
    function GoogleMapMarker(zone, differs) {
        this.zone = zone;
        this.differs = differs;
        this.position = { lat: 0, lng: 0 };
        this.click = new core_1.EventEmitter();
    }
    Object.defineProperty(GoogleMapMarker.prototype, "map", {
        get: function () {
            return this._map;
        },
        set: function (value) {
            this._map = value;
            this.createMarker();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoogleMapMarker.prototype, "google", {
        get: function () {
            return this._google;
        },
        set: function (value) {
            this._google = value;
            this.createMarker();
        },
        enumerable: true,
        configurable: true
    });
    GoogleMapMarker.prototype.ngOnChanges = function (changes) {
        if (this.marker) {
            if (changes.hasOwnProperty('position')) {
                this.marker.setPosition(this.position);
            }
            if (changes.hasOwnProperty('title')) {
                this.marker.setTitle(this.title);
            }
            if (changes.hasOwnProperty('label')) {
                this.marker.setLabel(this.label);
            }
        }
    };
    GoogleMapMarker.prototype.ngOnDestroy = function () {
        if (this.marker) {
            this.google.maps.event.clearInstanceListeners(this.marker);
            this.marker.setMap(null);
        }
    };
    GoogleMapMarker.prototype.ngDoCheck = function () {
        if (this.position && !this.differ) {
            this.differ = this.differs.find(this.position).create();
        }
        if (this.differ) {
            var changes = this.differ.diff(this.position);
            if (changes && this.marker) {
                this.marker.setPosition(this.position);
            }
        }
    };
    GoogleMapMarker.prototype.createMarker = function () {
        var _this = this;
        if (!this.marker && this.map && this.google) {
            this.marker = new this.google.maps.Marker({
                position: this.position,
                title: this.title,
                label: this.label
            });
            this.marker.addListener('click', function (event) {
                _this.zone.run(function () { return _this.click.next(); });
            });
            this.marker.setMap(this.map);
        }
    };
    GoogleMapMarker.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'rz-googlemap-marker',
                    template: ""
                },] },
    ];
    /** @nocollapse */
    GoogleMapMarker.ctorParameters = function () { return [
        { type: core_1.NgZone, },
        { type: core_1.KeyValueDiffers, },
    ]; };
    GoogleMapMarker.propDecorators = {
        "position": [{ type: core_1.Input },],
        "title": [{ type: core_1.Input },],
        "label": [{ type: core_1.Input },],
        "map": [{ type: core_1.Input },],
        "google": [{ type: core_1.Input },],
        "click": [{ type: core_1.Output },],
    };
    return GoogleMapMarker;
}());
exports.GoogleMapMarker = GoogleMapMarker;
var GoogleMapComponent = /** @class */ (function () {
    function GoogleMapComponent(injector, zone, differs) {
        this.injector = injector;
        this.zone = zone;
        this.differs = differs;
        this.style = {};
        this.center = { lat: 0, lng: 0 };
        this.mapClick = new core_1.EventEmitter();
        this.markerClick = new core_1.EventEmitter();
        this._zoom = 8;
    }
    Object.defineProperty(GoogleMapComponent.prototype, "zoom", {
        get: function () {
            return this._zoom;
        },
        set: function (value) {
            this._zoom = value;
            if (this.instance) {
                this.instance.setZoom(value);
            }
        },
        enumerable: true,
        configurable: true
    });
    GoogleMapComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.api().then(function (google) {
            _this.google = google;
            _this.instance = new google.maps.Map(_this.wrapper.nativeElement, {
                center: _this.center,
                zoom: _this.zoom
            });
            _this.instance.addListener('click', function (event) { });
            _this.instance.addListener('click', function (event) {
                _this.zone.run(function () {
                    _this.mapClick.next({
                        position: {
                            lat: event.latLng.lat(),
                            lng: event.latLng.lng()
                        }
                    });
                });
            });
            _this.markerChildren.forEach(function (marker) {
                marker.google = google;
                marker.map = _this.instance;
                marker.click.subscribe(function () { return _this.onMarkerClick(marker); });
            });
        });
    };
    GoogleMapComponent.prototype.ngDoCheck = function () {
        if (this.center && !this.differ) {
            this.differ = this.differs.find(this.center).create();
        }
        if (this.differ) {
            var changes = this.differ.diff(this.center);
            if (changes && this.instance) {
                this.instance.setCenter(this.center);
            }
        }
    };
    GoogleMapComponent.prototype.onMarkerClick = function (marker) {
        this.markerClick.next({ marker: marker });
    };
    GoogleMapComponent.prototype.api = function () {
        var _this = this;
        var defaultView = this.injector.get(document_token_1.DOCUMENT_TOKEN, document).defaultView;
        return new Promise(function (resolve, reject) {
            if (defaultView.google && defaultView.google.maps) {
                return resolve(defaultView.google);
            }
            loadGoogleMaps(defaultView, _this.apiKey, resolve, reject);
        });
    };
    GoogleMapComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'rz-googlemap',
                    template: "\n  <div [ngStyle]=\"style\" class=\"ui-map\">\n    <div class=\"ui-map-container\" #wrapper></div>\n    <rz-googlemap-marker *ngFor=\"let marker of markers\" [google]=\"google\" (click)=\"onMarkerClick(marker)\" [map]=\"instance\" [position]=\"marker.position\" [title]=\"marker.title\" [label]=\"marker.label\">\n    </rz-googlemap-marker>\n    <ng-content>\n    </ng-content>\n  </div>"
                },] },
    ];
    /** @nocollapse */
    GoogleMapComponent.ctorParameters = function () { return [
        { type: core_1.Injector, },
        { type: core_1.NgZone, },
        { type: core_1.KeyValueDiffers, },
    ]; };
    GoogleMapComponent.propDecorators = {
        "style": [{ type: core_1.Input },],
        "apiKey": [{ type: core_1.Input },],
        "markers": [{ type: core_1.Input },],
        "center": [{ type: core_1.Input },],
        "zoom": [{ type: core_1.Input },],
        "mapClick": [{ type: core_1.Output },],
        "markerClick": [{ type: core_1.Output },],
        "markerChildren": [{ type: core_1.ContentChildren, args: [GoogleMapMarker,] },],
        "wrapper": [{ type: core_1.ViewChild, args: ['wrapper',] },],
    };
    return GoogleMapComponent;
}());
exports.GoogleMapComponent = GoogleMapComponent;
var resolveCallbacks = [];
var rejectCallbacks = [];
function loadGoogleMaps(defaultView, apiKey, resolve, reject) {
    resolveCallbacks.push(resolve);
    rejectCallbacks.push(reject);
    if (defaultView['rz_map_init']) {
        return;
    }
    defaultView['rz_map_init'] = function () {
        resolveCallbacks.forEach(function (resolve) { return resolve(defaultView.google); });
    };
    var document = defaultView.document;
    var script = document.createElement('script');
    script.src = "https://maps.googleapis.com/maps/api/js?" + (apiKey ? "key=" + apiKey + "&" : '') + "callback=rz_map_init";
    script.async = true;
    script.defer = true;
    script.onerror = function (err) {
        rejectCallbacks.forEach(function (reject) { return reject(err); });
    };
    document.body.appendChild(script);
}
var GoogleMapModule = /** @class */ (function () {
    function GoogleMapModule() {
    }
    GoogleMapModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [common_1.CommonModule],
                    declarations: [GoogleMapComponent, GoogleMapMarker],
                    exports: [GoogleMapComponent, GoogleMapMarker]
                },] },
    ];
    /** @nocollapse */
    GoogleMapModule.ctorParameters = function () { return []; };
    return GoogleMapModule;
}());
exports.GoogleMapModule = GoogleMapModule;
