import { ElementRef, AfterContentInit, ViewContainerRef, OnDestroy, QueryList, EventEmitter } from '@angular/core';
import { FormGroup, FormBuilder } from '@angular/forms';
import { Subscription } from 'rxjs/Subscription';
import { FormFieldComponent } from './form-field';
export declare class FormFieldDirective {
    private viewContainerRef;
    elementRef: ElementRef;
    constructor(viewContainerRef: ViewContainerRef);
}
export declare class FormComponent implements AfterContentInit, OnDestroy {
    private formBuilder;
    data: any;
    columns: number;
    repeat: 'horizontal' | 'vertical';
    buttonPosition: string;
    title: string;
    icon: string;
    titleBackground: string;
    titleColor: string;
    visible: boolean;
    allowDelete: boolean;
    updateDataOnChange: boolean;
    submitChangesOnly: boolean;
    submitText: string;
    deleteText: string;
    cancelText: string;
    style: any;
    submit: EventEmitter<any>;
    delete: EventEmitter<any>;
    cancel: EventEmitter<any>;
    change: EventEmitter<any>;
    loadData: EventEmitter<any>;
    fields: QueryList<FormFieldComponent>;
    form: FormGroup;
    submitted: boolean;
    subscription: Subscription;
    valueChangesSubscriptions: Subscription[];
    rows: any[];
    cols: number;
    private value;
    constructor(formBuilder: FormBuilder);
    ngAfterContentInit(): void;
    createForm(): void;
    private updateValue(control, property, value);
    ngOnDestroy(): void;
    private unsubscribe();
    changes(): {};
    onSubmit(event: Event): void;
    onChange(event: Event): void;
    onCancel(): void;
    onDelete(): void;
}
export declare class FormModule {
}
