"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var common_1 = require("@angular/common");
var forms_1 = require("@angular/forms");
var form_component_1 = require("./form-component");
var NumericComponent = /** @class */ (function (_super) {
    __extends(NumericComponent, _super);
    function NumericComponent(elementRef) {
        var _this = _super.call(this) || this;
        _this.elementRef = elementRef;
        _this.step = 1;
        _this.decimalSeparator = '.';
        _this.thousandSeparator = ',';
        _this.autofocus = false;
        _this.selectOnFocus = false;
        _this.autoComplete = true;
        _this.style = {};
        _this.readOnly = false;
        _this.placeholder = '';
        return _this;
    }
    NumericComponent.prototype.onFocus = function (event) {
        if (this.selectOnFocus) {
            setTimeout(function () {
                event.target.select();
            }, 50);
        }
    };
    NumericComponent.prototype.ngAfterViewInit = function () {
        _super.prototype.ngAfterViewInit.call(this);
        var input = this.elementRef.nativeElement.querySelector('input');
        if (input) {
            if (this.autofocus) {
                input.focus();
            }
        }
    };
    NumericComponent.prototype.setDisabledState = function (isDisabled) {
        this.disabled = isDisabled;
    };
    NumericComponent.prototype.onSpinUp = function (input, event) {
        this.spin(input, event, 1);
    };
    NumericComponent.prototype.onPaste = function (event) {
        var _a = event.clipboardData, clipboardData = _a === void 0 ? window.clipboardData : _a;
        if (clipboardData) {
            var value = clipboardData.getData('text');
            if (value && /^-?\d*\.?\d*$/.test(value)) {
                return;
            }
            event.preventDefault();
        }
    };
    NumericComponent.prototype.onSpinDown = function (input, event) {
        this.spin(input, event, -1);
    };
    NumericComponent.prototype.onKeyPress = function (event) {
        var metaKey = event.metaKey, ctrlKey = event.ctrlKey, charCode = event.charCode, keyCode = event.keyCode;
        if (metaKey || ctrlKey || keyCode == 9 || keyCode == 8 || keyCode == 13) {
            return;
        }
        var ch = String.fromCharCode(charCode);
        if (/^[-\d,.]$/.test(ch)) {
            return;
        }
        event.preventDefault();
    };
    NumericComponent.prototype.spin = function (input, event, direction) {
        event.preventDefault();
        if (this.readOnly || this.disabled) {
            return;
        }
        var numericValue = parseFloat(input.value);
        var min = typeof this.min == 'string' ? parseFloat(this.min) : this.min;
        var max = typeof this.max == 'string' ? parseFloat(this.max) : this.max;
        var inputValue = isNaN(numericValue) ? min || 0 : numericValue;
        var step = isNaN(numericValue) ? 0 : this.step * direction;
        var _a = this.step.toString().split(/[,.]/), whole = _a[0], _b = _a[1], fraction = _b === void 0 ? '' : _b;
        var precision = fraction.length;
        var value = inputValue + step;
        if (precision > 0) {
            value = parseFloat(value.toFixed(precision));
        }
        if (!isNaN(min)) {
            value = Math.max(min, value);
        }
        if (!isNaN(max)) {
            value = Math.min(max, value);
        }
        this.value = value;
    };
    NumericComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'rz-numeric',
                    template: "\n    <span class=\"ui-spinner ui-widget ui-corner-all\" [ngStyle]=\"style\" [ngClass]=\"{'ui-state-disabled':disabled}\">\n      <input #input\n        type=\"number\"\n        class=\"ui-spinner-input ui-inputtext ui-widget ui-state-default ui-corner-all\"\n        [readonly]=\"readOnly\"\n        [disabled]=\"disabled\"\n        [id]=\"name\"\n        [attr.min]=\"min\"\n        [attr.max]=\"max\"\n        [attr.step]=\"step\"\n        [placeholder]=\"placeholder\"\n        [attr.autofocus]=\"autofocus ? '' : null\"\n        [autocomplete]=\"autoComplete ? 'on' : 'off'\"\n        [(ngModel)]=\"value\"\n        (focus)=\"onFocus($event)\"\n        (blur)=\"onTouched()\"\n        (paste)=\"onPaste($event)\"\n        (keypress)=\"onKeyPress($event)\"\n        (change)=\"$event.stopPropagation()\">\n      <button (mousedown)=\"onSpinUp(input, $event)\" (click)=\"$event.preventDefault()\" tabindex=\"-1\" class=\"ui-spinner-button ui-spinner-up ui-corner-tr ui-button ui-widget ui-state-default\">\n        <span class=\"fa fa-caret-up ui-clickable\"></span>\n      </button>\n      <button (mousedown)=\"onSpinDown(input, $event)\" (click)=\"$event.preventDefault()\" tabindex=\"-1\" class=\"ui-spinner-button ui-spinner-down ui-corner-br ui-button ui-widget ui-state-default\">\n        <span class=\"fa fa-caret-down ui-clickable\"></span>\n      </button>\n    </span>\n  ",
                    providers: [
                        {
                            provide: forms_1.NG_VALUE_ACCESSOR,
                            useExisting: core_1.forwardRef(function () { return NumericComponent; }),
                            multi: true
                        },
                        {
                            provide: form_component_1.FormComponent,
                            useExisting: core_1.forwardRef(function () { return NumericComponent; })
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    NumericComponent.ctorParameters = function () { return [
        { type: core_1.ElementRef, },
    ]; };
    NumericComponent.propDecorators = {
        "step": [{ type: core_1.Input },],
        "min": [{ type: core_1.Input },],
        "max": [{ type: core_1.Input },],
        "decimalSeparator": [{ type: core_1.Input },],
        "thousandSeparator": [{ type: core_1.Input },],
        "autofocus": [{ type: core_1.Input },],
        "selectOnFocus": [{ type: core_1.Input },],
        "autoComplete": [{ type: core_1.Input },],
        "style": [{ type: core_1.Input },],
        "readOnly": [{ type: core_1.Input },],
        "placeholder": [{ type: core_1.Input },],
    };
    return NumericComponent;
}(form_component_1.FormComponent));
exports.NumericComponent = NumericComponent;
var NumericModule = /** @class */ (function () {
    function NumericModule() {
    }
    NumericModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [common_1.CommonModule, forms_1.FormsModule],
                    declarations: [NumericComponent],
                    exports: [NumericComponent]
                },] },
    ];
    /** @nocollapse */
    NumericModule.ctorParameters = function () { return []; };
    return NumericModule;
}());
exports.NumericModule = NumericModule;
