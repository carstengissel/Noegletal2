"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var common_1 = require("@angular/common");
var tree_1 = require("primeng/tree");
var get = require("lodash/get");
var TreeLevel = /** @class */ (function () {
    function TreeLevel() {
        this.leaf = false;
    }
    TreeLevel.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'rz-tree-level',
                    template: ''
                },] },
    ];
    /** @nocollapse */
    TreeLevel.ctorParameters = function () { return []; };
    TreeLevel.propDecorators = {
        "textProperty": [{ type: core_1.Input },],
        "leaf": [{ type: core_1.Input },],
        "template": [{ type: core_1.ContentChild, args: [core_1.TemplateRef,] },],
    };
    return TreeLevel;
}());
exports.TreeLevel = TreeLevel;
var TreeComponent = /** @class */ (function () {
    function TreeComponent() {
        this.style = {};
        this.data = [];
        this.nodeExpand = new core_1.EventEmitter();
        this.nodeSelect = new core_1.EventEmitter();
        this.nodeLoaded = new core_1.EventEmitter();
        this.results = [];
    }
    TreeComponent.prototype.ngAfterContentInit = function () {
        this.update();
    };
    TreeComponent.prototype.ngOnChanges = function (changes) {
        this.update();
    };
    TreeComponent.prototype.update = function () {
        var _this = this;
        if (this.data && this.levels && this.levels.length > 0) {
            var root_1 = this.levels.first;
            this.results = this.data.map(function (item) {
                var node = {
                    label: get(item, root_1.textProperty),
                    data: item,
                    type: "level-0",
                    children: [],
                    leaf: root_1.leaf
                };
                _this.nodeLoaded.next(new TreeNodeLoadedData(node, 0));
                return node;
            });
        }
    };
    TreeComponent.prototype.onNodeSelect = function (event) {
        if (event.node) {
            this.nodeSelect.next({
                data: event.node.data,
                level: geLevelIndex(event.node)
            });
        }
    };
    TreeComponent.prototype.onNodeExpand = function (event) {
        if (event.node) {
            var levelIndex = geLevelIndex(event.node);
            if (this.levels) {
                var level = levelIndex + 1 < this.levels.length
                    ? this.levels.toArray()[levelIndex + 1]
                    : this.levels.last;
                if (level) {
                    var textProperty = level.textProperty, leaf = level.leaf;
                    this.nodeExpand.next(new TreeLoadChildrenData(levelIndex, event.node, textProperty, leaf, this.nodeLoaded));
                }
            }
        }
    };
    TreeComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'rz-tree',
                    template: "<p-tree\n    [value]=\"results\"\n    selectionMode=\"single\"\n    [(selection)]=\"selectedNode\"\n    (onNodeSelect)=\"onNodeSelect($event)\"\n    (onNodeExpand)=\"onNodeExpand($event)\"\n    [style]=\"style\">\n    <ng-template *ngFor=\"let level of levels;let index = index\" let-node [pTemplate]=\"level.template ? 'level-' + index : 'none'\">\n      <ng-template [ngTemplateOutlet]=\"level.template\" [ngTemplateOutletContext]=\"{ $implicit: node.data }\">\n      </ng-template>\n    </ng-template>\n  </p-tree>"
                },] },
    ];
    /** @nocollapse */
    TreeComponent.ctorParameters = function () { return []; };
    TreeComponent.propDecorators = {
        "style": [{ type: core_1.Input },],
        "data": [{ type: core_1.Input },],
        "nodeExpand": [{ type: core_1.Output },],
        "nodeSelect": [{ type: core_1.Output },],
        "nodeLoaded": [{ type: core_1.Output },],
        "levels": [{ type: core_1.ContentChildren, args: [TreeLevel,] },],
    };
    return TreeComponent;
}());
exports.TreeComponent = TreeComponent;
var TreeNodeLoadedData = /** @class */ (function () {
    function TreeNodeLoadedData(node, level) {
        this.node = node;
        this.data = node.data;
        this.level = level;
    }
    Object.defineProperty(TreeNodeLoadedData.prototype, "leaf", {
        get: function () {
            return this.node.leaf;
        },
        set: function (value) {
            this.node.leaf = value;
        },
        enumerable: true,
        configurable: true
    });
    return TreeNodeLoadedData;
}());
var TreeLoadChildrenData = /** @class */ (function () {
    function TreeLoadChildrenData(level, node, textProperty, leaf, nodeLoaded) {
        this.level = level;
        this.data = node.data;
        this.textProperty = textProperty;
        this.node = node;
        this.leaf = leaf;
        this.nodeLoaded = nodeLoaded;
    }
    Object.defineProperty(TreeLoadChildrenData.prototype, "children", {
        get: function () {
            return this.node.children;
        },
        set: function (value) {
            var _this = this;
            if (value && value != this.node.children) {
                this.node.children = (Array.isArray(value)
                    ? value
                    : [value]).map(function (item) {
                    var node = {
                        label: get(item, _this.textProperty),
                        type: "level-" + (_this.level + 1),
                        data: item,
                        children: [],
                        leaf: _this.leaf
                    };
                    _this.nodeLoaded.next(new TreeNodeLoadedData(node, _this.level + 1));
                    return node;
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    return TreeLoadChildrenData;
}());
function geLevelIndex(node) {
    var i = 0;
    while (node && node.parent) {
        node = node.parent;
        i++;
    }
    return i;
}
var TreeModule = /** @class */ (function () {
    function TreeModule() {
    }
    TreeModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [common_1.CommonModule, tree_1.TreeModule],
                    declarations: [TreeComponent, TreeLevel],
                    exports: [TreeComponent, TreeLevel]
                },] },
    ];
    /** @nocollapse */
    TreeModule.ctorParameters = function () { return []; };
    return TreeModule;
}());
exports.TreeModule = TreeModule;
