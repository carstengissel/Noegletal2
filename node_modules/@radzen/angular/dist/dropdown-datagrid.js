"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var common_1 = require("@angular/common");
var forms_1 = require("@angular/forms");
var overlaypanel_1 = require("primeng/overlaypanel");
var datatable_1 = require("primeng/datatable");
var dropdown_1 = require("primeng/dropdown");
var get = require("lodash/get");
var button_1 = require("./button");
var form_component_1 = require("./form-component");
var grid_1 = require("./grid");
var DropDownDataGridComponent = /** @class */ (function (_super) {
    __extends(DropDownDataGridComponent, _super);
    function DropDownDataGridComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.style = {};
        _this.emptyText = 'No records to display.';
        _this.allowFiltering = true;
        _this.allowSorting = true;
        _this.multiple = false;
        _this.loadData = new core_1.EventEmitter();
        _this.loading = false;
        _this.searchValue = '';
        _this.multiSortMeta = [];
        _this.skip = 0;
        _this.top = 10;
        _this.filter = '';
        _this.orderBy = '';
        return _this;
    }
    Object.defineProperty(DropDownDataGridComponent.prototype, "pageSize", {
        get: function () {
            return this.top;
        },
        set: function (value) {
            this.top = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropDownDataGridComponent.prototype, "options", {
        get: function () {
            var _this = this;
            if (this.data) {
                var current_1 = this.value;
                if (!this.multiple) {
                    var item = this.valueProperty
                        ? this.data.find(function (i) { return i[_this.valueProperty] == current_1; })
                        : this.data.find(function (i) { return i == current_1; });
                    if (item) {
                        return [this.optionByItem(item)];
                    }
                    else if (this.selectedValue) {
                        return [this.optionByItem(this.selectedValue)];
                    }
                }
                else if (this.multiple) {
                    var items = this.selection || [];
                    var opts = items.map(function (item) { return _this.optionByItem(item); });
                    if (opts.length > 1) {
                        var labels = items.map(function (item) { return get(item, _this.textProperty); });
                        opts[0].label = [labels[0], labels[1]].join(', ') + ", ...";
                    }
                    return opts;
                }
            }
            return [];
        },
        enumerable: true,
        configurable: true
    });
    DropDownDataGridComponent.prototype.onToggle = function (op, event) {
        if (this.disabled != true) {
            op.toggle(event);
        }
    };
    DropDownDataGridComponent.prototype.optionByItem = function (item) {
        return {
            label: this.textProperty ? get(item, this.textProperty) : item,
            value: this.valueProperty ? get(item, this.valueProperty) : item
        };
    };
    DropDownDataGridComponent.prototype.updateValue = function () {
        var _this = this;
        if (this.selection) {
            var newValue = this.multiple
                ? this.selection.map(function (item) { return get(item, _this.valueProperty); })
                : get(this.selection, this.valueProperty);
            this.value = newValue;
        }
    };
    DropDownDataGridComponent.prototype.onSearch = function () {
        this.filter =
            this.searchValue && this.textProperty
                ? "contains(" + this.textProperty + ", '" + this.searchValue + "')"
                : '';
        this.callLoadData();
    };
    DropDownDataGridComponent.prototype.onSearchKeyPress = function (event) {
        if (event.keyCode === 13) {
            this.onSearch();
        }
    };
    DropDownDataGridComponent.prototype.onRowSelect = function (op, dropdown, event) {
        if (!this.multiple) {
            op.toggle(event, dropdown);
            this.updateValue();
        }
    };
    DropDownDataGridComponent.prototype.onClose = function (op, dropdown, event) {
        op.toggle(event, dropdown);
        this.updateValue();
    };
    DropDownDataGridComponent.prototype.onPage = function (event) {
        if (this.skip != event.first || this.top != event.rows) {
            this.skip = event.first;
            this.top = event.rows;
            this.callLoadData();
        }
    };
    DropDownDataGridComponent.prototype.onSort = function (event) {
        if (this.allowSorting && event.field) {
            var field = event.multisortmeta.find(function (i) { return i && i.field == event.field; });
            event.multisortmeta.splice(event.multisortmeta.indexOf(field), 1);
            event.multisortmeta.push({ field: event.field, order: event.order });
        }
        this.orderBy = this.allowSorting
            ? grid_1.orderByToString(event.multisortmeta)
            : '';
        this.callLoadData();
    };
    DropDownDataGridComponent.prototype.callLoadData = function () {
        this.loading = true;
        this.loadData.next({
            skip: this.skip,
            top: this.top,
            orderby: this.orderBy,
            filter: this.filter
        });
    };
    DropDownDataGridComponent.prototype.ngOnChanges = function (changes) {
        if (changes.hasOwnProperty('data')) {
            this.loading = false;
        }
        if (changes.hasOwnProperty('valueProperty') ||
            changes.hasOwnProperty('textProperty')) {
            this.columns =
                this.valueProperty && this.textProperty
                    ? [
                        {
                            property: this.valueProperty,
                            title: this.valueProperty
                        },
                        {
                            property: this.textProperty,
                            title: this.textProperty
                        }
                    ]
                    : [];
        }
    };
    DropDownDataGridComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'rz-dropdown-datagrid',
                    template: "\n    <div #dropdown [ngStyle]=\"style\" class=\"ui-lookup\" (click)=\"onToggle(op, $event)\">\n      <p-dropdown [options]=\"options\" [(ngModel)]=\"value\" [inputId]=\"name\" [placeholder]=\"placeholder\" readonly=\"true\" [autoWidth]=\"false\">\n      </p-dropdown>\n    </div>\n    <p-overlayPanel appendTo=\"body\" #op>\n      <div class=\"ui-lookup-panel\">\n        <div class=\"ui-lookup-search\">\n          <input #search (keypress)=\"onSearchKeyPress($event)\" *ngIf=\"allowFiltering\" (input)=\"searchValue = $event.target.value\" placeholder=\"Search...\">\n          <rz-button *ngIf=\"allowFiltering\" icon=\"search\" (click)=\"onSearch()\"></rz-button>\n        </div>\n        <p-dataTable\n          [selectionMode]=\"multiple? 'multiple' : 'single'\"\n          [(selection)]=\"selection\"\n          scrollable=\"true\"\n          scrollHeight=\"200px\"\n          scrollWidth=\"400px\"\n          responsive=\"true\"\n          alwaysShowPaginator=\"false\"\n          [lazy]=\"loadData.observers.length > 0\"\n          [loading]=\"isLoading || (loadData.observers.length > 0 && loading)\"\n          [value]=\"data\"\n          [totalRecords]=\"count\"\n          [emptyMessage]=\"emptyText\"\n          (onPage)=\"onPage($event)\"\n          (onSort)=\"onSort($event)\"\n          (onRowSelect)=\"onRowSelect(op, dropdown, $event)\"\n          [sortMode]=\"allowSorting ? 'single' : null\"\n          [rows]=\"pageSize\"\n          [multiSortMeta]=\"multiSortMeta\"\n          paginator=\"true\"\n          #dataTable>\n          <p-column *ngFor=\"let column of columns; let index = index\" [field]=\"column.property\" [header]=\"column.title\"\n            [sortable]=\"allowSorting ? (loadData.observers.length > 0 ? 'custom' : true): false\"></p-column>\n        </p-dataTable>\n        <div *ngIf=\"multiple\" class=\"ui-lookup-select\">\n          <rz-button text=\"Select\" (click)=\"onClose(op, dropdown, $event)\"></rz-button>\n        </div>\n      </div>\n    </p-overlayPanel>\n  ",
                    providers: [
                        {
                            provide: forms_1.NG_VALUE_ACCESSOR,
                            useExisting: core_1.forwardRef(function () { return DropDownDataGridComponent; }),
                            multi: true
                        },
                        {
                            provide: form_component_1.FormComponent,
                            useExisting: core_1.forwardRef(function () { return DropDownDataGridComponent; })
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    DropDownDataGridComponent.ctorParameters = function () { return []; };
    DropDownDataGridComponent.propDecorators = {
        "style": [{ type: core_1.Input },],
        "emptyText": [{ type: core_1.Input },],
        "textProperty": [{ type: core_1.Input },],
        "valueProperty": [{ type: core_1.Input },],
        "placeholder": [{ type: core_1.Input },],
        "data": [{ type: core_1.Input },],
        "selectedValue": [{ type: core_1.Input },],
        "count": [{ type: core_1.Input },],
        "allowFiltering": [{ type: core_1.Input },],
        "allowSorting": [{ type: core_1.Input },],
        "multiple": [{ type: core_1.Input },],
        "isLoading": [{ type: core_1.Input },],
        "loadData": [{ type: core_1.Output },],
        "pageSize": [{ type: core_1.Input },],
    };
    return DropDownDataGridComponent;
}(form_component_1.FormComponent));
exports.DropDownDataGridComponent = DropDownDataGridComponent;
var DropDownDataGridModule = /** @class */ (function () {
    function DropDownDataGridModule() {
    }
    DropDownDataGridModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [
                        common_1.CommonModule,
                        forms_1.FormsModule,
                        button_1.ButtonModule,
                        datatable_1.DataTableModule,
                        overlaypanel_1.OverlayPanelModule,
                        dropdown_1.DropdownModule
                    ],
                    declarations: [DropDownDataGridComponent],
                    exports: [DropDownDataGridComponent]
                },] },
    ];
    /** @nocollapse */
    DropDownDataGridModule.ctorParameters = function () { return []; };
    return DropDownDataGridModule;
}());
exports.DropDownDataGridModule = DropDownDataGridModule;
