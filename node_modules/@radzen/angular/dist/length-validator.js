"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var common_1 = require("@angular/common");
var forms_1 = require("@angular/forms");
var validator_1 = require("./validator");
var LengthValidatorComponent = /** @class */ (function (_super) {
    __extends(LengthValidatorComponent, _super);
    function LengthValidatorComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.text = 'Invalid length';
        _this.min = 0;
        return _this;
    }
    Object.defineProperty(LengthValidatorComponent.prototype, "validate", {
        get: function () {
            var validator = null;
            if (!isNaN(this.min)) {
                validator = forms_1.Validators.minLength(this.min);
            }
            if (!isNaN(this.max)) {
                var maxLength = forms_1.Validators.maxLength(this.max);
                if (validator) {
                    validator = forms_1.Validators.compose([validator, maxLength]);
                }
                else {
                    validator = maxLength;
                }
            }
            return validator;
        },
        enumerable: true,
        configurable: true
    });
    LengthValidatorComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'rz-length-validator',
                    template: "\n    <div [ngStyle]=\"style\" class=\"ui-message ui-messages-error\"\n      *ngIf=\"token || ((control?.errors?.minlength || control?.errors?.maxlength) && (control?.touched || control?.dirty || form?.ngForm?.submitted))\">\n        {{ text }}\n    </div>\n  "
                },] },
    ];
    /** @nocollapse */
    LengthValidatorComponent.ctorParameters = function () { return []; };
    LengthValidatorComponent.propDecorators = {
        "text": [{ type: core_1.Input },],
        "min": [{ type: core_1.Input },],
        "max": [{ type: core_1.Input },],
    };
    return LengthValidatorComponent;
}(validator_1.ValidatorComponent));
exports.LengthValidatorComponent = LengthValidatorComponent;
var LengthValidatorModule = /** @class */ (function () {
    function LengthValidatorModule() {
    }
    LengthValidatorModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [common_1.CommonModule],
                    declarations: [LengthValidatorComponent],
                    exports: [LengthValidatorComponent]
                },] },
    ];
    /** @nocollapse */
    LengthValidatorModule.ctorParameters = function () { return []; };
    return LengthValidatorModule;
}());
exports.LengthValidatorModule = LengthValidatorModule;
