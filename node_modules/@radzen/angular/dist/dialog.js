"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var router_1 = require("@angular/router");
var common_1 = require("@angular/common");
var Subject_1 = require("rxjs/Subject");
var dialog_1 = require("primeng/dialog");
var DialogRef = /** @class */ (function () {
    function DialogRef(router) {
        var _this = this;
        this.afterClosed$ = new Subject_1.Subject();
        this.beforeClose$ = new Subject_1.Subject();
        this.subscription = router.events.subscribe(function () {
            _this.close(null);
        });
    }
    DialogRef.prototype.afterClosed = function () {
        return this.afterClosed$.asObservable();
    };
    DialogRef.prototype.beforeClose = function () {
        return this.beforeClose$.asObservable();
    };
    DialogRef.prototype.close = function (result) {
        var _this = this;
        if (result === void 0) { result = null; }
        var subject = new Subject_1.Subject();
        subject.subscribe(function () {
            _this.afterClosed$.next(result);
            _this.afterClosed$.complete();
            _this.subscription.unsubscribe();
            subject.complete();
        });
        this.beforeClose$.next(subject);
        this.beforeClose$.complete();
    };
    DialogRef.decorators = [
        { type: core_1.Injectable },
    ];
    /** @nocollapse */
    DialogRef.ctorParameters = function () { return [
        { type: router_1.Router, },
    ]; };
    return DialogRef;
}());
exports.DialogRef = DialogRef;
var DialogComponent = /** @class */ (function () {
    function DialogComponent(dialogRef) {
        var _this = this;
        this.dialogRef = dialogRef;
        this.width = 600;
        this.visible = true;
        dialogRef.beforeClose().subscribe(function (close) {
            document.body.classList.remove('no-scroll');
            if (_this.visible == true) {
                _this.close$ = close;
                _this.visible = false;
            }
            else {
                close.next();
            }
        });
    }
    DialogComponent.prototype.onHide = function () {
        this.visible = false;
    };
    DialogComponent.prototype.ngAfterViewChecked = function () {
        if (this.visible == false) {
            if (this.close$) {
                this.close$.next();
            }
            else {
                this.dialogRef.close(null);
            }
        }
    };
    DialogComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'rz-dialog',
                    template: "\n    <p-dialog\n      [width]=\"width\"\n      [visible]=\"visible\"\n      [height]=\"height\"\n      (onHide)=\"onHide()\"\n      [header]=\"title\"\n      [focusOnShow]=\"false\"\n      [positionLeft]=\"left\"\n      [positionTop]=\"top\"\n      [modal]=\"true\"\n    >\n      <ng-container *ngComponentOutlet=\"component\"></ng-container>\n    </p-dialog>\n  "
                },] },
    ];
    /** @nocollapse */
    DialogComponent.ctorParameters = function () { return [
        { type: DialogRef, },
    ]; };
    DialogComponent.propDecorators = {
        "component": [{ type: core_1.Input },],
        "title": [{ type: core_1.Input },],
        "width": [{ type: core_1.Input },],
        "height": [{ type: core_1.Input },],
        "left": [{ type: core_1.Input },],
        "top": [{ type: core_1.Input },],
    };
    return DialogComponent;
}());
exports.DialogComponent = DialogComponent;
var DialogInjector = /** @class */ (function () {
    function DialogInjector(injector, tokens) {
        this.injector = injector;
        this.tokens = tokens;
    }
    DialogInjector.prototype.get = function (token, notFoundValue) {
        var value = this.tokens.get(token);
        if (typeof value !== 'undefined') {
            return value;
        }
        return this.injector.get(token, notFoundValue);
    };
    return DialogInjector;
}());
exports.DialogInjector = DialogInjector;
exports.DIALOG_PARAMETERS = new core_1.InjectionToken('DialogParameters');
var DialogService = /** @class */ (function () {
    function DialogService(componentFactoryResolver, applicationRef, injector, router) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.applicationRef = applicationRef;
        this.injector = injector;
        this.router = router;
    }
    DialogService.prototype.open = function (componentType, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        var componentFactory = this.componentFactoryResolver.resolveComponentFactory(DialogComponent);
        var dialogRef = new DialogRef(this.router);
        var injectionTokens = new WeakMap();
        injectionTokens.set(DialogRef, dialogRef);
        var parameters = options.parameters, rest = __rest(options, ["parameters"]);
        if (parameters) {
            injectionTokens.set(exports.DIALOG_PARAMETERS, parameters);
        }
        var componentRef = componentFactory.create(new DialogInjector(this.injector, injectionTokens));
        componentRef.instance.component = componentType;
        Object.assign(componentRef.instance, rest);
        this.applicationRef.attachView(componentRef.hostView);
        document.body.appendChild(componentRef.hostView.rootNodes[0]);
        document.body.classList.add('no-scroll');
        dialogRef.afterClosed().subscribe(function () {
            _this.applicationRef.detachView(componentRef.hostView);
            componentRef.destroy();
        });
        return dialogRef;
    };
    DialogService.decorators = [
        { type: core_1.Injectable },
    ];
    /** @nocollapse */
    DialogService.ctorParameters = function () { return [
        { type: core_1.ComponentFactoryResolver, },
        { type: core_1.ApplicationRef, },
        { type: core_1.Injector, },
        { type: router_1.Router, },
    ]; };
    return DialogService;
}());
exports.DialogService = DialogService;
var DialogModule = /** @class */ (function () {
    function DialogModule() {
    }
    DialogModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [common_1.CommonModule, dialog_1.DialogModule],
                    providers: [DialogService],
                    declarations: [DialogComponent],
                    exports: [DialogComponent],
                    entryComponents: [DialogComponent]
                },] },
    ];
    /** @nocollapse */
    DialogModule.ctorParameters = function () { return []; };
    return DialogModule;
}());
exports.DialogModule = DialogModule;
if (/Android/.test(navigator.appVersion)) {
    window.addEventListener('resize', function () {
        var activeElement = document.activeElement;
        if (activeElement.tagName == 'INPUT' ||
            activeElement.tagName == 'TEXTAREA') {
            window.setTimeout(function () {
                activeElement.scrollIntoView();
            }, 0);
        }
    });
}
