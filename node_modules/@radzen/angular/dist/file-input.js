"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var forms_1 = require("@angular/forms");
var common_1 = require("@angular/common");
var platform_browser_1 = require("@angular/platform-browser");
var button_1 = require("primeng/button");
var form_component_1 = require("./form-component");
var FileInputComponent = /** @class */ (function (_super) {
    __extends(FileInputComponent, _super);
    function FileInputComponent(sanitizer) {
        var _this = _super.call(this) || this;
        _this.sanitizer = sanitizer;
        _this.select = new core_1.EventEmitter();
        _this.style = {};
        _this.accept = 'image/*';
        return _this;
    }
    Object.defineProperty(FileInputComponent.prototype, "value", {
        get: function () {
            return this.innerValue;
        },
        set: function (value) {
            if (value != this.innerValue) {
                this.innerValue = value;
                if (value) {
                    this.dataURI = this.sanitizer.bypassSecurityTrustUrl(value);
                }
                this.isImage = /^data:image/.test(value);
                this.onChange(value);
                this.change.next(value);
            }
        },
        enumerable: true,
        configurable: true
    });
    FileInputComponent.prototype.writeValue = function (value) {
        this.value = value;
    };
    FileInputComponent.prototype.onRemove = function () {
        this.value = null;
        this.onChange(null);
    };
    FileInputComponent.prototype.onFileSelect = function (event) {
        var _this = this;
        this.onTouched();
        var reader = new FileReader();
        var file = event.target.files[0];
        this.name = file.name;
        this.size = formatSize(file.size);
        this.select.next({
            file: file
        });
        reader.onload = function (event) {
            _this.value = event.target.result;
            _this.onChange(_this.value);
        };
        reader.readAsDataURL(file);
    };
    FileInputComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'rz-file-input',
                    styles: [
                        "\n      img {\n        width: 100px;\n      }\n    "
                    ],
                    template: "\n    <div\n      class=\"ui-fileupload ui-widget\"\n      [ngClass]=\"{'ui-state-disabled': disabled}\"\n    >\n      <div class=\"ui-fileupload-buttonbar ui-widget-header ui-corner-top\">\n        <span\n          pButton\n          icon=\"fa-upload\"\n          label=\"Choose\"\n          [ngClass]=\"{'ui-state-disabled': disabled}\"\n          class=\"ui-fileupload-choose\"\n        >\n          <input\n            #input\n            [disabled]=\"disabled\"\n            type=\"file\"\n            (change)=\"onFileSelect($event)\"\n            [accept]=\"accept\"\n          />\n          <input type=\"hidden\" [(ngModel)]=\"value\" />\n        </span>\n      </div>\n      <div class=\"ui-fileupload-content ui-widget-content ui-corner-bottom\">\n        <div *ngIf=\"value\" class=\"ui-fileupload-files\">\n          <div class=\"ui-fileupload-row\">\n            <div><img *ngIf=\"isImage\" [src]=\"dataURI\" /></div>\n            <div>\n              <span *ngIf=\"name\">{{ name }}</span>\n            </div>\n            <div>\n              <span *ngIf=\"size\">{{ size }}</span>\n            </div>\n            <div>\n              <button\n                type=\"button\"\n                icon=\"ui-icon-trash\"\n                pButton\n                (click)=\"onRemove()\"\n              ></button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  ",
                    providers: [
                        {
                            provide: forms_1.NG_VALUE_ACCESSOR,
                            useExisting: core_1.forwardRef(function () { return FileInputComponent; }),
                            multi: true
                        },
                        {
                            provide: form_component_1.FormComponent,
                            useExisting: core_1.forwardRef(function () { return FileInputComponent; })
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    FileInputComponent.ctorParameters = function () { return [
        { type: platform_browser_1.DomSanitizer, },
    ]; };
    FileInputComponent.propDecorators = {
        "select": [{ type: core_1.Output },],
        "style": [{ type: core_1.Input },],
        "accept": [{ type: core_1.Input },],
    };
    return FileInputComponent;
}(form_component_1.FormComponent));
exports.FileInputComponent = FileInputComponent;
function formatSize(bytes) {
    var decimals = 2;
    var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
    var index = Math.floor(Math.log(bytes) / Math.log(1024));
    var numeric = bytes / Math.pow(1024, index);
    return numeric.toFixed(decimals) + " " + sizes[index];
}
var FileInputModule = /** @class */ (function () {
    function FileInputModule() {
    }
    FileInputModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [common_1.CommonModule, forms_1.FormsModule, button_1.ButtonModule],
                    declarations: [FileInputComponent],
                    exports: [FileInputComponent]
                },] },
    ];
    /** @nocollapse */
    FileInputModule.ctorParameters = function () { return []; };
    return FileInputModule;
}());
exports.FileInputModule = FileInputModule;
