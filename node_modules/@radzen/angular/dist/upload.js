"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var common_1 = require("@angular/common");
var fileupload_1 = require("primeng/fileupload");
var UploadComponent = /** @class */ (function () {
    function UploadComponent() {
        this.style = {};
        this.multiple = false;
        this.auto = false;
        this.previewWidth = 50;
        this.chooseText = 'Choose';
        this.uploadText = 'Upload';
        this.cancelText = 'Cancel';
        this.parameterName = 'file';
        this.beforeUpload = new core_1.EventEmitter();
        this.beforeSend = new core_1.EventEmitter();
        this.upload = new core_1.EventEmitter();
        this.error = new core_1.EventEmitter();
        this.clear = new core_1.EventEmitter();
        this.cancel = new core_1.EventEmitter();
    }
    UploadComponent.prototype.onBeforeUpload = function (event) {
        this.beforeUpload.next(event);
    };
    UploadComponent.prototype.onBeforeSend = function (event) {
        this.beforeSend.next(event);
    };
    UploadComponent.prototype.onUpload = function (event) {
        this.upload.next(event);
    };
    UploadComponent.prototype.onCustomUpload = function (event) {
        var _this = this;
        if (Array.isArray(event.files)) {
            Promise.all(event.files.map(function (file) {
                return new Promise(function (resolve, reject) {
                    var reader = new FileReader();
                    reader.onload = function (event) {
                        file.dataURL = event.target.result;
                        file.base64 = file.dataURL.replace(/data:[^,]+,/, '');
                        resolve();
                    };
                    reader.onerror = reject;
                    reader.readAsDataURL(file);
                });
            })).then(function () { return _this.upload.next(event); });
        }
    };
    UploadComponent.prototype.onError = function (event) {
        this.error.next(event);
    };
    UploadComponent.prototype.onClear = function (event) {
        this.clear.next(event);
    };
    UploadComponent.prototype.onCancel = function (event) {
        this.cancel.next(event);
    };
    UploadComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'rz-upload',
                    template: "<p-fileUpload\n  [name]=\"parameterName\"\n  [style]=\"style\"\n  [url]=\"url\"\n  [multiple]=\"multiple\"\n  [customUpload]=\"!url\"\n  [auto]=\"auto\"\n  [maxFileSize]=\"maxFileSize\"\n  [accept]=\"accept\"\n  [previewWidth]=\"previewWidth\"\n  [chooseLabel]=\"chooseText\"\n  [uploadLabel]=\"uploadText\"\n  [cancelLabel]=\"cancelText\"\n  (onBeforeUpload)=\"onBeforeUpload($event)\"\n  (onBeforeSend)=\"onBeforeSend($event)\"\n  (onUpload)=\"onUpload($event)\"\n  (onError)=\"onError($event)\"\n  (onClear)=\"onClear($event)\"\n  (onCancel)=\"onCancel($event)\"\n  (uploadHandler)=\"onCustomUpload($event)\"\n  ></p-fileUpload>"
                },] },
    ];
    /** @nocollapse */
    UploadComponent.ctorParameters = function () { return []; };
    UploadComponent.propDecorators = {
        "style": [{ type: core_1.Input },],
        "url": [{ type: core_1.Input },],
        "multiple": [{ type: core_1.Input },],
        "auto": [{ type: core_1.Input },],
        "maxFileSize": [{ type: core_1.Input },],
        "accept": [{ type: core_1.Input },],
        "previewWidth": [{ type: core_1.Input },],
        "chooseText": [{ type: core_1.Input },],
        "uploadText": [{ type: core_1.Input },],
        "cancelText": [{ type: core_1.Input },],
        "parameterName": [{ type: core_1.Input },],
        "beforeUpload": [{ type: core_1.Output },],
        "beforeSend": [{ type: core_1.Output },],
        "upload": [{ type: core_1.Output },],
        "error": [{ type: core_1.Output },],
        "clear": [{ type: core_1.Output },],
        "cancel": [{ type: core_1.Output },],
    };
    return UploadComponent;
}());
exports.UploadComponent = UploadComponent;
var UploadModule = /** @class */ (function () {
    function UploadModule() {
    }
    UploadModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [common_1.CommonModule, fileupload_1.FileUploadModule],
                    declarations: [UploadComponent],
                    exports: [UploadComponent]
                },] },
    ];
    /** @nocollapse */
    UploadModule.ctorParameters = function () { return []; };
    return UploadModule;
}());
exports.UploadModule = UploadModule;
