"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var common_1 = require("@angular/common");
var get = require("lodash/get");
var map = require("lodash/map");
var groupBy = require("lodash/groupBy");
var ngx_charts_1 = require("@swimlane/ngx-charts");
var d3_shape_1 = require("d3-shape");
var shared_1 = require("./shared");
var utc_date_pipe_1 = require("./utc-date.pipe");
var ChartComponent = /** @class */ (function () {
    function ChartComponent() {
        this.style = {};
        this.barPadding = 8;
        this.colors = [
            '#479cc8',
            '#68D5C8',
            '#ff6d41',
            '#cb6992',
            '#e6c54f',
            '#f9777f',
            '#5dbf74',
            '#4db9f2',
            '#FF6D41'
        ];
        this.select = new core_1.EventEmitter();
        this.results = [];
        this.view = [];
        this.curve = d3_shape_1.curveMonotoneX;
    }
    ChartComponent.prototype.onSelect = function (event) {
        if (typeof event != 'string') {
            this.select.emit({
                category: event.name,
                value: event.value,
                series: event.series
            });
        }
    };
    ChartComponent.prototype.update = function () {
        var _this = this;
        if (this.data && this.categoryProperty && this.valueProperty) {
            var series = void 0;
            if (this.series) {
                var groups = groupBy(this.data, this.series);
                series = map(groups, function (data, name) {
                    var series = _this.map(data);
                    return {
                        name: name,
                        series: series
                    };
                });
            }
            else {
                series = this.map(this.data);
            }
            if ((this.chartType == 'Line' || this.chartType == 'Area') &&
                !this.series) {
                this.results = [
                    {
                        name: this.categoryProperty,
                        series: series
                    }
                ];
            }
            else {
                this.results = series;
            }
        }
    };
    ChartComponent.prototype.map = function (data) {
        var _this = this;
        return data.map(function (item) {
            var value = get(item, _this.valueProperty);
            var name = get(item, _this.categoryProperty);
            var date = utc_date_pipe_1.parseDate(name);
            if (date != null) {
                name = date;
            }
            return {
                name: name,
                value: +value
            };
        });
    };
    ChartComponent.prototype.ngAfterViewInit = function () {
        var _a = this.container.nativeElement, clientWidth = _a.clientWidth, clientHeight = _a.clientHeight;
        this.view = [clientWidth, clientHeight];
        this.update();
    };
    ChartComponent.prototype.ngOnChanges = function () {
        this.update();
    };
    ChartComponent.prototype.ngDoCheck = function () {
        var _a = this.view, width = _a[0], height = _a[1];
        var _b = this.container.nativeElement, clientWidth = _b.clientWidth, clientHeight = _b.clientHeight;
        if (width != clientWidth || height != clientHeight) {
            this.view = [clientWidth, clientHeight];
        }
    };
    ChartComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'rz-chart',
                    template: "<div #container class=\"chart\" [ngStyle]=\"style\">\n      <ngx-charts-bar-vertical-2d\n        *ngIf=\"chartType == 'Column' && series\"\n        [view]=\"view\"\n        (select)=\"onSelect($event)\"\n        [barPadding]=\"barPadding\"\n        [xAxis]=\"true\"\n        [yAxis]=\"true\"\n        [animations]=\"false\"\n        [scheme]=\"{domain:colors}\"\n        [results]=\"results\"\n        [legend]=\"legend\"\n      ></ngx-charts-bar-vertical-2d>\n      <ngx-charts-bar-vertical\n        *ngIf=\"chartType == 'Column' && !series\"\n        [view]=\"view\"\n        (select)=\"onSelect($event)\"\n        [barPadding]=\"barPadding\"\n        [xAxis]=\"true\"\n        [yAxis]=\"true\"\n        [animations]=\"false\"\n        [scheme]=\"{domain:colors}\"\n        [results]=\"results\"\n        [legend]=\"legend\"\n      ></ngx-charts-bar-vertical>\n      <ngx-charts-bar-horizontal-2d\n        *ngIf=\"chartType == 'Bar' && series\"\n        [view]=\"view\"\n        (select)=\"onSelect($event)\"\n        [barPadding]=\"barPadding\"\n        [xAxis]=\"true\"\n        [yAxis]=\"true\"\n        [results]=\"results\"\n        [animations]=\"false\"\n        [scheme]=\"{domain:colors}\"\n        [legend]=\"legend\"\n      ></ngx-charts-bar-horizontal-2d>\n      <ngx-charts-bar-horizontal\n        *ngIf=\"chartType == 'Bar' && !series\"\n        [view]=\"view\"\n        (select)=\"onSelect($event)\"\n        [barPadding]=\"barPadding\"\n        [xAxis]=\"true\"\n        [yAxis]=\"true\"\n        [animations]=\"false\"\n        [scheme]=\"{domain:colors}\"\n        [results]=\"results\"\n        [legend]=\"legend\"\n      ></ngx-charts-bar-horizontal>\n      <ngx-charts-line-chart\n        *ngIf=\"chartType == 'Line'\"\n        [view]=\"view\"\n        (select)=\"onSelect($event)\"\n        [xAxis]=\"true\"\n        [yAxis]=\"true\"\n        [curve]=\"curve\"\n        [animations]=\"false\"\n        [scheme]=\"{domain:colors}\"\n        [results]=\"results\"\n        [roundDomains]=\"true\"\n        [legend]=\"legend\"\n      ></ngx-charts-line-chart>\n      <ngx-charts-area-chart\n        *ngIf=\"chartType == 'Area'\"\n        [roundDomains]=\"true\"\n        (select)=\"onSelect($event)\"\n        [view]=\"view\"\n        [xAxis]=\"true\"\n        [yAxis]=\"true\"\n        [curve]=\"curve\"\n        [animations]=\"false\"\n        [scheme]=\"{domain:colors}\"\n        [results]=\"results\"\n        [legend]=\"legend\"\n      ></ngx-charts-area-chart>\n    </div>"
                },] },
    ];
    /** @nocollapse */
    ChartComponent.ctorParameters = function () { return []; };
    ChartComponent.propDecorators = {
        "style": [{ type: core_1.Input },],
        "title": [{ type: core_1.Input },],
        "icon": [{ type: core_1.Input },],
        "titleBackground": [{ type: core_1.Input },],
        "titleColor": [{ type: core_1.Input },],
        "series": [{ type: core_1.Input },],
        "legend": [{ type: core_1.Input },],
        "chartType": [{ type: core_1.Input },],
        "data": [{ type: core_1.Input },],
        "categoryProperty": [{ type: core_1.Input },],
        "valueProperty": [{ type: core_1.Input },],
        "barPadding": [{ type: core_1.Input },],
        "colors": [{ type: core_1.Input },],
        "select": [{ type: core_1.Output },],
        "container": [{ type: core_1.ViewChild, args: ['container',] },],
    };
    return ChartComponent;
}());
exports.ChartComponent = ChartComponent;
var ChartModule = /** @class */ (function () {
    function ChartModule() {
    }
    ChartModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [common_1.CommonModule, ngx_charts_1.NgxChartsModule, shared_1.SharedModule],
                    declarations: [ChartComponent],
                    exports: [ChartComponent]
                },] },
    ];
    /** @nocollapse */
    ChartModule.ctorParameters = function () { return []; };
    return ChartModule;
}());
exports.ChartModule = ChartModule;
