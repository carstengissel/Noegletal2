"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var form_field_1 = require("./form-field");
var SelectBarFormFieldOptionComponent = /** @class */ (function () {
    function SelectBarFormFieldOptionComponent() {
    }
    SelectBarFormFieldOptionComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'rz-selectbar-form-field-option',
                    template: ''
                },] },
    ];
    /** @nocollapse */
    SelectBarFormFieldOptionComponent.ctorParameters = function () { return []; };
    SelectBarFormFieldOptionComponent.propDecorators = {
        "text": [{ type: core_1.Input },],
        "value": [{ type: core_1.Input },],
    };
    return SelectBarFormFieldOptionComponent;
}());
exports.SelectBarFormFieldOptionComponent = SelectBarFormFieldOptionComponent;
var SelectBarFormFieldComponent = /** @class */ (function (_super) {
    __extends(SelectBarFormFieldComponent, _super);
    function SelectBarFormFieldComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.multiple = false;
        _this.options = [];
        return _this;
    }
    SelectBarFormFieldComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.createOptions();
        this.subscription = this.children.changes.subscribe(function () {
            return _this.createOptions();
        });
    };
    SelectBarFormFieldComponent.prototype.ngOnDestroy = function () {
        this.subscription.unsubscribe();
    };
    SelectBarFormFieldComponent.prototype.createOptions = function () {
        if (!this.children) {
            return;
        }
        this.options = this.children.map(function (option) {
            return {
                label: option.text,
                value: option.value != null ? option.value : option.text
            };
        });
    };
    SelectBarFormFieldComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'rz-selectbar-form-field',
                    template: "\n    <p-selectButton\n      [formControl]=\"parent.form.controls[property]\"\n      [multiple]=\"multiple\"\n      [options]=\"options\"\n      [attr.id]=\"property\"></p-selectButton>\n    <div class=\"md-inputfield\"\n      *ngIf=\"(parent.form.controls[property].touched || parent.submitted) && parent.form.controls[property].errors?.required\">\n      <div class=\"ui-message ui-messages-error ui-corner-all\">\n        {{ title }} {{ requiredText }}\n      </div>\n    </div>\n  ",
                    providers: [
                        {
                            provide: form_field_1.FormFieldComponent,
                            useExisting: core_1.forwardRef(function () { return SelectBarFormFieldComponent; })
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    SelectBarFormFieldComponent.ctorParameters = function () { return []; };
    SelectBarFormFieldComponent.propDecorators = {
        "multiple": [{ type: core_1.Input },],
        "children": [{ type: core_1.ContentChildren, args: [SelectBarFormFieldOptionComponent,] },],
    };
    return SelectBarFormFieldComponent;
}(form_field_1.FormFieldComponent));
exports.SelectBarFormFieldComponent = SelectBarFormFieldComponent;
