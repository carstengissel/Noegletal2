"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var common_1 = require("@angular/common");
var shared_1 = require("./shared");
var SSRSViewerParameter = /** @class */ (function () {
    function SSRSViewerParameter() {
    }
    return SSRSViewerParameter;
}());
exports.SSRSViewerParameter = SSRSViewerParameter;
var SSRSViewerParameterComponent = /** @class */ (function () {
    function SSRSViewerParameterComponent(parent) {
        this.parent = parent;
    }
    Object.defineProperty(SSRSViewerParameterComponent.prototype, "parameterName", {
        get: function () {
            return this._parameterName;
        },
        set: function (value) {
            this._parameterName = value;
            if (this.parent) {
                this.parent.setReportUrl();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SSRSViewerParameterComponent.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (value) {
            this._value = value;
            if (this.parent) {
                this.parent.setReportUrl();
            }
        },
        enumerable: true,
        configurable: true
    });
    SSRSViewerParameterComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'rz-ssrsviewer-parameter',
                    template: ''
                },] },
    ];
    /** @nocollapse */
    SSRSViewerParameterComponent.ctorParameters = function () { return [
        { type: SSRSViewerComponent, decorators: [{ type: core_1.Host },] },
    ]; };
    SSRSViewerParameterComponent.propDecorators = {
        "parameterName": [{ type: core_1.Input },],
        "value": [{ type: core_1.Input },],
    };
    return SSRSViewerParameterComponent;
}());
exports.SSRSViewerParameterComponent = SSRSViewerParameterComponent;
var SSRSViewerComponent = /** @class */ (function () {
    function SSRSViewerComponent(hostElement) {
        this.hostElement = hostElement;
        this.style = {};
        this.visible = true;
        this.useProxy = false;
        this.parameters = [];
    }
    SSRSViewerComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.iframe = this.hostElement.nativeElement.querySelector('iframe');
        this.setReportUrl();
        this.subscription = this.children.changes.subscribe(function () {
            return _this.setReportUrl();
        });
    };
    SSRSViewerComponent.prototype.ngOnDestroy = function () {
        this.subscription.unsubscribe();
    };
    SSRSViewerComponent.prototype.setReportUrl = function () {
        this.parameters =
            this.children &&
                this.children.map(function (child) {
                    return {
                        parameterName: child.parameterName,
                        value: child.value
                    };
                });
        var params = this.parameters
            ? this.parameters
                .filter(function (p) { return p.parameterName; })
                .map(function (p) { return p.parameterName + "=" + p.value; })
                .join('&')
            : '';
        var url = this.reportServer && this.reportName
            ? this.reportServer + "/Pages/ReportViewer.aspx?%2f" + this
                .reportName + "&rs:Command=Render&rs:Embed=true" + (params
                ? '&' + params
                : '')
            : '';
        var newUrl;
        if (this.useProxy) {
            if (this.localServer) {
                newUrl = this.localServer + "/ssrsreport?url=" + encodeURIComponent(url);
            }
            else {
                var base = document.querySelector('base');
                var baseHref = base && base.href || '';
                if (baseHref.endsWith('/')) {
                    baseHref = baseHref.substring(0, baseHref.length - 1);
                }
                newUrl = baseHref + "/ssrsreport?url=" + encodeURIComponent(url);
            }
        }
        else {
            newUrl = url;
        }
        if (this.reportUrl != newUrl) {
            this.reportUrl = newUrl;
        }
    };
    SSRSViewerComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'rz-ssrsviewer',
                    template: "\n  <div class=\"ssrsviewer\" [ngStyle]=\"style\">\n    <iframe [id]=\"name\" frameborder=\"0\" [src]=\"reportUrl | safe\">\n    </iframe>\n  </div>"
                },] },
    ];
    /** @nocollapse */
    SSRSViewerComponent.ctorParameters = function () { return [
        { type: core_1.ElementRef, },
    ]; };
    SSRSViewerComponent.propDecorators = {
        "style": [{ type: core_1.Input },],
        "name": [{ type: core_1.Input },],
        "visible": [{ type: core_1.Input },],
        "useProxy": [{ type: core_1.Input },],
        "localServer": [{ type: core_1.Input },],
        "reportServer": [{ type: core_1.Input },],
        "reportName": [{ type: core_1.Input },],
        "children": [{ type: core_1.ContentChildren, args: [SSRSViewerParameterComponent,] },],
    };
    return SSRSViewerComponent;
}());
exports.SSRSViewerComponent = SSRSViewerComponent;
var SSRSViewerModule = /** @class */ (function () {
    function SSRSViewerModule() {
    }
    SSRSViewerModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [common_1.CommonModule, shared_1.SharedModule],
                    declarations: [SSRSViewerComponent, SSRSViewerParameterComponent],
                    exports: [SSRSViewerComponent, SSRSViewerParameterComponent]
                },] },
    ];
    /** @nocollapse */
    SSRSViewerModule.ctorParameters = function () { return []; };
    return SSRSViewerModule;
}());
exports.SSRSViewerModule = SSRSViewerModule;
