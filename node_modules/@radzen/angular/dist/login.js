"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var common_1 = require("@angular/common");
var forms_1 = require("@angular/forms");
var button_1 = require("./button");
var LoginComponent = /** @class */ (function () {
    function LoginComponent(formBuilder) {
        this.formBuilder = formBuilder;
        this.style = {};
        this.login = new core_1.EventEmitter();
        this.register = new core_1.EventEmitter();
        this.resetPassword = new core_1.EventEmitter();
        this.allowRegister = true;
        this.allowResetPassword = true;
        this.loginText = 'Login';
        this.registerText = 'Sign up';
        this.registerMessageText = "Don't have an account yet?";
        this.resetPasswordText = 'Forgot password';
        this.userText = 'Username';
        this.userRequired = 'Username is required';
        this.passwordText = 'Password';
        this.passwordRequired = 'Password is required';
    }
    LoginComponent.prototype.ngOnInit = function () {
        this.form = this.formBuilder.group({
            username: ['', forms_1.Validators.required],
            password: ['', forms_1.Validators.required]
        });
    };
    LoginComponent.prototype.onSubmit = function (event) {
        event.stopPropagation();
        event.preventDefault();
        this.submitted = true;
        if (this.form.valid) {
            this.login.next(this.form.value);
        }
    };
    LoginComponent.prototype.onRegister = function () {
        this.register.next();
    };
    LoginComponent.prototype.onResetPassword = function (event) {
        event.preventDefault();
        if (this.form.value.username) {
            this.resetPassword.next(this.form.value);
        }
    };
    LoginComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'rz-login',
                    template: "\n    <div class=\"login\" [ngStyle]=\"style\">\n      <form [formGroup]=\"form\" class=\"ui-form\" (submit)=\"onSubmit($event)\">\n        <div class=\"row form-group\">\n          <label class=\"col-sm-3 col-form-label\" for=\"username\">{{ userText }}</label>\n          <div class=\"col\">\n            <input class=\"textbox\" formControlName=\"username\" id=\"username\">\n            <div class=\"md-inputfield\" *ngIf=\"(form.controls.username.touched || submitted) && form.controls.username.errors?.required\">\n              <div class=\"ui-message ui-messages-error ui-corner-all\">\n                {{ userRequired }}\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"row form-group\">\n          <label class=\"col-sm-3 col-form-label\" for=\"password\">{{ passwordText }}</label>\n          <div class=\"col\">\n            <input class=\"textbox\" type=\"password\" formControlName=\"password\" id=\"password\">\n            <div class=\"md-inputfield\" *ngIf=\"(form.controls.password.touched || submitted) && form.controls.password.errors?.required\">\n              <div class=\"ui-message ui-messages-error ui-corner-all\">\n                {{ passwordRequired }}\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"row form-group\">\n          <div class=\"offset-sm-3 col login-buttons\">\n            <rz-button buttonType=\"submit\" buttonStyle=\"primary\" [text]=\"loginText\"></rz-button>\n            <a *ngIf=\"allowResetPassword\" (click)=\"onResetPassword($event)\">{{ resetPasswordText }}</a>\n          </div>\n        </div>\n      </form>\n      <div class=\"register\" *ngIf=\"allowRegister\">\n        {{ registerMessageText }} <rz-button (click)=\"onRegister()\" buttonStyle=\"secondary\" [text]=\"registerText\"></rz-button>\n      </div>\n    </div>\n  "
                },] },
    ];
    /** @nocollapse */
    LoginComponent.ctorParameters = function () { return [
        { type: forms_1.FormBuilder, },
    ]; };
    LoginComponent.propDecorators = {
        "style": [{ type: core_1.Input },],
        "login": [{ type: core_1.Output },],
        "register": [{ type: core_1.Output },],
        "resetPassword": [{ type: core_1.Output },],
        "allowRegister": [{ type: core_1.Input },],
        "allowResetPassword": [{ type: core_1.Input },],
        "loginText": [{ type: core_1.Input },],
        "registerText": [{ type: core_1.Input },],
        "registerMessageText": [{ type: core_1.Input },],
        "resetPasswordText": [{ type: core_1.Input },],
        "userText": [{ type: core_1.Input },],
        "userRequired": [{ type: core_1.Input },],
        "passwordText": [{ type: core_1.Input },],
        "passwordRequired": [{ type: core_1.Input },],
    };
    return LoginComponent;
}());
exports.LoginComponent = LoginComponent;
var LoginModule = /** @class */ (function () {
    function LoginModule() {
    }
    LoginModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [common_1.CommonModule, forms_1.ReactiveFormsModule, button_1.ButtonModule],
                    declarations: [LoginComponent],
                    exports: [LoginComponent]
                },] },
    ];
    /** @nocollapse */
    LoginModule.ctorParameters = function () { return []; };
    return LoginModule;
}());
exports.LoginModule = LoginModule;
