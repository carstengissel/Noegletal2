"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var form_field_1 = require("./form-field");
var utc_date_pipe_1 = require("./utc-date.pipe");
var DateFormFieldComponent = /** @class */ (function (_super) {
    __extends(DateFormFieldComponent, _super);
    function DateFormFieldComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.utc = true;
        _this.showTime = false;
        _this.showSeconds = false;
        _this.dateFormat = 'mm/dd/yy';
        _this.yearRange = '1950:2050';
        return _this;
    }
    DateFormFieldComponent.prototype.parse = function (value) {
        if (value != null) {
            var utcCheck = true;
            if (typeof value == 'string') {
                utcCheck = utc_date_pipe_1.ISO8601_DATE_REGEX.test(value);
            }
            value = new Date(value);
            if (this.utc && utcCheck) {
                value = new Date(value.getUTCFullYear(), value.getUTCMonth(), value.getUTCDate(), value.getUTCHours(), value.getUTCMinutes(), value.getUTCSeconds(), value.getUTCMilliseconds());
            }
            else {
                value = new Date(Date.parse(value));
            }
        }
        return value;
    };
    DateFormFieldComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'rz-date-form-field',
                    template: "\n      <p-calendar appendTo=\"body\"\n        [styleClass]=\"disabled ? 'ui-state-disabled' : null\"\n        [dateFormat]=\"dateFormat\"\n        [showIcon]=\"true\"\n        [formControl]=\"parent.form.controls[property]\"\n        [placeholder]=\"placeholder\"\n        [showTime]=\"showTime\"\n        [showSeconds]=\"showSeconds\"\n        [yearNavigator]=\"true\"\n        [yearRange]=\"yearRange\"\n        [monthNavigator]=\"true\"\n        [inputId]=\"property\">\n      </p-calendar>\n      <div class=\"md-inputfield\"\n        *ngIf=\"(parent.form.controls[property].touched || parent.submitted) && parent.form.controls[property].errors?.required\">\n        <div class=\"ui-message ui-messages-error ui-corner-all\">\n          {{ title }} {{ requiredText }}\n        </div>\n      </div>\n  ",
                    providers: [
                        {
                            provide: form_field_1.FormFieldComponent,
                            useExisting: core_1.forwardRef(function () { return DateFormFieldComponent; })
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    DateFormFieldComponent.ctorParameters = function () { return []; };
    DateFormFieldComponent.propDecorators = {
        "utc": [{ type: core_1.Input },],
        "showTime": [{ type: core_1.Input },],
        "showSeconds": [{ type: core_1.Input },],
        "dateFormat": [{ type: core_1.Input },],
        "placeholder": [{ type: core_1.Input },],
        "yearRange": [{ type: core_1.Input },],
    };
    return DateFormFieldComponent;
}(form_field_1.FormFieldComponent));
exports.DateFormFieldComponent = DateFormFieldComponent;
