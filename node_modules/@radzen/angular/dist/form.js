"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var forms_1 = require("@angular/forms");
var common_1 = require("@angular/common");
var get = require("lodash/get");
var set = require("lodash/set");
var tristatecheckbox_1 = require("primeng/tristatecheckbox");
var checkbox_1 = require("primeng/checkbox");
var calendar_1 = require("primeng/calendar");
var selectbutton_1 = require("primeng/selectbutton");
var dropdown_1 = require("primeng/dropdown");
var multiselect_1 = require("primeng/multiselect");
var rating_1 = require("primeng/rating");
var overlaypanel_1 = require("primeng/overlaypanel");
var datatable_1 = require("primeng/datatable");
var button_1 = require("./button");
var shared_1 = require("./shared");
var numeric_1 = require("./numeric");
var file_input_1 = require("./file-input");
var form_field_1 = require("./form-field");
var string_form_field_1 = require("./string-form-field");
var text_form_field_1 = require("./text-form-field");
var password_form_field_1 = require("./password-form-field");
var selectbar_form_field_1 = require("./selectbar-form-field");
var number_form_field_1 = require("./number-form-field");
var integer_form_field_1 = require("./integer-form-field");
var boolean_form_field_1 = require("./boolean-form-field");
var date_form_field_1 = require("./date-form-field");
var file_form_field_1 = require("./file-form-field");
var lookup_form_field_1 = require("./lookup-form-field");
var lookup_popup_form_field_1 = require("./lookup-popup-form-field");
var rating_form_field_1 = require("./rating-form-field");
function compare(name) {
    return function (control) {
        var other = control.root.get(name);
        return other && control.value != other.value
            ? {
                compare: { value: control.value }
            }
            : null;
    };
}
var FormFieldDirective = /** @class */ (function () {
    function FormFieldDirective(viewContainerRef) {
        this.viewContainerRef = viewContainerRef;
    }
    Object.defineProperty(FormFieldDirective.prototype, "elementRef", {
        set: function (elementRef) {
            this.viewContainerRef.element.nativeElement.appendChild(elementRef.nativeElement);
        },
        enumerable: true,
        configurable: true
    });
    FormFieldDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[rz-form-field]'
                },] },
    ];
    /** @nocollapse */
    FormFieldDirective.ctorParameters = function () { return [
        { type: core_1.ViewContainerRef, },
    ]; };
    FormFieldDirective.propDecorators = {
        "elementRef": [{ type: core_1.Input, args: ['rz-form-field',] },],
    };
    return FormFieldDirective;
}());
exports.FormFieldDirective = FormFieldDirective;
var FormComponent = /** @class */ (function () {
    function FormComponent(formBuilder) {
        this.formBuilder = formBuilder;
        this.columns = 1;
        this.repeat = 'horizontal';
        this.buttonPosition = 'bottom';
        this.visible = true;
        this.allowDelete = false;
        this.updateDataOnChange = false;
        this.submitChangesOnly = false;
        this.submitText = 'Save';
        this.deleteText = 'Delete';
        this.cancelText = 'Cancel';
        this.style = {};
        this.submit = new core_1.EventEmitter();
        this.delete = new core_1.EventEmitter();
        this.cancel = new core_1.EventEmitter();
        this.change = new core_1.EventEmitter();
        this.loadData = new core_1.EventEmitter();
        this.form = new forms_1.FormGroup({});
        this.valueChangesSubscriptions = [];
    }
    Object.defineProperty(FormComponent.prototype, "data", {
        set: function (data) {
            this.value = data;
            this.form = new forms_1.FormGroup({});
            this.createForm();
        },
        enumerable: true,
        configurable: true
    });
    FormComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.createForm();
        this.subscription = this.fields.changes.subscribe(function () { return _this.createForm(); });
    };
    FormComponent.prototype.createForm = function () {
        var _this = this;
        if (!this.fields) {
            return;
        }
        this.unsubscribe();
        var form = this.fields.reduce(function (form, field) {
            var value = _this.form.contains(field.property)
                ? _this.form.controls[field.property].value
                : get(_this.value, field.property, null);
            if (value == null && field.defaultValue != null) {
                value = field.defaultValue;
                if (typeof value == 'string' &&
                    (field instanceof integer_form_field_1.IntegerFormFieldComponent ||
                        field instanceof number_form_field_1.NumberFormFieldComponent ||
                        field instanceof boolean_form_field_1.BooleanFormFieldComponent)) {
                    try {
                        value = JSON.parse(value);
                    }
                    catch (err) { }
                }
            }
            if (value != null && field instanceof date_form_field_1.DateFormFieldComponent) {
                value = field.parse(value);
            }
            var validators = [];
            if (field.visible) {
                if (field.required) {
                    validators.push(forms_1.Validators.required);
                }
                if (field.compare) {
                    validators.push(compare(field.compare));
                }
                if (field instanceof number_form_field_1.NumberFormFieldComponent ||
                    field instanceof integer_form_field_1.IntegerFormFieldComponent) {
                    if (field.min != null) {
                        validators.push(forms_1.Validators.min(field.min));
                    }
                    if (field.max != null) {
                        validators.push(forms_1.Validators.max(field.max));
                    }
                }
            }
            form[field.property] = new forms_1.FormControl({ value: value, disabled: field.disabled }, validators);
            var control = form[field.property];
            _this.valueChangesSubscriptions.push(control.valueChanges.subscribe(function (value) {
                _this.updateValue(control, field.property, value);
            }));
            return form;
        }, {});
        this.form = this.formBuilder.group(form);
        var fields = this.fields.toArray().filter(function (field) { return field.visible; });
        var rowCount = Math.ceil(fields.length / this.columns);
        var rows = [];
        for (var rowIndex = 0; rowIndex < rowCount; rowIndex++) {
            rows[rowIndex] = [];
            for (var colIndex = 0; colIndex < this.columns; colIndex++) {
                var fieldIndex = this.repeat == 'horizontal'
                    ? rowIndex * this.columns + colIndex
                    : colIndex * rowCount + rowIndex;
                var field = fields[fieldIndex];
                if (!field) {
                    continue;
                }
                rows[rowIndex][colIndex] = {
                    title: field.title,
                    visible: field.visible,
                    property: field.property,
                    elementRef: field.elementRef
                };
            }
        }
        this.cols = Math.floor(12 / this.columns);
        this.rows = rows;
    };
    FormComponent.prototype.updateValue = function (control, property, value) {
        if (control.valid) {
            this.change.next({
                property: property,
                value: value
            });
            if (this.updateDataOnChange && this.value) {
                set(this.value, property, value);
            }
        }
    };
    FormComponent.prototype.ngOnDestroy = function () {
        this.subscription.unsubscribe();
        this.unsubscribe();
    };
    FormComponent.prototype.unsubscribe = function () {
        for (var _i = 0, _a = this.valueChangesSubscriptions; _i < _a.length; _i++) {
            var subscription = _a[_i];
            subscription.unsubscribe();
        }
        this.valueChangesSubscriptions = [];
    };
    FormComponent.prototype.changes = function () {
        var _this = this;
        var fields = this.fields.toArray();
        return Object.keys(this.form.controls).reduce(function (value, key, index) {
            var control = _this.form.controls[key];
            var field = fields[index];
            if (control.dirty || _this.submitChangesOnly == false) {
                if (field instanceof date_form_field_1.DateFormFieldComponent && control.value) {
                    if (field.utc) {
                        var date = new Date(Date.UTC(control.value.getFullYear(), control.value.getMonth(), control.value.getDate(), control.value.getHours(), control.value.getMinutes(), control.value.getSeconds(), control.value.getMilliseconds()));
                        set(value, key, date.toISOString());
                    }
                    else {
                        set(value, key, control.value.toISOString());
                    }
                }
                else {
                    set(value, key, control.value);
                }
            }
            return value;
        }, {});
    };
    FormComponent.prototype.onSubmit = function (event) {
        event.preventDefault();
        event.stopPropagation();
        this.submitted = true;
        var value = this.changes();
        if (this.form.valid) {
            if (this.submitChangesOnly) {
                this.submit.next(value);
            }
            else {
                if (this.value) {
                    Object.assign(this.value, value);
                }
                this.submit.next(this.value ? this.value : value);
            }
        }
    };
    FormComponent.prototype.onChange = function (event) {
        event.stopPropagation();
    };
    FormComponent.prototype.onCancel = function () {
        this.cancel.next();
    };
    FormComponent.prototype.onDelete = function () {
        this.delete.next(this.value);
    };
    FormComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'rz-form',
                    template: "<form [ngStyle]=\"style\" [formGroup]=\"form\" (submit)=\"onSubmit($event)\" (change)=\"onChange($event)\" class=\"ui-form\">\n      <div *ngIf=\"buttonPosition == 'top' || buttonPosition == 'topAndBottom'\" class=\"form-group row\">\n        <div class=\"col\" [ngClass]=\"{'offset-sm-3': columns < 2, 'd-flex justify-content-center align-items-center': columns > 1}\">\n          <rz-button buttonType=\"submit\" icon=\"save\" buttonStyle=\"primary\" [text]=\"submitText\"></rz-button>\n          <rz-button buttonStyle=\"danger\" *ngIf=\"allowDelete\" (click)=\"onDelete()\" [text]=\"deleteText\"></rz-button>\n          <rz-button buttonStyle=\"light\" (click)=\"onCancel()\" [text]=\"cancelText\"></rz-button>\n        </div>\n      </div>\n      <div class=\"form-row ui-fluid\" [ngClass]=\"{'form-group': columns < 2}\" *ngFor=\"let row of rows\">\n        <ng-container *ngFor=\"let cell of row\">\n          <div *ngIf=\"columns > 1\" class=\"form-group col-md-{{cols}}\" [rz-form-field]=\"cell.elementRef\">\n            <label class=\"form-label\" [attr.for]=\"cell.property\">{{cell.title}}</label>\n          </div>\n          <label *ngIf=\"columns < 2\" class=\"col-md-3 col-form-label\" [attr.for]=\"cell.property\">{{cell.title}}</label>\n          <div *ngIf=\"columns < 2\" class=\"col\" [rz-form-field]=\"cell.elementRef\"></div>\n        </ng-container>\n      </div>\n      <div *ngIf=\"buttonPosition == 'bottom' || buttonPosition == 'topAndBottom'\" class=\"form-group row\">\n        <div class=\"col\" [ngClass]=\"{'offset-sm-3': columns < 2, 'd-flex justify-content-center align-items-center': columns > 1}\">\n          <rz-button buttonType=\"submit\" icon=\"save\" buttonStyle=\"primary\" [text]=\"submitText\"></rz-button>\n          <rz-button buttonStyle=\"danger\" *ngIf=\"allowDelete\" (click)=\"onDelete()\" [text]=\"deleteText\"></rz-button>\n          <rz-button buttonStyle=\"light\" (click)=\"onCancel()\" [text]=\"cancelText\"></rz-button>\n        </div>\n      </div>\n    </form>"
                },] },
    ];
    /** @nocollapse */
    FormComponent.ctorParameters = function () { return [
        { type: forms_1.FormBuilder, },
    ]; };
    FormComponent.propDecorators = {
        "data": [{ type: core_1.Input },],
        "columns": [{ type: core_1.Input },],
        "repeat": [{ type: core_1.Input },],
        "buttonPosition": [{ type: core_1.Input },],
        "title": [{ type: core_1.Input },],
        "icon": [{ type: core_1.Input },],
        "titleBackground": [{ type: core_1.Input },],
        "titleColor": [{ type: core_1.Input },],
        "visible": [{ type: core_1.Input },],
        "allowDelete": [{ type: core_1.Input },],
        "updateDataOnChange": [{ type: core_1.Input },],
        "submitChangesOnly": [{ type: core_1.Input },],
        "submitText": [{ type: core_1.Input },],
        "deleteText": [{ type: core_1.Input },],
        "cancelText": [{ type: core_1.Input },],
        "style": [{ type: core_1.Input },],
        "submit": [{ type: core_1.Output },],
        "delete": [{ type: core_1.Output },],
        "cancel": [{ type: core_1.Output },],
        "change": [{ type: core_1.Output },],
        "loadData": [{ type: core_1.Output },],
        "fields": [{ type: core_1.ContentChildren, args: [form_field_1.FormFieldComponent,] },],
    };
    return FormComponent;
}());
exports.FormComponent = FormComponent;
var FormModule = /** @class */ (function () {
    function FormModule() {
    }
    FormModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [
                        common_1.CommonModule,
                        forms_1.ReactiveFormsModule,
                        shared_1.SharedModule,
                        button_1.ButtonModule,
                        numeric_1.NumericModule,
                        file_input_1.FileInputModule,
                        tristatecheckbox_1.TriStateCheckboxModule,
                        calendar_1.CalendarModule,
                        selectbutton_1.SelectButtonModule,
                        checkbox_1.CheckboxModule,
                        dropdown_1.DropdownModule,
                        multiselect_1.MultiSelectModule,
                        rating_1.RatingModule,
                        overlaypanel_1.OverlayPanelModule,
                        datatable_1.DataTableModule,
                        forms_1.FormsModule
                    ],
                    declarations: [
                        FormFieldDirective,
                        FormComponent,
                        integer_form_field_1.IntegerFormFieldComponent,
                        number_form_field_1.NumberFormFieldComponent,
                        boolean_form_field_1.BooleanFormFieldComponent,
                        date_form_field_1.DateFormFieldComponent,
                        string_form_field_1.StringFormFieldComponent,
                        text_form_field_1.TextFormFieldComponent,
                        password_form_field_1.PasswordFormFieldComponent,
                        selectbar_form_field_1.SelectBarFormFieldComponent,
                        selectbar_form_field_1.SelectBarFormFieldOptionComponent,
                        file_form_field_1.FileFormFieldComponent,
                        lookup_form_field_1.LookupFormFieldComponent,
                        lookup_popup_form_field_1.LookupPopupFormFieldComponent,
                        rating_form_field_1.RatingFormFieldComponent
                    ],
                    exports: [
                        FormComponent,
                        FormFieldDirective,
                        integer_form_field_1.IntegerFormFieldComponent,
                        number_form_field_1.NumberFormFieldComponent,
                        boolean_form_field_1.BooleanFormFieldComponent,
                        date_form_field_1.DateFormFieldComponent,
                        string_form_field_1.StringFormFieldComponent,
                        text_form_field_1.TextFormFieldComponent,
                        password_form_field_1.PasswordFormFieldComponent,
                        selectbar_form_field_1.SelectBarFormFieldComponent,
                        selectbar_form_field_1.SelectBarFormFieldOptionComponent,
                        file_form_field_1.FileFormFieldComponent,
                        lookup_form_field_1.LookupFormFieldComponent,
                        lookup_popup_form_field_1.LookupPopupFormFieldComponent,
                        rating_form_field_1.RatingFormFieldComponent
                    ]
                },] },
    ];
    /** @nocollapse */
    FormModule.ctorParameters = function () { return []; };
    return FormModule;
}());
exports.FormModule = FormModule;
