"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var common_1 = require("@angular/common");
var router_1 = require("@angular/router");
var animations_1 = require("@angular/animations");
var transition_1 = require("./transition");
var NavigationItemComponent = /** @class */ (function () {
    function NavigationItemComponent() {
    }
    Object.defineProperty(NavigationItemComponent.prototype, "path", {
        get: function () {
            return this.href || this.route;
        },
        set: function (value) {
            this.route = null;
            this.href = null;
            if (value) {
                if (value.startsWith('/') || value.includes('://')) {
                    this.href = value;
                }
                else {
                    this.route = value;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    NavigationItemComponent.propDecorators = {
        "text": [{ type: core_1.Input },],
        "image": [{ type: core_1.Input },],
        "icon": [{ type: core_1.Input },],
        "selected": [{ type: core_1.Input },],
        "template": [{ type: core_1.Input },],
        "path": [{ type: core_1.Input },],
    };
    return NavigationItemComponent;
}());
exports.NavigationItemComponent = NavigationItemComponent;
function childrenToItems(children) {
    if (children.length > 0) {
        return children.map(function (item) {
            return __assign({}, item, { path: item.path, items: childrenToItems(item.items.filter(function (child) { return child != item; })) });
        });
    }
    else {
        return null;
    }
}
exports.childrenToItems = childrenToItems;
function syncWithRouter(items, router, path) {
    if (path === void 0) { path = []; }
    items.forEach(function (item) {
        if (item.route && router.isActive(item.route, /*exact*/ /*exact*/ true)) {
            path.forEach(function (parent) {
                parent.selected = true;
                parent.items = parent.items.slice();
            });
        }
        else if (Array.isArray(item.items)) {
            path.push(item);
            syncWithRouter(item.items, router, path);
            path.pop();
        }
    });
}
exports.syncWithRouter = syncWithRouter;
var SubMenuComponent = /** @class */ (function () {
    function SubMenuComponent() {
        this.horizontal = false;
        this.selectedIndex = null;
        this.closeOnClick = true;
        this.navigate = new core_1.EventEmitter();
        this.click = new core_1.EventEmitter();
        this.items = [];
        this.active = false;
    }
    Object.defineProperty(SubMenuComponent.prototype, "children", {
        set: function (value) {
            this.items = value;
            if (value) {
                this.selectedIndex = value.findIndex(function (item) { return item.selected; });
            }
        },
        enumerable: true,
        configurable: true
    });
    SubMenuComponent.prototype.onMouseEnter = function (index) {
        if (this.horizontal && this.active) {
            this.selectedIndex = index;
        }
    };
    SubMenuComponent.prototype.onClick = function (event, item, index) {
        event.stopPropagation();
        if (this.horizontal) {
            this.active = !this.active;
        }
        this.selectedIndex = this.selectedIndex == index ? null : index;
        if (!item.items) {
            this.navigate.next();
        }
        if (!item.route && !item.href) {
            this.click.next(__assign({}, item, { index: index }));
        }
    };
    SubMenuComponent.prototype.close = function () {
        if (this.closeOnClick) {
            this.selectedIndex = null;
            this.active = false;
            this.navigate.next();
        }
    };
    SubMenuComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: '[rz-submenu]',
                    template: "\n  <li *ngFor=\"let item of items; index as index\" class=\"navigation-item\"\n      [ngClass]=\"{'navigation-item-active': selectedIndex == index}\">\n    <div class=\"navigation-item-wrapper\"\n      [routerLinkActiveOptions]=\"{exact: true}\"\n      [routerLinkActive]=\"item.route ? 'navigation-item-wrapper-active' : ''\">\n      <a *ngIf=\"item.route\"\n        (click)=\"onClick($event, item, index)\"\n        (mouseenter)=\"onMouseEnter(index)\"\n        [style.paddingLeft.rem]=\"level\"\n        [routerLinkActiveOptions]=\"{exact: true}\"\n        [routerLinkActive]=\"item.route ? 'navigation-item-link-active' : ''\"\n        [routerLink]=\"['/' + item.route]\"\n        class=\"navigation-item-link\">\n        <i class=\"material-icons navigation-item-icon\" *ngIf=\"item.icon\">{{item.icon}}</i>\n        <img class=\"navigation-item-icon\" [src]=\"item.image\" *ngIf=\"item.image\">\n        <span class=\"navigation-item-text\">{{item.text}}</span>\n        <i [@rotate]=\"selectedIndex == index ? 'active' : 'inactive'\" class=\"material-icons navigation-item-icon-children\" *ngIf=\"item.items\">keyboard_arrow_down</i>\n      </a>\n      <a *ngIf=\"item.href\"\n        (click)=\"onClick($event, item, index)\"\n        (mouseenter)=\"onMouseEnter(index)\"\n        [style.paddingLeft.rem]=\"level\"\n        class=\"navigation-item-link\" [attr.href]=\"item.href\">\n        <i class=\"material-icons navigation-item-icon\" *ngIf=\"item.icon\">{{item.icon}}</i>\n        <img class=\"navigation-item-icon\" [src]=\"item.image\" *ngIf=\"item.image\">\n        <span class=\"navigation-item-text\">{{item.text}}</span>\n        <i [@rotate]=\"selectedIndex == index ? 'active' : 'inactive'\" class=\"material-icons navigation-item-icon-children\" *ngIf=\"item.items\">keyboard_arrow_down</i>\n      </a>\n      <div *ngIf=\"!item.href && !item.route\"\n        (click)=\"onClick($event, item, index)\"\n        (mouseenter)=\"onMouseEnter(index)\"\n        [style.paddingLeft.rem]=\"level\"\n        class=\"navigation-item-link\">\n        <i class=\"material-icons navigation-item-icon\" *ngIf=\"item.icon\">{{item.icon}}</i>\n        <img class=\"navigation-item-icon\" [src]=\"item.image\" *ngIf=\"item.image\">\n        <span *ngIf=\"!item.template\" class=\"navigation-item-text\">{{item.text}}</span>\n        <div class=\"item-text\" *ngIf=\"item.template\">\n          <ng-template [ngTemplateOutlet]=\"item.template\"></ng-template>\n        </div>\n        <i [@rotate]=\"selectedIndex == index ? 'active' : 'inactive'\" class=\"material-icons navigation-item-icon-children\" *ngIf=\"item.items\">keyboard_arrow_down</i>\n      </div>\n    </div>\n    <ul rz-submenu *ngIf=\"item.items\" class=\"navigation-menu\" [items]=\"item.items\"\n        [closeOnClick]=\"closeOnClick\"\n        (navigate)=\"close()\"\n        (click)=\"click.next($event)\"\n        [@open]=\"selectedIndex == index ? 'visible': 'hidden'\">\n    </ul>\n  </li>\n  ",
                    animations: [
                        animations_1.trigger('rotate', [
                            animations_1.state('active', animations_1.style({
                                transform: 'rotate(-180deg)'
                            })),
                            animations_1.state('inactive', animations_1.style({
                                transform: 'rotate(0deg)'
                            })),
                            animations_1.transition('active <=> inactive', animations_1.animate(transition_1.EASING))
                        ]),
                        animations_1.trigger('open', [
                            animations_1.state('visible', animations_1.style({
                                height: '*'
                            })),
                            animations_1.state('hidden', animations_1.style({
                                height: '0px'
                            })),
                            animations_1.transition('visible <=> hidden', animations_1.animate(transition_1.EASING))
                        ])
                    ]
                },] },
    ];
    /** @nocollapse */
    SubMenuComponent.ctorParameters = function () { return []; };
    SubMenuComponent.propDecorators = {
        "horizontal": [{ type: core_1.Input },],
        "selectedIndex": [{ type: core_1.Input },],
        "closeOnClick": [{ type: core_1.Input },],
        "navigate": [{ type: core_1.Output },],
        "click": [{ type: core_1.Output },],
        "children": [{ type: core_1.Input, args: ['items',] },],
        "routerLink": [{ type: core_1.ViewChild, args: [router_1.RouterLinkActive,] },],
    };
    return SubMenuComponent;
}());
exports.SubMenuComponent = SubMenuComponent;
var NavigationModule = /** @class */ (function () {
    function NavigationModule() {
    }
    NavigationModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [common_1.CommonModule, router_1.RouterModule],
                    declarations: [SubMenuComponent],
                    exports: [SubMenuComponent]
                },] },
    ];
    /** @nocollapse */
    NavigationModule.ctorParameters = function () { return []; };
    return NavigationModule;
}());
exports.NavigationModule = NavigationModule;
