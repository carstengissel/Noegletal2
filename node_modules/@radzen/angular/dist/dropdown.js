"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var common_1 = require("@angular/common");
var forms_1 = require("@angular/forms");
var dropdown_1 = require("primeng/dropdown");
var multiselect_1 = require("primeng/multiselect");
var get = require("lodash/get");
var set = require("lodash/set");
var form_component_1 = require("./form-component");
var DropDownComponent = /** @class */ (function (_super) {
    __extends(DropDownComponent, _super);
    function DropDownComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.style = {};
        _this.allowFiltering = false;
        _this.multiple = false;
        _this.allowClear = false;
        return _this;
    }
    Object.defineProperty(DropDownComponent.prototype, "value", {
        get: function () {
            return this.innerValue;
        },
        set: function (value) {
            var _this = this;
            if (value != this.innerValue) {
                this.innerValue = value;
                this.onChange(value);
                if (this.valueProperty) {
                    var data = this.data ? this.data : [];
                    var item = data.find(function (item) { return get(item, _this.valueProperty) == value; });
                    if (!item) {
                        item = {};
                        set(item, this.valueProperty, value);
                    }
                    this.change.next(item);
                }
                else {
                    this.change.next(value);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    DropDownComponent.prototype.text = function (item) {
        return this.textProperty ? get(item, this.textProperty) : item;
    };
    DropDownComponent.prototype.ngOnChanges = function (changes) {
        if (changes.hasOwnProperty('data') ||
            changes.hasOwnProperty('textProperty')) {
            this.setOptions();
        }
    };
    DropDownComponent.prototype.onPanelShow = function () {
        this.multiSelect.panel.style.minWidth = this.multiSelect.container.offsetWidth + "px";
    };
    DropDownComponent.prototype.setOptions = function () {
        var _this = this;
        if (!this.data) {
            return;
        }
        this.options = this.data.map(function (item) {
            return {
                label: _this.textProperty ? get(item, _this.textProperty) : item,
                value: _this.valueProperty ? get(item, _this.valueProperty) : item
            };
        });
    };
    DropDownComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'rz-dropdown',
                    template: "\n    <p-dropdown\n      *ngIf=\"!multiple\"\n      appendTo=\"body\"\n      (blur)=\"onTouched()\"\n      [(ngModel)]=\"value\"\n      [style]=\"style\"\n      [autoWidth]=\"false\"\n      [options]=\"options\"\n      [inputId]=\"name\"\n      [filter]=\"allowFiltering\"\n      [showClear]=\"allowClear\"\n      [placeholder]=\"placeholder\"\n      [filterPlaceholder]=\"filterPlaceholder\"\n      [disabled]=\"disabled\"\n    >\n      <ng-template *ngIf=\"template\" pTemplate=\"item\" let-data>\n        <ng-template\n          [ngTemplateOutlet]=\"template\"\n          [ngTemplateOutletContext]=\"{$implicit: data.value}\"\n        ></ng-template>\n      </ng-template>\n    </p-dropdown>\n    <p-multiSelect\n      *ngIf=\"multiple\"\n      appendTo=\"body\"\n      (blur)=\"onTouched()\"\n      [(ngModel)]=\"value\"\n      [style]=\"style\"\n      [options]=\"options\"\n      [inputId]=\"name\"\n      [filter]=\"allowFiltering\"\n      [defaultLabel]=\"placeholder\"\n      [filterPlaceHolder]=\"filterPlaceholder\"\n      (onPanelShow)=\"onPanelShow()\"\n      [disabled]=\"disabled\"\n    >\n      <ng-template *ngIf=\"template\" pTemplate=\"item\" let-data>\n        <ng-template\n          [ngTemplateOutlet]=\"template\"\n          [ngTemplateOutletContext]=\"{$implicit: data.value}\"\n        ></ng-template>\n      </ng-template>\n    </p-multiSelect>\n  ",
                    providers: [
                        {
                            provide: forms_1.NG_VALUE_ACCESSOR,
                            useExisting: core_1.forwardRef(function () { return DropDownComponent; }),
                            multi: true
                        },
                        {
                            provide: form_component_1.FormComponent,
                            useExisting: core_1.forwardRef(function () { return DropDownComponent; })
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    DropDownComponent.ctorParameters = function () { return []; };
    DropDownComponent.propDecorators = {
        "style": [{ type: core_1.Input },],
        "data": [{ type: core_1.Input },],
        "placeholder": [{ type: core_1.Input },],
        "textProperty": [{ type: core_1.Input },],
        "valueProperty": [{ type: core_1.Input },],
        "allowFiltering": [{ type: core_1.Input },],
        "filterPlaceholder": [{ type: core_1.Input },],
        "multiple": [{ type: core_1.Input },],
        "allowClear": [{ type: core_1.Input },],
        "template": [{ type: core_1.ContentChild, args: [core_1.TemplateRef,] },],
        "multiSelect": [{ type: core_1.ViewChild, args: [multiselect_1.MultiSelect,] },],
        "value": [{ type: core_1.Input },],
    };
    return DropDownComponent;
}(form_component_1.FormComponent));
exports.DropDownComponent = DropDownComponent;
var DropDownModule = /** @class */ (function () {
    function DropDownModule() {
    }
    DropDownModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [
                        common_1.CommonModule,
                        forms_1.FormsModule,
                        dropdown_1.DropdownModule,
                        multiselect_1.MultiSelectModule
                    ],
                    declarations: [DropDownComponent],
                    exports: [DropDownComponent]
                },] },
    ];
    /** @nocollapse */
    DropDownModule.ctorParameters = function () { return []; };
    return DropDownModule;
}());
exports.DropDownModule = DropDownModule;
