"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var common_1 = require("@angular/common");
var treetable_1 = require("primeng/treetable");
var TreeGridColumn = /** @class */ (function () {
    function TreeGridColumn() {
    }
    TreeGridColumn.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'rz-treegrid-column',
                    template: ''
                },] },
    ];
    /*@ContentChild(TemplateRef) template: TemplateRef<any>;
    
          <ng-template *ngIf="column.template" pTemplate="body" let-node="rowData">
              <ng-template [ngTemplateOutlet]="column.template" [ngOutletContext]="{ $implicit: node.data }">
              </ng-template>
          </ng-template>
      */
    /** @nocollapse */
    TreeGridColumn.ctorParameters = function () { return []; };
    TreeGridColumn.propDecorators = {
        "title": [{ type: core_1.Input },],
        "property": [{ type: core_1.Input },],
    };
    return TreeGridColumn;
}());
exports.TreeGridColumn = TreeGridColumn;
var TreeGridComponent = /** @class */ (function () {
    function TreeGridComponent() {
        this.style = {};
        this.data = [];
        this.nodeExpand = new core_1.EventEmitter();
        this.nodeSelect = new core_1.EventEmitter();
        this.nodeLoaded = new core_1.EventEmitter();
        this.results = [];
    }
    TreeGridComponent.prototype.ngAfterContentInit = function () {
        this.update();
    };
    TreeGridComponent.prototype.ngOnChanges = function (changes) {
        this.update();
    };
    TreeGridComponent.prototype.update = function () {
        var _this = this;
        if (this.data) {
            this.results = this.data.map(function (item) {
                var node = {
                    data: item,
                    children: [],
                    leaf: false
                };
                _this.nodeLoaded.next(new TreeGridNodeLoadedData(node, 0));
                return node;
            });
        }
    };
    TreeGridComponent.prototype.onNodeSelect = function (event) {
        if (event.node) {
            this.nodeSelect.next({
                data: event.node.data,
                level: geLevelIndex(event.node)
            });
        }
    };
    TreeGridComponent.prototype.onNodeExpand = function (event) {
        if (event.node) {
            var level = geLevelIndex(event.node);
            this.nodeExpand.next(new TreeGridLoadChildrenData(level, event.node, this.nodeLoaded));
        }
    };
    TreeGridComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'rz-treegrid',
                    template: "<p-treeTable\n    [value]=\"results\"\n    selectionMode=\"single\"\n    [(selection)]=\"selectedNode\"\n    (onNodeSelect)=\"onNodeSelect($event)\"\n    (onNodeExpand)=\"onNodeExpand($event)\"\n    [style]=\"style\">\n    <p-column *ngFor=\"let column of columns\" [field]=\"column.property\" [header]=\"column.title\"></p-column>\n  </p-treeTable>"
                },] },
    ];
    /** @nocollapse */
    TreeGridComponent.ctorParameters = function () { return []; };
    TreeGridComponent.propDecorators = {
        "style": [{ type: core_1.Input },],
        "data": [{ type: core_1.Input },],
        "nodeExpand": [{ type: core_1.Output },],
        "nodeSelect": [{ type: core_1.Output },],
        "nodeLoaded": [{ type: core_1.Output },],
        "columns": [{ type: core_1.ContentChildren, args: [TreeGridColumn,] },],
    };
    return TreeGridComponent;
}());
exports.TreeGridComponent = TreeGridComponent;
var TreeGridNodeLoadedData = /** @class */ (function () {
    function TreeGridNodeLoadedData(node, level) {
        this.node = node;
        this.data = node.data;
        this.level = level;
    }
    Object.defineProperty(TreeGridNodeLoadedData.prototype, "leaf", {
        get: function () {
            return this.node.leaf;
        },
        set: function (value) {
            this.node.leaf = value;
        },
        enumerable: true,
        configurable: true
    });
    return TreeGridNodeLoadedData;
}());
var TreeGridLoadChildrenData = /** @class */ (function () {
    function TreeGridLoadChildrenData(level, node, nodeLoaded) {
        this.level = level;
        this.data = node.data;
        this.node = node;
        this.nodeLoaded = nodeLoaded;
    }
    Object.defineProperty(TreeGridLoadChildrenData.prototype, "children", {
        get: function () {
            return this.node.children;
        },
        set: function (value) {
            var _this = this;
            if (value != this.node.children) {
                this.node.children = value.map(function (item) {
                    var node = {
                        data: item,
                        children: [],
                        leaf: false
                    };
                    _this.nodeLoaded.next(new TreeGridNodeLoadedData(node, _this.level + 1));
                    return node;
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    return TreeGridLoadChildrenData;
}());
function geLevelIndex(node) {
    var i = 0;
    while (node && node.parent) {
        node = node.parent;
        i++;
    }
    return i;
}
var TreeGridModule = /** @class */ (function () {
    function TreeGridModule() {
    }
    TreeGridModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [common_1.CommonModule, treetable_1.TreeTableModule],
                    declarations: [TreeGridColumn, TreeGridComponent],
                    exports: [TreeGridColumn, TreeGridComponent]
                },] },
    ];
    /** @nocollapse */
    TreeGridModule.ctorParameters = function () { return []; };
    return TreeGridModule;
}());
exports.TreeGridModule = TreeGridModule;
