"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var common_1 = require("@angular/common");
var forms_1 = require("@angular/forms");
var calendar_1 = require("primeng/calendar");
var form_component_1 = require("./form-component");
function parse(value) {
    if (value == null) {
        return null;
    }
    return new Date(Date.parse(value));
}
function toUTC(value) {
    if (value == null) {
        return value;
    }
    return new Date(Date.UTC(value.getFullYear(), value.getMonth(), value.getDate(), value.getHours(), value.getMinutes(), value.getSeconds(), value.getMilliseconds()));
}
var DatePickerComponent = /** @class */ (function (_super) {
    __extends(DatePickerComponent, _super);
    function DatePickerComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.style = {};
        _this.utc = true;
        _this.dateFormat = 'mm/dd/yy';
        _this.showTime = false;
        _this.showSeconds = false;
        _this.selectionMode = 'single';
        _this.yearRange = '1950:2050';
        _this.placeholder = '';
        return _this;
    }
    Object.defineProperty(DatePickerComponent.prototype, "value", {
        get: function () {
            return this.innerValue;
        },
        set: function (value) {
            this.innerValue = value;
            if (this.utc) {
                if (Array.isArray(value)) {
                    value = value.map(toUTC);
                }
                else {
                    value = toUTC(value);
                }
            }
            this.onChange(value);
            this.change.next(value);
        },
        enumerable: true,
        configurable: true
    });
    DatePickerComponent.prototype.writeValue = function (value) {
        this.innerValue = typeof value == 'string' ? parse(value) : value;
    };
    DatePickerComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'rz-datepicker',
                    template: "\n    <p-calendar appendTo=\"body\"\n      [style]=\"style\"\n      [styleClass]=\"disabled ? 'ui-state-disabled' : null\"\n      [showIcon]=\"true\"\n      [inputId]=\"name\"\n      [(ngModel)]=\"value\"\n      [placeholder]=\"placeholder\"\n      [dateFormat]=\"dateFormat\"\n      [selectionMode]=\"selectionMode\"\n      [showTime]=\"showTime\"\n      [showSeconds]=\"showSeconds\"\n      [disabled]=\"disabled\"\n      [yearNavigator]=\"true\"\n      [yearRange]=\"yearRange\"\n      [monthNavigator]=\"true\"\n      (onBlur)=\"onTouched()\">\n    </p-calendar>\n  ",
                    providers: [
                        {
                            provide: forms_1.NG_VALUE_ACCESSOR,
                            useExisting: core_1.forwardRef(function () { return DatePickerComponent; }),
                            multi: true
                        },
                        {
                            provide: form_component_1.FormComponent,
                            useExisting: core_1.forwardRef(function () { return DatePickerComponent; })
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    DatePickerComponent.ctorParameters = function () { return []; };
    DatePickerComponent.propDecorators = {
        "style": [{ type: core_1.Input },],
        "utc": [{ type: core_1.Input },],
        "dateFormat": [{ type: core_1.Input },],
        "showTime": [{ type: core_1.Input },],
        "showSeconds": [{ type: core_1.Input },],
        "selectionMode": [{ type: core_1.Input },],
        "yearRange": [{ type: core_1.Input },],
        "value": [{ type: core_1.Input },],
        "placeholder": [{ type: core_1.Input },],
    };
    return DatePickerComponent;
}(form_component_1.FormComponent));
exports.DatePickerComponent = DatePickerComponent;
var DatePickerModule = /** @class */ (function () {
    function DatePickerModule() {
    }
    DatePickerModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [common_1.CommonModule, forms_1.FormsModule, calendar_1.CalendarModule],
                    declarations: [DatePickerComponent],
                    exports: [DatePickerComponent]
                },] },
    ];
    /** @nocollapse */
    DatePickerModule.ctorParameters = function () { return []; };
    return DatePickerModule;
}());
exports.DatePickerModule = DatePickerModule;
