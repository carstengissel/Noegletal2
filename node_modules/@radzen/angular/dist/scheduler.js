"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var common_1 = require("@angular/common");
var get = require("lodash/get");
var set = require("lodash/set");
var jQuery = require("jquery");
require('fullcalendar');
var schedule_1 = require("primeng/schedule");
global.jQuery = jQuery;
var SchedulerComponent = /** @class */ (function () {
    function SchedulerComponent() {
        this.data = [];
        this.editable = true;
        this.weekends = true;
        this.locale = 'en';
        this.firstDayOfWeek = 0;
        this.eventSelect = new core_1.EventEmitter();
        this.eventUpdate = new core_1.EventEmitter();
        this.eventAdd = new core_1.EventEmitter();
        this.header = {
            left: 'prev,next today',
            center: 'title',
            right: 'month,agendaWeek,agendaDay'
        };
    }
    Object.defineProperty(SchedulerComponent.prototype, "style", {
        get: function () {
            return this.innerStyle;
        },
        set: function (style) {
            this.innerStyle = style;
            if (style && style.hasOwnProperty('height')) {
                var height = style.height;
                if (/px/.test(height)) {
                    this.height = parseInt(height);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    SchedulerComponent.prototype.onEventDrop = function (e) {
        this.update(e);
    };
    SchedulerComponent.prototype.onEventResize = function (e) {
        this.update(e);
    };
    SchedulerComponent.prototype.onEventClick = function (e) {
        this.eventSelect.emit(e.calEvent.data);
    };
    SchedulerComponent.prototype.onDayClick = function (e) {
        var date = e.date, view = e.view;
        var start = date.format();
        var end = start;
        if (view.type == 'month') {
            end = date.add(1, 'days').format();
        }
        else if (view.type == 'agendaWeek' || view.type == 'agendaDay') {
            end = date.add(30, 'minutes').format();
        }
        this.eventAdd.emit({ start: start, end: end });
    };
    SchedulerComponent.prototype.ngOnChanges = function () {
        this.setEvents();
    };
    SchedulerComponent.prototype.update = function (e) {
        var event = e.event;
        var data = event.data;
        if (event.start != null) {
            set(data, this.startProperty, event.start.format());
        }
        if (event.end != null) {
            set(data, this.endProperty, event.end.format());
        }
        this.eventUpdate.emit(data);
    };
    SchedulerComponent.prototype.setEvents = function () {
        var _this = this;
        if (!this.data) {
            return;
        }
        this.events = this.data
            .map(function (data) {
            return {
                data: data,
                id: _this.idProperty ? get(data, _this.idProperty) : '',
                title: _this.titleProperty ? get(data, _this.titleProperty) : '',
                start: _this.startProperty ? get(data, _this.startProperty) : '',
                end: _this.endProperty ? get(data, _this.endProperty) : ''
            };
        })
            .filter(function (event) { return event.start != null; });
    };
    SchedulerComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'rz-scheduler',
                    template: "<div [ngStyle]=\"style\">\n    <p-schedule\n    [locale]=\"locale\"\n    [options]=\"{firstDay: firstDayOfWeek}\"\n    [header]=\"header\"\n    [height]=\"height\"\n    [weekends]=\"weekends\"\n    timezone=\"UTC\"\n    [editable]=\"editable\"\n    [events]=\"events\"\n    [defaultDate]=\"defaultDate\"\n    (onEventDrop)=\"onEventDrop($event)\"\n    (onEventResize)=\"onEventResize($event)\"\n    (onDayClick)=\"onDayClick($event)\"\n    (onEventClick)=\"onEventClick($event)\">\n    </p-schedule>\n  </div>"
                },] },
    ];
    /** @nocollapse */
    SchedulerComponent.ctorParameters = function () { return []; };
    SchedulerComponent.propDecorators = {
        "style": [{ type: core_1.Input },],
        "data": [{ type: core_1.Input },],
        "startProperty": [{ type: core_1.Input },],
        "idProperty": [{ type: core_1.Input },],
        "endProperty": [{ type: core_1.Input },],
        "titleProperty": [{ type: core_1.Input },],
        "defaultDate": [{ type: core_1.Input },],
        "editable": [{ type: core_1.Input },],
        "weekends": [{ type: core_1.Input },],
        "locale": [{ type: core_1.Input },],
        "firstDayOfWeek": [{ type: core_1.Input },],
        "eventSelect": [{ type: core_1.Output },],
        "eventUpdate": [{ type: core_1.Output },],
        "eventAdd": [{ type: core_1.Output },],
    };
    return SchedulerComponent;
}());
exports.SchedulerComponent = SchedulerComponent;
var SchedulerModule = /** @class */ (function () {
    function SchedulerModule() {
    }
    SchedulerModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [common_1.CommonModule, schedule_1.ScheduleModule],
                    declarations: [SchedulerComponent],
                    exports: [SchedulerComponent]
                },] },
    ];
    /** @nocollapse */
    SchedulerModule.ctorParameters = function () { return []; };
    return SchedulerModule;
}());
exports.SchedulerModule = SchedulerModule;
