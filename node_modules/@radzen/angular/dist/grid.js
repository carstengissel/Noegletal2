"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var common_1 = require("@angular/common");
var forms_1 = require("@angular/forms");
var listbox_1 = require("primeng/listbox");
var overlaypanel_1 = require("primeng/overlaypanel");
var datatable_1 = require("primeng/datatable");
var calendar_1 = require("primeng/calendar");
var tristatecheckbox_1 = require("primeng/tristatecheckbox");
var get = require("lodash/get");
var shared_1 = require("./shared");
var button_1 = require("./button");
var numeric_1 = require("./numeric");
var GridTemplateDirective = /** @class */ (function () {
    function GridTemplateDirective(template) {
        this.template = template;
    }
    GridTemplateDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[gridTemplate]'
                },] },
    ];
    /** @nocollapse */
    GridTemplateDirective.ctorParameters = function () { return [
        { type: core_1.TemplateRef, },
    ]; };
    return GridTemplateDirective;
}());
exports.GridTemplateDirective = GridTemplateDirective;
var GridColumnFooterTemplate = /** @class */ (function () {
    function GridColumnFooterTemplate(templateRef) {
        this.templateRef = templateRef;
    }
    GridColumnFooterTemplate.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[gridColumnFooterTemplate]'
                },] },
    ];
    /** @nocollapse */
    GridColumnFooterTemplate.ctorParameters = function () { return [
        { type: core_1.TemplateRef, },
    ]; };
    return GridColumnFooterTemplate;
}());
exports.GridColumnFooterTemplate = GridColumnFooterTemplate;
var GridColumnTemplate = /** @class */ (function () {
    function GridColumnTemplate(templateRef) {
        this.templateRef = templateRef;
    }
    GridColumnTemplate.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[gridColumnTemplate]'
                },] },
    ];
    /** @nocollapse */
    GridColumnTemplate.ctorParameters = function () { return [
        { type: core_1.TemplateRef, },
    ]; };
    return GridColumnTemplate;
}());
exports.GridColumnTemplate = GridColumnTemplate;
function getUnit(value) {
    var unit = value.match(/\D+$/);
    return unit ? unit[0] : 'px';
}
function getNumeric(value) {
    var match = value.match(/^\d+/);
    var numeric = match ? match[0] : '0';
    return parseFloat(numeric);
}
var GridColumn = /** @class */ (function () {
    function GridColumn(grid) {
        this.grid = grid;
        this.type = 'string';
        this.sortable = true;
        this.filterable = true;
    }
    Object.defineProperty(GridColumn.prototype, "style", {
        get: function () {
            var style = {};
            var width = this.width;
            if (width == null &&
                this.grid &&
                !this.grid.allowColumnResize &&
                this.grid.columnWidth != 'auto') {
                width = this.grid.columnWidth;
            }
            if (width != null) {
                var value = width.toString();
                var unit = getUnit(value);
                var numeric = getNumeric(value);
                style.width = "" + numeric + unit;
            }
            return style;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GridColumn.prototype, "filterOperator", {
        get: function () {
            if (!this._filterOperator) {
                this._filterOperator =
                    this.type == 'string' && !this.format ? 'contains' : 'eq';
            }
            return this._filterOperator;
        },
        set: function (operator) {
            this._filterOperator = operator;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GridColumn.prototype, "filterOperators", {
        get: function () {
            if (!this._filterOperators) {
                this._filterOperators = (this.type == 'string' && !this.format
                    ? [
                        {
                            label: 'Starts with',
                            value: 'startswith'
                        },
                        {
                            label: 'Contains',
                            value: 'contains'
                        },
                        {
                            label: 'Ends with',
                            value: 'endswith'
                        }
                    ]
                    : []).concat([
                    {
                        label: 'Equals',
                        value: 'eq'
                    },
                    {
                        label: 'Not equals',
                        value: 'ne'
                    },
                    {
                        label: 'Less than',
                        value: 'lt'
                    },
                    {
                        label: 'Less than or equals',
                        value: 'le'
                    },
                    {
                        label: 'Greater than',
                        value: 'gt'
                    },
                    {
                        label: 'Greater than or equals',
                        value: 'ge'
                    }
                ]);
            }
            return this._filterOperators;
        },
        enumerable: true,
        configurable: true
    });
    GridColumn.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'rz-grid-column',
                    template: ''
                },] },
    ];
    /** @nocollapse */
    GridColumn.ctorParameters = function () { return [
        { type: GridComponent, decorators: [{ type: core_1.Host },] },
    ]; };
    GridColumn.propDecorators = {
        "title": [{ type: core_1.Input },],
        "type": [{ type: core_1.Input },],
        "format": [{ type: core_1.Input },],
        "property": [{ type: core_1.Input },],
        "sortProperty": [{ type: core_1.Input },],
        "filterProperty": [{ type: core_1.Input },],
        "filterValue": [{ type: core_1.Input },],
        "sortable": [{ type: core_1.Input },],
        "filterable": [{ type: core_1.Input },],
        "width": [{ type: core_1.Input },],
        "filterOperator": [{ type: core_1.Input },],
        "template": [{ type: core_1.ContentChild, args: [GridColumnTemplate,] },],
        "footerTemplate": [{ type: core_1.ContentChild, args: [GridColumnFooterTemplate,] },],
    };
    return GridColumn;
}());
exports.GridColumn = GridColumn;
var GridComponent = /** @class */ (function () {
    function GridComponent() {
        this.style = {};
        this.allowDelete = false;
        this.allowAdd = false;
        this.allowSorting = false;
        this.allowMultiSorting = false;
        this.allowPaging = false;
        this.allowFiltering = false;
        this.allowScrolling = true;
        this.allowColumnResize = false;
        this.allowColumnReorder = false;
        this.applyFilterText = 'Apply';
        this.clearFilterText = 'Clear';
        this.filterDateFormat = 'mm/dd/yy';
        this.columnResizeMode = 'fit';
        this.columnWidth = 'auto';
        this.pageSizeOptions = null;
        this.visible = true;
        this.emptyText = 'No records to display.';
        this.addText = 'Add';
        this.expandableGroups = false;
        this.rowSelect = new core_1.EventEmitter();
        this.rowDoubleClick = new core_1.EventEmitter();
        this.rowExpand = new core_1.EventEmitter();
        this.rowCollapse = new core_1.EventEmitter();
        this.delete = new core_1.EventEmitter();
        this.add = new core_1.EventEmitter();
        this.loadData = new core_1.EventEmitter();
        this.valueChange = new core_1.EventEmitter();
        this.loading = false;
        this.skip = 0;
        this.top = 10;
        this.multiSortMeta = [];
        this.state = {
            skip: 0,
            top: 0,
            filter: [],
            sort: []
        };
        this.orderBy = '';
        this.filter = '';
        var now = new Date();
        this.today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    }
    Object.defineProperty(GridComponent.prototype, "pageSize", {
        get: function () {
            return this.top;
        },
        set: function (value) {
            this.top = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GridComponent.prototype, "styleClass", {
        get: function () {
            var classNames = [];
            if (this.allowPaging) {
                classNames.push('ui-has-paginator');
            }
            if (this.style && this.style.hasOwnProperty('height')) {
                classNames.push('ui-has-height');
            }
            if (classNames.length) {
                return classNames.join(' ');
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GridComponent.prototype, "value", {
        get: function () {
            return this.selection;
        },
        set: function (value) {
            if (this.selection !== value) {
                this.selection = value;
                this.valueChange.emit(value);
            }
        },
        enumerable: true,
        configurable: true
    });
    GridComponent.prototype.groupHeader = function (data) {
        return get(data, this.groupProperty);
    };
    GridComponent.prototype.onSelect = function (value) {
        if (value) {
            this.value = value;
            this.rowSelect.next(value);
        }
    };
    GridComponent.prototype.onRowExpand = function (value) {
        this.rowExpand.next(value);
    };
    GridComponent.prototype.onRowDoubleClick = function (value) {
        this.rowDoubleClick.next(value);
    };
    GridComponent.prototype.onRowCollapse = function (value) {
        this.rowCollapse.next(value);
    };
    GridComponent.prototype.ngOnChanges = function (changes) {
        if (changes.hasOwnProperty('data')) {
            this.loading = false;
        }
    };
    GridComponent.prototype.onDelete = function (value) {
        this.delete.next(value);
    };
    GridComponent.prototype.onAdd = function (value) {
        this.add.next(value);
    };
    GridComponent.prototype.onPage = function (event) {
        if (this.skip != event.first || this.top != event.rows) {
            this.skip = event.first;
            this.top = event.rows;
            this.callLoadData();
        }
    };
    GridComponent.prototype.onSort = function (event) {
        if (this.allowSorting && event.field) {
            var field = event.multisortmeta.find(function (i) { return i && i.field == event.field; });
            if (!this.allowMultiSorting) {
                event.multisortmeta.splice(event.multisortmeta.indexOf(field), 1);
                field = null;
            }
            if (field) {
                if (field.order == -1 && event.order == 1) {
                    event.multisortmeta.splice(event.multisortmeta.indexOf(field), 1);
                }
                else {
                    field.order = event.order;
                }
            }
            else {
                event.multisortmeta.push({ field: event.field, order: event.order });
            }
        }
        this.orderBy = this.allowSorting
            ? orderByToString(event.multisortmeta)
            : '';
        this.skip = 0;
        this.callLoadData();
    };
    GridComponent.prototype.onFilter = function (event) {
        this.rawFilters = event.filters;
        var filter = this.allowFiltering
            ? filtersToString(event.filters, this.columns.toArray())
            : '';
        this.filter = filter;
        this.skip = 0;
        this.callLoadData();
    };
    GridComponent.prototype.onDateFilter = function (dt, value, column, op) {
        op.hide();
        column.filterValue = value;
        dt.filter(value == '' ? null : value, column.filterProperty || column.property, this.filterOperator(dt, column.filterOperator));
    };
    GridComponent.prototype.onBooleanFilter = function (dt, value, column) {
        column.filterValue = value;
        dt.filter(value, column.filterProperty || column.property, this.filterOperator(dt, column.filterOperator));
    };
    GridComponent.prototype.onStringFilter = function (dt, value, column) {
        column.filterValue = value;
        dt.filter(value, column.filterProperty || column.property, this.filterOperator(dt, column.filterOperator));
    };
    GridComponent.prototype.onNumberFilter = function (dt, value, column) {
        column.filterValue = value;
        dt.filter(value, column.filterProperty || column.property, this.filterOperator(dt, column.filterOperator));
    };
    GridComponent.prototype.onFilterMenu = function (dt, column, op) {
        op.hide();
        dt.filter(column.filterValue, column.filterProperty || column.property, this.filterOperator(dt, column.filterOperator));
    };
    GridComponent.prototype.callLoadData = function () {
        var _this = this;
        this.loading = true;
        var columns = this.columns.toArray();
        this.state.skip = this.allowPaging ? this.skip : null;
        this.state.top = this.allowPaging ? this.top : null;
        this.state.sort = this.allowSorting ? this.orderBy.split(',').map(function (o) {
            return {
                property: o.indexOf(' ') ? o.split(' ').shift() : o,
                sortOrder: o.indexOf(' desc') != -1 ? 'descending' : 'ascending'
            };
        }) : [];
        this.state.filter = this.allowFiltering && this.rawFilters ? Object.keys(this.rawFilters).map(function (key) {
            var column = columns.find(function (c) { return c.filterProperty == key || c.property == key; });
            return column && column.filterOperator ? {
                property: key,
                value: _this.rawFilters[key].value,
                operator: _this.filterOperatorToState(column.filterOperator)
            } : null;
        }).filter(function (i) { return i != null; }) : [];
        this.loadData.next({
            skip: this.allowPaging ? this.skip : null,
            top: this.allowPaging ? this.top : null,
            orderby: this.orderBy,
            filter: this.filter,
            state: this.state
        });
    };
    GridComponent.prototype.filterOperator = function (dt, filterOperator) {
        if (dt.lazy) {
            return filterOperator;
        }
        switch (filterOperator) {
            case 'eq':
                return 'equals';
            case 'ne':
                return 'notEquals';
            case 'ge':
                return 'gte';
            case 'le':
                return 'lte';
            case 'startswith':
                return 'startsWith';
            case 'endswith':
                return 'endsWith';
            default:
                return filterOperator;
        }
    };
    GridComponent.prototype.filterOperatorToState = function (filterOperator) {
        switch (filterOperator) {
            case 'eq':
                return 'equal';
            case 'ne':
                return 'notEqual';
            case 'ge':
                return 'greaterThanOrEqual';
            case 'gt':
                return 'greaterThan';
            case 'le':
                return 'lessThanOrEqual';
            case 'lt':
                return 'lessThan';
            case 'startswith':
                return 'startsWith';
            case 'endswith':
                return 'endsWith';
            default:
                return filterOperator;
        }
    };
    GridComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'rz-grid',
                    template: "\n    <p-dataTable\n      selectionMode=\"single\"\n      [styleClass]=\"styleClass\"\n      [style]=\"style\"\n      [scrollable]=\"allowScrolling\"\n      [scrollWidth]=\"style?.width\"\n      [responsive]=\"true\"\n      [alwaysShowPaginator]=\"false\"\n      [lazy]=\"loadData.observers.length > 0\"\n      [loading]=\"isLoading || (loadData.observers.length > 0 && loading)\"\n      [value]=\"data\"\n      [totalRecords]=\"count\"\n      [emptyMessage]=\"data ? emptyText : null\"\n      (onPage)=\"onPage($event)\"\n      (onSort)=\"onSort($event)\"\n      (onRowExpand)=\"onRowExpand($event.data)\"\n      (onRowCollapse)=\"onRowCollapse($event.data)\"\n      (onFilter)=\"onFilter($event)\"\n      [sortMode]=\"allowSorting ? (allowMultiSorting ? 'multiple' : 'single') : null\"\n      [multiSortMeta]=\"multiSortMeta\"\n      [(selection)]=\"value\"\n      [rowsPerPageOptions]=\"pageSizeOptions\"\n      (onRowSelect)=\"onSelect($event.data)\"\n      (onRowDblclick)=\"onRowDoubleClick($event.data)\"\n      [rows]=\"allowPaging ? pageSize : -1\"\n      [groupField]=\"groupProperty\"\n      [rowGroupMode]=\"groupProperty ? 'subheader' : null\"\n      [paginator]=\"allowPaging\"\n      [expandableRows]=\"!!expandableTemplate\"\n      [expandableRowGroups]=\"expandableGroups\"\n      [reorderableColumns]=\"allowColumnReorder\"\n      [resizableColumns]=\"allowColumnResize\"\n      [columnResizeMode]=\"columnResizeMode\"\n      #dataTable\n    >\n      <p-column expander=\"true\" *ngIf=\"!!expandableTemplate\" styleClass=\"col-icon\"></p-column>\n      <ng-template *ngIf=\"groupProperty\" pTemplate=\"rowgroupheader\" let-data>{{groupHeader(data)}}</ng-template>\n      <p-header *ngIf=\"allowAdd\">\n        <rz-button icon=\"add_circle_outline\" (click)=\"onAdd(data)\" buttonStyle=\"primary\" [text]=\"addText\"></rz-button>\n      </p-header>\n      <p-column *ngFor=\"let column of columns; let index = index\" [style]=\"column.style\" [field]=\"column.property\" [header]=\"column.title\"\n        [sortField]=\"column.sortProperty\" [filterField]=\"column.filterProperty\"\n        [sortable]=\"allowSorting && column.sortable ? (loadData.observers.length > 0 ? 'custom' : true): false\"\n        [filter]=\"column.format == 'date-time-offset' || column.format == 'time' || column.format == 'geometry' || column.format == 'geography' || column.format == 'base64'? false : allowFiltering && column.filterable\"\n      >\n        <ng-template *ngIf=\"column.template\" pTemplate=\"body\" let-data=\"rowData\">\n          <ng-template [ngTemplateOutlet]=\"column.template.templateRef\" [ngTemplateOutletContext]=\"{ $implicit: data }\">\n          </ng-template>\n        </ng-template>\n        <ng-template *ngIf=\"column.footerTemplate\" pTemplate=\"footer\" let-data=\"rowData\">\n          <ng-template [ngTemplateOutlet]=\"column.footerTemplate.templateRef\" [ngTemplateOutletContext]=\"{ $implicit: data }\">\n          </ng-template>\n        </ng-template>\n        <ng-template *ngIf=\"column.type == 'boolean' && allowFiltering && column.filterable\" pTemplate=\"filter\">\n         <div class=\"ui-cell-filter\">\n           <div class=\"ui-cell-filter-content\">\n             <p-triStateCheckbox [ngModel]=\"column.filterValue\" (onChange)=\"onBooleanFilter(dataTable, $event.value, column)\">\n             </p-triStateCheckbox>\n           </div>\n          </div>\n        </ng-template>\n        <ng-template *ngIf=\"column.filterable && (column.type == 'text' || column.type == 'string')\" pTemplate=\"filter\">\n          <div class=\"ui-cell-filter\">\n           <div class=\"ui-cell-filter-content\">\n            <label>\n              <i class=\"material-icons\">search</i>\n              <input [ngModel]=\"column.filterValue\" (input)=\"onStringFilter(dataTable, $event.target.value, column)\">\n            </label>\n           </div>\n          </div>\n        </ng-template>\n        <ng-template *ngIf=\"column.filterable && (column.type == 'integer' || column.type == 'number')\" pTemplate=\"filter\">\n          <div class=\"ui-cell-filter\">\n           <div class=\"ui-cell-filter-content\">\n            <label>\n              <i class=\"material-icons\">search</i>\n              <rz-numeric [ngModel]=\"column.filterValue\" (change)=\"onNumberFilter(dataTable, $event, column)\"></rz-numeric>\n            </label>\n           </div>\n          </div>\n        </ng-template>\n        <ng-template *ngIf=\"(column.format == 'date-time' || column.format == 'date') && allowFiltering && column.filterable\" pTemplate=\"filter\" let-col>\n         <div class=\"ui-cell-filter\">\n           <div class=\"ui-cell-filter-content\">\n            <i class=\"material-icons\" (click)=\"op.toggle($event)\">date_range</i>\n            <span class=\"ui-current-filter\" *ngIf=\"column.filterValue\">{{ column.filterValue | date: filterDateFormat }}</span>\n            <i *ngIf=\"column.filterValue\" class=\"material-icons ui-cell-filter-clear\" (click)=\"onDateFilter(dataTable, null, column, op)\">close</i>\n          </div>\n          <p-overlayPanel appendTo=\"body\" #op>\n            <div class=\"ui-date-filter\">\n              <p-listbox class=\"filter-listbox\" [options]=\"column.filterOperators\" [(ngModel)]=\"column.filterOperator\">\n              </p-listbox>\n              <p-calendar [dateFormat]=\"filterDateFormat\" #fc appendTo=\"body\" [defaultDate]=\"today\" [showTime]=\"column.format == 'date-time'\"\n                [showIcon]=\"false\" [yearNavigator]=\"true\" yearRange=\"1950:2050\" [monthNavigator]=\"true\"\n                [(ngModel)]=\"column.filterValue\" [inline]=\"true\">\n              </p-calendar>\n            </div>\n            <div class=\"ui-date-filter-buttons\">\n              <button class=\"ui-button ui-clear-filter\" (click)=\"onDateFilter(dataTable, null, column, op)\">{{clearFilterText}}</button>\n              <button class=\"ui-button ui-apply-filter\" (click)=\"onDateFilter(dataTable, column.filterValue, column, op)\">{{applyFilterText}}</button>\n            </div>\n          </p-overlayPanel>\n         </div>\n        </ng-template>\n      </p-column>\n      <p-column *ngIf=\"allowDelete\" [style]=\"{'width': '70px', 'text-align': 'center'}\">\n        <ng-template let-data=\"rowData\" pTemplate=\"body\">\n          <rz-button buttonStyle=\"danger\" size=\"sm\" icon=\"close\" (click)=\"onDelete(data)\"></rz-button>\n        </ng-template>\n      </p-column>\n      <ng-template *ngIf=\"expandableTemplate\" pTemplate=\"rowexpansion\" let-data>\n        <div class=\"ui-expanded-row-template\">\n          <ng-template [ngTemplateOutlet]=\"expandableTemplate.template\" [ngTemplateOutletContext]=\"{ $implicit: data }\">\n          </ng-template>\n        </div>\n      </ng-template>\n    </p-dataTable>"
                },] },
    ];
    /** @nocollapse */
    GridComponent.ctorParameters = function () { return []; };
    GridComponent.propDecorators = {
        "style": [{ type: core_1.Input },],
        "data": [{ type: core_1.Input },],
        "allowDelete": [{ type: core_1.Input },],
        "allowAdd": [{ type: core_1.Input },],
        "allowSorting": [{ type: core_1.Input },],
        "allowMultiSorting": [{ type: core_1.Input },],
        "allowPaging": [{ type: core_1.Input },],
        "allowFiltering": [{ type: core_1.Input },],
        "allowScrolling": [{ type: core_1.Input },],
        "allowColumnResize": [{ type: core_1.Input },],
        "allowColumnReorder": [{ type: core_1.Input },],
        "applyFilterText": [{ type: core_1.Input },],
        "clearFilterText": [{ type: core_1.Input },],
        "filterDateFormat": [{ type: core_1.Input },],
        "columnResizeMode": [{ type: core_1.Input },],
        "pageSize": [{ type: core_1.Input },],
        "columnWidth": [{ type: core_1.Input },],
        "pageSizeOptions": [{ type: core_1.Input },],
        "count": [{ type: core_1.Input },],
        "title": [{ type: core_1.Input },],
        "visible": [{ type: core_1.Input },],
        "icon": [{ type: core_1.Input },],
        "titleBackground": [{ type: core_1.Input },],
        "titleColor": [{ type: core_1.Input },],
        "emptyText": [{ type: core_1.Input },],
        "addText": [{ type: core_1.Input },],
        "isLoading": [{ type: core_1.Input },],
        "groupProperty": [{ type: core_1.Input },],
        "expandableGroups": [{ type: core_1.Input },],
        "rowSelect": [{ type: core_1.Output },],
        "rowDoubleClick": [{ type: core_1.Output },],
        "rowExpand": [{ type: core_1.Output },],
        "rowCollapse": [{ type: core_1.Output },],
        "delete": [{ type: core_1.Output },],
        "add": [{ type: core_1.Output },],
        "loadData": [{ type: core_1.Output },],
        "valueChange": [{ type: core_1.Output },],
        "expandableTemplate": [{ type: core_1.ContentChild, args: [GridTemplateDirective,] },],
        "value": [{ type: core_1.Input },],
        "dataTable": [{ type: core_1.ViewChild, args: [datatable_1.DataTable,] },],
        "columns": [{ type: core_1.ContentChildren, args: [GridColumn,] },],
    };
    return GridComponent;
}());
exports.GridComponent = GridComponent;
function orderByToString(multiSortMeta) {
    return multiSortMeta
        .map(function (i) { return "" + i.field.replace('.', '/') + (i.order == -1 ? ' desc' : ''); })
        .join(',');
}
exports.orderByToString = orderByToString;
function filtersToString(filters, columns) {
    return Object.keys(filters)
        .map(function (key) {
        return filterToString(key.replace('.', '/'), filters[key], columns.find(function (c) { return c.filterProperty == key || c.property == key; }));
    })
        .filter(function (i) { return i != null; })
        .join(' and ');
}
function filterToString(key, filter, column) {
    var value = filter.value === '' ? null : filter.value;
    if (column && column.type) {
        if (column.type == 'string') {
            if ((column.format == 'date-time' || column.format == 'date') &&
                (new Date(value) instanceof Date || value)) {
                var date = value ? new Date(value) : null;
                if (value) {
                    date =
                        column.format == 'date-time'
                            ? new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()))
                            : new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));
                }
                return key + " " + column.filterOperator + " " + (date ? date.toISOString() : 'null');
            }
            else if (column.format == 'time') {
                return key + " " + column.filterOperator + " duration'" + filter.value + "'";
            }
            else if (column.format == 'uuid') {
                return key + " " + column.filterOperator + " " + value;
            }
            else if (value && column.filterOperator == 'contains') {
                return "contains(" + key + ", '" + value + "')";
            }
            else if (value && column.filterOperator == 'startswith') {
                return "startswith(" + key + ", '" + value + "')";
            }
            else if (value && column.filterOperator == 'endswith') {
                return "endswith(" + key + ", '" + value + "')";
            }
            else if (value && column.filterOperator == 'eq') {
                return key + " eq '" + value + "'";
            }
        }
        else if ((column.type == 'number' || column.type == 'integer') &&
            !isNaN(+value)) {
            return key + " " + column.filterOperator + " " + value;
        }
        else if (column.type == 'boolean') {
            return key + " eq " + value;
        }
        else {
            return null;
        }
    }
    return null;
}
var GridModule = /** @class */ (function () {
    function GridModule() {
    }
    GridModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [
                        common_1.CommonModule,
                        shared_1.SharedModule,
                        forms_1.FormsModule,
                        calendar_1.CalendarModule,
                        datatable_1.DataTableModule,
                        listbox_1.ListboxModule,
                        tristatecheckbox_1.TriStateCheckboxModule,
                        overlaypanel_1.OverlayPanelModule,
                        button_1.ButtonModule,
                        numeric_1.NumericModule
                    ],
                    declarations: [
                        GridComponent,
                        GridColumn,
                        GridTemplateDirective,
                        GridColumnTemplate,
                        GridColumnFooterTemplate
                    ],
                    exports: [
                        GridComponent,
                        GridColumn,
                        GridTemplateDirective,
                        GridColumnTemplate,
                        GridColumnFooterTemplate
                    ]
                },] },
    ];
    /** @nocollapse */
    GridModule.ctorParameters = function () { return []; };
    return GridModule;
}());
exports.GridModule = GridModule;
