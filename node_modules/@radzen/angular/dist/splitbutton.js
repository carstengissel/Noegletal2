"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var common_1 = require("@angular/common");
var splitbutton_1 = require("primeng/splitbutton");
var SplitButtonItemComponent = /** @class */ (function () {
    function SplitButtonItemComponent() {
    }
    SplitButtonItemComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'rz-splitbutton-item',
                    template: ''
                },] },
    ];
    /** @nocollapse */
    SplitButtonItemComponent.ctorParameters = function () { return []; };
    SplitButtonItemComponent.propDecorators = {
        "text": [{ type: core_1.Input },],
        "value": [{ type: core_1.Input },],
        "icon": [{ type: core_1.Input },],
    };
    return SplitButtonItemComponent;
}());
exports.SplitButtonItemComponent = SplitButtonItemComponent;
var SplitButtonComponent = /** @class */ (function () {
    function SplitButtonComponent(elementRef) {
        this.text = '';
        this.style = {};
        this.disabled = false;
        this.visible = true;
        this.click = new core_1.EventEmitter();
        this.items = [];
        this.elementRef = elementRef;
    }
    SplitButtonComponent.prototype.onClick = function (event) {
        this.click.next();
    };
    SplitButtonComponent.prototype.onDropdownClick = function (event) {
        //event.stopPropagation();
    };
    SplitButtonComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.createItems();
        this.subscription = this.children.changes.subscribe(function () {
            return _this.createItems();
        });
        if (this.icon) {
            var icon = this.elementRef.nativeElement.querySelector("p-splitbutton > div > button.ui-button > span");
            if (icon) {
                icon.innerText = this.icon;
            }
        }
    };
    SplitButtonComponent.prototype.ngAfterViewChecked = function () {
        for (var index = 0; index < this.items.length; index++) {
            var item = this.items[index];
            if (item.icon) {
                var icon = this.elementRef.nativeElement.querySelector("p-splitbutton > div > div > ul > li:nth-child(" + (index +
                    1) + ") > a > span.ui-menuitem-icon");
                if (icon) {
                    icon.innerText = item.icon;
                }
            }
        }
    };
    SplitButtonComponent.prototype.ngOnDestroy = function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    SplitButtonComponent.prototype.createItems = function () {
        var _this = this;
        if (!this.children) {
            return;
        }
        this.items = this.children.map(function (option) {
            return {
                label: option.text,
                id: option.value != null ? option.value : option.text,
                icon: option.icon,
                command: function () {
                    _this.click.next(option);
                }
            };
        });
    };
    SplitButtonComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'rz-splitbutton',
                    template: "<p-splitButton [disabled]=\"disabled\"\n          appendTo=\"body\"\n          [style]=\"style\"\n          [icon]=\"icon ? 'fa-' + icon : null\"\n          [label]=\"text\" [model]=\"items\"\n          (onClick)=\"onClick($event)\" (onDropdownClick)=\"onDropdownClick($event)\">\n  </p-splitButton>"
                },] },
    ];
    /** @nocollapse */
    SplitButtonComponent.ctorParameters = function () { return [
        { type: core_1.ElementRef, },
    ]; };
    SplitButtonComponent.propDecorators = {
        "text": [{ type: core_1.Input },],
        "icon": [{ type: core_1.Input },],
        "style": [{ type: core_1.Input },],
        "disabled": [{ type: core_1.Input },],
        "visible": [{ type: core_1.Input },],
        "click": [{ type: core_1.Output },],
        "children": [{ type: core_1.ContentChildren, args: [SplitButtonItemComponent,] },],
    };
    return SplitButtonComponent;
}());
exports.SplitButtonComponent = SplitButtonComponent;
var SplitButtonModule = /** @class */ (function () {
    function SplitButtonModule() {
    }
    SplitButtonModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [common_1.CommonModule, splitbutton_1.SplitButtonModule],
                    declarations: [SplitButtonItemComponent, SplitButtonComponent],
                    exports: [SplitButtonItemComponent, SplitButtonComponent]
                },] },
    ];
    /** @nocollapse */
    SplitButtonModule.ctorParameters = function () { return []; };
    return SplitButtonModule;
}());
exports.SplitButtonModule = SplitButtonModule;
