"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var common_1 = require("@angular/common");
var get = require("lodash/get");
var d3_scale_1 = require("d3-scale");
var d3_shape_1 = require("d3-shape");
var shared_1 = require("./shared");
var ngx_charts_1 = require("@swimlane/ngx-charts");
var BaseSparklineComponent = /** @class */ (function (_super) {
    __extends(BaseSparklineComponent, _super);
    function BaseSparklineComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.autoScale = false;
        _this.curve = d3_shape_1.curveMonotoneX;
        _this.schemeType = 'ordinal';
        _this.animations = true;
        _this.activeEntries = [];
        _this.deactivate = new core_1.EventEmitter();
        _this.margin = [2, 2, 2, 2];
        return _this;
    }
    BaseSparklineComponent.prototype.update = function () {
        _super.prototype.update.call(this);
        this.scheme = { domain: [this.color] };
        this.dims = ngx_charts_1.calculateViewDimensions({
            width: this.width,
            height: this.height,
            margins: this.margin,
            showXAxis: false,
            showYAxis: false,
            xAxisHeight: 0,
            yAxisWidth: 0,
            showXLabel: false,
            showYLabel: false,
            showLegend: false,
            legendType: this.schemeType
        });
        this.xDomain = this.getXDomain();
        this.yDomain = this.getYDomain();
        this.seriesDomain = this.getSeriesDomain();
        this.xScale = this.getXScale(this.xDomain, this.dims.width);
        this.yScale = this.getYScale(this.yDomain, this.dims.height);
        this.setColors();
        this.transform = "translate(" + this.dims.xOffset + " , " + this.margin[0] + ")";
    };
    BaseSparklineComponent.prototype.getXDomain = function () {
        var values = [];
        for (var _i = 0, _a = this.results; _i < _a.length; _i++) {
            var results = _a[_i];
            for (var _b = 0, _c = results.series; _b < _c.length; _b++) {
                var d = _c[_b];
                if (values.indexOf(d.name) < 0) {
                    values.push(d.name);
                }
            }
        }
        this.scaleType = this.getScaleType(values);
        var domain = [];
        if (this.scaleType === 'time') {
            var min = Math.min.apply(Math, values);
            var max = Math.max.apply(Math, values);
            domain = [min, max];
        }
        else if (this.scaleType === 'linear') {
            values = values.map(function (v) { return Number(v); });
            var min = Math.min.apply(Math, values);
            var max = Math.max.apply(Math, values);
            domain = [min, max];
        }
        else {
            domain = values;
        }
        this.xSet = values;
        return domain;
    };
    BaseSparklineComponent.prototype.getYDomain = function () {
        if (this.valueDomain) {
            return this.valueDomain;
        }
        var domain = [];
        for (var _i = 0, _a = this.results; _i < _a.length; _i++) {
            var results = _a[_i];
            for (var _b = 0, _c = results.series; _b < _c.length; _b++) {
                var d = _c[_b];
                if (domain.indexOf(d.value) < 0) {
                    domain.push(d.value);
                }
                if (d.min !== undefined) {
                    if (domain.indexOf(d.min) < 0) {
                        domain.push(d.min);
                    }
                }
                if (d.max !== undefined) {
                    if (domain.indexOf(d.max) < 0) {
                        domain.push(d.max);
                    }
                }
            }
        }
        var min = Math.min.apply(Math, domain);
        var max = Math.max.apply(Math, domain);
        if (!this.autoScale) {
            min = Math.min(0, min);
        }
        return [min, max];
    };
    BaseSparklineComponent.prototype.getSeriesDomain = function () {
        return this.results.map(function (d) { return d.name; });
    };
    BaseSparklineComponent.prototype.getXScale = function (domain, width) {
        var scale;
        if (this.scaleType === 'time') {
            scale = d3_scale_1.scaleTime()
                .range([0, width])
                .domain(domain);
        }
        else if (this.scaleType === 'linear') {
            scale = d3_scale_1.scaleLinear()
                .range([0, width])
                .domain(domain);
        }
        else if (this.scaleType === 'ordinal') {
            scale = d3_scale_1.scalePoint()
                .range([0, width])
                .padding(0.1)
                .domain(domain);
        }
        return scale;
    };
    BaseSparklineComponent.prototype.getYScale = function (domain, height) {
        var scale = d3_scale_1.scaleLinear()
            .range([height, 0])
            .domain(domain);
        return scale;
    };
    BaseSparklineComponent.prototype.getScaleType = function (values) {
        var date = true;
        var num = true;
        for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
            var value = values_1[_i];
            if (!this.isDate(value)) {
                date = false;
            }
            if (typeof value !== 'number') {
                num = false;
            }
        }
        if (date)
            return 'time';
        if (num)
            return 'linear';
        return 'ordinal';
    };
    BaseSparklineComponent.prototype.isDate = function (value) {
        if (value instanceof Date) {
            return true;
        }
        return false;
    };
    BaseSparklineComponent.prototype.trackBy = function (index, item) {
        return item.name;
    };
    BaseSparklineComponent.prototype.setColors = function () {
        var domain;
        if (this.schemeType === 'ordinal') {
            domain = this.seriesDomain;
        }
        else {
            domain = this.yDomain;
        }
        this.colors = new ngx_charts_1.ColorHelper(this.scheme, this.schemeType, domain, this.customColors);
    };
    BaseSparklineComponent.prototype.updateHoveredVertical = function (item) {
        this.hoveredVertical = item.value;
        this.deactivateAll();
    };
    BaseSparklineComponent.prototype.deactivateAll = function () {
        this.activeEntries = this.activeEntries.slice();
        for (var _i = 0, _a = this.activeEntries; _i < _a.length; _i++) {
            var entry = _a[_i];
            this.deactivate.emit({ value: entry, entries: [] });
        }
        this.activeEntries = [];
    };
    BaseSparklineComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'rz-spark',
                    template: "\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"line-chart chart\">\n        <svg:g>\n          <svg:g *ngFor=\"let series of results; trackBy:trackBy\">\n            <svg:g ngx-charts-line-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngFor=\"let series of results\">\n          <svg:g ngx-charts-circle-series\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [visibleValue]=\"hoveredVertical\"\n            [activeEntries]=\"activeEntries\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>"
                },] },
    ];
    /** @nocollapse */
    BaseSparklineComponent.ctorParameters = function () { return []; };
    BaseSparklineComponent.propDecorators = {
        "autoScale": [{ type: core_1.Input },],
        "curve": [{ type: core_1.Input },],
        "schemeType": [{ type: core_1.Input },],
        "valueDomain": [{ type: core_1.Input },],
        "animations": [{ type: core_1.Input },],
        "activeEntries": [{ type: core_1.Input },],
        "color": [{ type: core_1.Input },],
        "deactivate": [{ type: core_1.Output },],
    };
    return BaseSparklineComponent;
}(ngx_charts_1.BaseChartComponent));
exports.BaseSparklineComponent = BaseSparklineComponent;
var SparklineComponent = /** @class */ (function () {
    function SparklineComponent() {
        this.style = {};
        this.color = '#479cc8';
        this.results = [];
        this.view = [];
    }
    SparklineComponent.prototype.ngOnChanges = function () {
        this.sync();
    };
    SparklineComponent.prototype.ngDoCheck = function () {
        var _a = this.view, width = _a[0], height = _a[1];
        var _b = this.container.nativeElement, clientWidth = _b.clientWidth, clientHeight = _b.clientHeight;
        if (width != clientWidth || height != clientHeight) {
            this.view = [clientWidth, clientHeight];
        }
    };
    SparklineComponent.prototype.sync = function () {
        var _this = this;
        if (Array.isArray(this.data)) {
            var series = this.data.map(function (item) {
                var value = get(item, _this.valueProperty, item);
                var name = get(item, _this.categoryProperty, item.toString());
                return { name: name, value: value };
            });
            this.results = [{ name: '', series: series }];
        }
    };
    SparklineComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'rz-sparkline',
                    template: "\n    <div class=\"ui-sparkline\" [ngStyle]=\"style\" #container>\n      <rz-spark [view]=\"view\" [results]=\"results\" [color]=\"color\" [animations]=\"false\"></rz-spark>\n    </div>\n  "
                },] },
    ];
    /** @nocollapse */
    SparklineComponent.ctorParameters = function () { return []; };
    SparklineComponent.propDecorators = {
        "style": [{ type: core_1.Input },],
        "valueProperty": [{ type: core_1.Input },],
        "categoryProperty": [{ type: core_1.Input },],
        "data": [{ type: core_1.Input },],
        "color": [{ type: core_1.Input },],
        "container": [{ type: core_1.ViewChild, args: ['container',] },],
    };
    return SparklineComponent;
}());
exports.SparklineComponent = SparklineComponent;
var SparklineModule = /** @class */ (function () {
    function SparklineModule() {
    }
    SparklineModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [common_1.CommonModule, ngx_charts_1.NgxChartsModule, shared_1.SharedModule],
                    declarations: [SparklineComponent, BaseSparklineComponent],
                    exports: [SparklineComponent]
                },] },
    ];
    /** @nocollapse */
    SparklineModule.ctorParameters = function () { return []; };
    return SparklineModule;
}());
exports.SparklineModule = SparklineModule;
