"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var common_1 = require("@angular/common");
var get = require("lodash/get");
var ngx_charts_1 = require("@swimlane/ngx-charts");
var shared_1 = require("./shared");
var PieComponent = /** @class */ (function () {
    function PieComponent() {
        this.style = {};
        this.colors = [
            '#479cc8',
            '#68D5C8',
            '#ff6d41',
            '#cb6992',
            '#e6c54f',
            '#f9777f',
            '#5dbf74',
            '#4db9f2',
            '#FF6D41'
        ];
        this.select = new core_1.EventEmitter();
        this.results = [];
    }
    PieComponent.prototype.onSelect = function (event) {
        if (typeof event != 'string') {
            this.select.emit({ category: event.name, value: event.value });
        }
    };
    PieComponent.prototype.ngOnInit = function () {
        this.update();
    };
    PieComponent.prototype.ngOnChanges = function () {
        this.update();
    };
    PieComponent.prototype.update = function () {
        var _this = this;
        if (this.data && this.categoryProperty && this.valueProperty) {
            var series = this.data.map(function (item) {
                return {
                    name: get(item, _this.categoryProperty),
                    value: get(item, _this.valueProperty)
                };
            });
            this.results = series;
        }
    };
    PieComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'rz-pie',
                    host: {
                        style: 'display: block; height: 100%'
                    },
                    template: "<div #container class=\"pie\" [ngStyle]=\"style\">\n      <ngx-charts-pie-chart\n        [view]=\"[container.clientWidth, container.clientHeight]\"\n        [scheme]=\"{domain:colors}\"\n        [animations]=\"false\"\n        [results]=\"results\"\n        [legend]=\"legend\"\n        [labels]=\"labels\"\n        (select)=\"onSelect($event)\"\n        [doughnut]=\"chartType == 'Donut'\"\n      ></ngx-charts-pie-chart>\n    </div>"
                },] },
    ];
    /** @nocollapse */
    PieComponent.ctorParameters = function () { return []; };
    PieComponent.propDecorators = {
        "style": [{ type: core_1.Input },],
        "title": [{ type: core_1.Input },],
        "icon": [{ type: core_1.Input },],
        "titleBackground": [{ type: core_1.Input },],
        "titleColor": [{ type: core_1.Input },],
        "chartType": [{ type: core_1.Input },],
        "data": [{ type: core_1.Input },],
        "categoryProperty": [{ type: core_1.Input },],
        "valueProperty": [{ type: core_1.Input },],
        "legend": [{ type: core_1.Input },],
        "labels": [{ type: core_1.Input },],
        "colors": [{ type: core_1.Input },],
        "select": [{ type: core_1.Output },],
    };
    return PieComponent;
}());
exports.PieComponent = PieComponent;
var PieModule = /** @class */ (function () {
    function PieModule() {
    }
    PieModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [common_1.CommonModule, ngx_charts_1.NgxChartsModule, shared_1.SharedModule],
                    declarations: [PieComponent],
                    exports: [PieComponent]
                },] },
    ];
    /** @nocollapse */
    PieModule.ctorParameters = function () { return []; };
    return PieModule;
}());
exports.PieModule = PieModule;
