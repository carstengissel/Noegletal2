"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var get = require("lodash/get");
var form_field_1 = require("./form-field");
var LookupFormFieldComponent = /** @class */ (function (_super) {
    __extends(LookupFormFieldComponent, _super);
    function LookupFormFieldComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.allowFiltering = false;
        _this.allowClear = false;
        _this.multiple = false;
        return _this;
    }
    LookupFormFieldComponent.prototype.ngOnChanges = function (changes) {
        if (changes.hasOwnProperty('data') ||
            changes.hasOwnProperty('textProperty') ||
            changes.hasOwnProperty('valueProperty')) {
            this.setOptions();
        }
    };
    LookupFormFieldComponent.prototype.setOptions = function () {
        var _this = this;
        if (!this.data) {
            return;
        }
        this.options = this.data.map(function (item) {
            return {
                label: _this.textProperty ? get(item, _this.textProperty) : item,
                value: _this.valueProperty ? get(item, _this.valueProperty) : item
            };
        });
    };
    LookupFormFieldComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'rz-lookup-form-field',
                    template: "\n    <p-dropdown\n      appendTo=\"body\"\n      *ngIf=\"data && !multiple\"\n      [filter]=\"allowFiltering\"\n      [inputId]=\"property\"\n      [placeholder]=\"placeholder\"\n      [options]=\"options\"\n      [autoWidth]=\"false\"\n      [showClear]=\"allowClear\"\n      [formControl]=\"parent.form.controls[property]\"\n    >\n    </p-dropdown>\n    <p-multiSelect\n      appendTo=\"body\"\n      *ngIf=\"data && multiple\"\n      [filter]=\"allowFiltering\"\n      [inputId]=\"property\"\n      [options]=\"options\"\n      [formControl]=\"parent.form.controls[property]\"\n    >\n    </p-multiSelect>\n    <div\n      class=\"md-inputfield\"\n      *ngIf=\"\n        (parent.form.controls[property].touched || parent.submitted) &&\n        parent.form.controls[property].errors?.required\n      \"\n    >\n      <div class=\"ui-message ui-messages-error ui-corner-all\">\n        {{ title }} {{ requiredText }}\n      </div>\n    </div>\n  ",
                    providers: [
                        {
                            provide: form_field_1.FormFieldComponent,
                            useExisting: core_1.forwardRef(function () { return LookupFormFieldComponent; })
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    LookupFormFieldComponent.ctorParameters = function () { return []; };
    LookupFormFieldComponent.propDecorators = {
        "textProperty": [{ type: core_1.Input },],
        "valueProperty": [{ type: core_1.Input },],
        "placeholder": [{ type: core_1.Input },],
        "data": [{ type: core_1.Input },],
        "allowFiltering": [{ type: core_1.Input },],
        "allowClear": [{ type: core_1.Input },],
        "multiple": [{ type: core_1.Input },],
    };
    return LookupFormFieldComponent;
}(form_field_1.FormFieldComponent));
exports.LookupFormFieldComponent = LookupFormFieldComponent;
