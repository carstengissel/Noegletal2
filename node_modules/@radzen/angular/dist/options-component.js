"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var Subject_1 = require("rxjs/Subject");
var form_component_1 = require("./form-component");
var OptionsComponent = /** @class */ (function (_super) {
    __extends(OptionsComponent, _super);
    function OptionsComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.ngUnsubscribe = new Subject_1.Subject();
        _this._options = [];
        return _this;
    }
    Object.defineProperty(OptionsComponent.prototype, "options", {
        get: function () {
            return this._options;
        },
        set: function (value) {
            if (Array.isArray(value)) {
                this._options = value.map(function (option) {
                    return {
                        label: option.text,
                        value: option.value != null ? option.value : option.text
                    };
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    OptionsComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.createOptions();
        this.children.changes
            .takeUntil(this.ngUnsubscribe)
            .subscribe(function () { return _this.createOptions(); });
    };
    OptionsComponent.prototype.ngOnDestroy = function () {
        this.ngUnsubscribe.next();
        this.ngUnsubscribe.complete();
    };
    OptionsComponent.prototype.createOptions = function () {
        if (!this.children) {
            return;
        }
        this.options = this.children.toArray();
    };
    OptionsComponent.propDecorators = {
        "options": [{ type: core_1.Input },],
    };
    return OptionsComponent;
}(form_component_1.FormComponent));
exports.OptionsComponent = OptionsComponent;
