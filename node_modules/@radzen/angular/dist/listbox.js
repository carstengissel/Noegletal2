"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var common_1 = require("@angular/common");
var forms_1 = require("@angular/forms");
var listbox_1 = require("primeng/listbox");
var get = require("lodash/get");
var set = require("lodash/set");
var form_component_1 = require("./form-component");
var ListBoxComponent = /** @class */ (function (_super) {
    __extends(ListBoxComponent, _super);
    function ListBoxComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.style = {};
        _this.allowFiltering = false;
        _this.readOnly = false;
        _this.checkbox = false;
        _this.showToggleAll = true;
        _this.multiple = false;
        _this.metaKeySelection = true;
        return _this;
    }
    Object.defineProperty(ListBoxComponent.prototype, "value", {
        get: function () {
            return this.innerValue;
        },
        set: function (value) {
            var _this = this;
            if (value != this.innerValue) {
                this.innerValue = value;
                this.onChange(value);
                if (this.valueProperty) {
                    var item = this.data.find(function (item) { return get(item, _this.valueProperty) == value; });
                    if (!item) {
                        item = {};
                        set(item, this.valueProperty, value);
                    }
                    this.change.next(item);
                }
                else {
                    this.change.next(value);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    ListBoxComponent.prototype.text = function (item) {
        return this.textProperty ? get(item, this.textProperty) : item;
    };
    ListBoxComponent.prototype.ngOnChanges = function (changes) {
        if (changes.hasOwnProperty('data') ||
            changes.hasOwnProperty('textProperty')) {
            this.setOptions();
        }
    };
    ListBoxComponent.prototype.setOptions = function () {
        var _this = this;
        if (!this.data) {
            return;
        }
        this.options = this.data.map(function (item) {
            return {
                label: _this.textProperty ? get(item, _this.textProperty) : item,
                value: _this.valueProperty ? get(item, _this.valueProperty) : item
            };
        });
    };
    ListBoxComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'rz-listbox',
                    template: "\n  <p-listbox stopChangePropagation (blur)=\"onTouched()\" [(ngModel)]=\"value\" [metaKeySelection]=\"metaKeySelection\"\n    [multiple]=\"multiple\" [readonly]=\"readOnly\" [checkbox]=\"checkbox\" [showToggleAll]=\"showToggleAll\"\n    [style]=\"style\" [options]=\"options\" [filter]=\"allowFiltering\" [disabled]=\"disabled\">\n    <ng-template *ngIf=\"template\" pTemplate=\"item\" let-data>\n      <ng-template [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"{ $implicit: data.value }\"></ng-template>\n    </ng-template>\n  </p-listbox>\n  ",
                    providers: [
                        {
                            provide: forms_1.NG_VALUE_ACCESSOR,
                            useExisting: core_1.forwardRef(function () { return ListBoxComponent; }),
                            multi: true
                        },
                        {
                            provide: form_component_1.FormComponent,
                            useExisting: core_1.forwardRef(function () { return ListBoxComponent; })
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    ListBoxComponent.ctorParameters = function () { return []; };
    ListBoxComponent.propDecorators = {
        "style": [{ type: core_1.Input },],
        "data": [{ type: core_1.Input },],
        "textProperty": [{ type: core_1.Input },],
        "valueProperty": [{ type: core_1.Input },],
        "allowFiltering": [{ type: core_1.Input },],
        "readOnly": [{ type: core_1.Input },],
        "checkbox": [{ type: core_1.Input },],
        "showToggleAll": [{ type: core_1.Input },],
        "multiple": [{ type: core_1.Input },],
        "metaKeySelection": [{ type: core_1.Input },],
        "template": [{ type: core_1.ContentChild, args: [core_1.TemplateRef,] },],
        "value": [{ type: core_1.Input },],
    };
    return ListBoxComponent;
}(form_component_1.FormComponent));
exports.ListBoxComponent = ListBoxComponent;
var ListBoxModule = /** @class */ (function () {
    function ListBoxModule() {
    }
    ListBoxModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [common_1.CommonModule, forms_1.FormsModule, listbox_1.ListboxModule],
                    declarations: [ListBoxComponent],
                    exports: [ListBoxComponent]
                },] },
    ];
    /** @nocollapse */
    ListBoxModule.ctorParameters = function () { return []; };
    return ListBoxModule;
}());
exports.ListBoxModule = ListBoxModule;
