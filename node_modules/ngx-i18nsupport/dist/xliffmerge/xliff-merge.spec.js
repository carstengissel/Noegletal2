"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var xliff_merge_1 = require("./xliff-merge");
var command_output_1 = require("../common/command-output");
var writer_to_string_1 = require("../common/writer-to-string");
/**
 * Created by martin on 18.02.2017.
 * Testcases for XliffMerge.
 */
describe('XliffMerge test spec', function () {
    describe('test the tooling used in the tests', function () {
        it('should write output to string (Test WriterToString)', function () {
            var ws = new writer_to_string_1.WriterToString();
            ws.write('test test test\n');
            ws.write('line 2');
            expect(ws.writtenData()).toContain('line 2');
        });
    });
    describe('command line and configuration checks', function () {
        it('should parse -v option', function () {
            var options = xliff_merge_1.XliffMerge.parseArgs(['node', 'xliffmerge', '-v']);
            expect(options.verbose).toBeTruthy();
            expect(options.quiet).toBeFalsy();
        });
        it('should parse -q option', function () {
            var options = xliff_merge_1.XliffMerge.parseArgs(['node', 'xliffmerge', '-q']);
            expect(options.quiet).toBeTruthy();
            expect(options.verbose).toBeFalsy();
        });
        it('should output version and used parameters when called with defaults and verbose flag', function (done) {
            var ws = new writer_to_string_1.WriterToString();
            var commandOut = new command_output_1.CommandOutput(ws);
            var xliffMergeCmd = new xliff_merge_1.XliffMerge(commandOut, { verbose: true });
            xliffMergeCmd.run();
            expect(ws.writtenData()).toContain('xliffmerge version');
            expect(ws.writtenData()).toContain('Used Parameters:');
            done();
        });
        it('should not output version and used parameters when called with defaults and both verbose and quiet flag', function (done) {
            var ws = new writer_to_string_1.WriterToString();
            var commandOut = new command_output_1.CommandOutput(ws);
            var xliffMergeCmd = new xliff_merge_1.XliffMerge(commandOut, { verbose: true, quiet: true });
            xliffMergeCmd.run();
            expect(ws.writtenData()).not.toContain('xliffmerge version');
            expect(ws.writtenData()).not.toContain('Used Parameters:');
            done();
        });
        it('should output an errror (no languages) when called with defaults', function (done) {
            var ws = new writer_to_string_1.WriterToString();
            var commandOut = new command_output_1.CommandOutput(ws);
            var xliffMergeCmd = new xliff_merge_1.XliffMerge(commandOut, {});
            xliffMergeCmd.run();
            expect(ws.writtenData()).toContain('ERROR');
            expect(ws.writtenData()).toContain('no languages specified');
            done();
        });
        it('should output an errror (i18nfile) when called with defaults', function (done) {
            var ws = new writer_to_string_1.WriterToString();
            var commandOut = new command_output_1.CommandOutput(ws);
            var xliffMergeCmd = new xliff_merge_1.XliffMerge(commandOut, { languages: ['de', 'en'] });
            xliffMergeCmd.run();
            expect(ws.writtenData()).toContain('ERROR');
            expect(ws.writtenData()).toContain('i18nFile');
            done();
        });
        it('should output an errror (could not read) when called with a non existing profile', function (done) {
            var ws = new writer_to_string_1.WriterToString();
            var commandOut = new command_output_1.CommandOutput(ws);
            var xliffMergeCmd = new xliff_merge_1.XliffMerge(commandOut, { verbose: true, profilePath: 'lmaa' });
            xliffMergeCmd.run();
            expect(ws.writtenData()).toContain('ERROR');
            expect(ws.writtenData()).toContain('could not read profile');
            done();
        });
        it('should read test config file', function (done) {
            var ws = new writer_to_string_1.WriterToString();
            var commandOut = new command_output_1.CommandOutput(ws);
            var xliffMergeCmd = xliff_merge_1.XliffMerge.createFromOptions(commandOut, { profilePath: './test/testdata/xliffmergeconfig.json', verbose: true }, null);
            xliffMergeCmd.run();
            expect(ws.writtenData()).toContain('languages:	de,en');
            done();
        });
        it('should output an errror (srcDir not readable) when called with a non existing srcDir', function (done) {
            var ws = new writer_to_string_1.WriterToString();
            var commandOut = new command_output_1.CommandOutput(ws);
            var profileContent = {
                xliffmergeOptions: {
                    srcDir: 'lmaa',
                }
            };
            var xliffMergeCmd = xliff_merge_1.XliffMerge.createFromOptions(commandOut, { verbose: true }, profileContent);
            xliffMergeCmd.run();
            expect(ws.writtenData()).toContain('ERROR');
            expect(ws.writtenData()).toContain('srcDir "lmaa" is not a directory');
            done();
        });
        it('should output an errror (genDir not existing) when called with a non existing genDir', function (done) {
            var ws = new writer_to_string_1.WriterToString();
            var commandOut = new command_output_1.CommandOutput(ws);
            var profileContent = {
                xliffmergeOptions: {
                    genDir: 'lmaa',
                }
            };
            var xliffMergeCmd = xliff_merge_1.XliffMerge.createFromOptions(commandOut, { verbose: true }, profileContent);
            xliffMergeCmd.run();
            expect(ws.writtenData()).toContain('ERROR');
            expect(ws.writtenData()).toContain('genDir "lmaa" is not a directory');
            done();
        });
        it('should output an errror (i18nFile is not readable) when called with a non existing master file', function (done) {
            var ws = new writer_to_string_1.WriterToString();
            var commandOut = new command_output_1.CommandOutput(ws);
            var profileContent = {
                xliffmergeOptions: {
                    srcDir: 'test/testdata',
                    i18nFile: 'nonexistingmaster.xlf'
                }
            };
            var xliffMergeCmd = xliff_merge_1.XliffMerge.createFromOptions(commandOut, {}, profileContent);
            xliffMergeCmd.run();
            expect(ws.writtenData()).toContain('ERROR');
            expect(ws.writtenData()).toContain('i18nFile "test/testdata/nonexistingmaster.xlf" is not readable');
            done();
        });
        it('should output an errror (language not valid) when called with an invalid language code', function (done) {
            var ws = new writer_to_string_1.WriterToString();
            var commandOut = new command_output_1.CommandOutput(ws);
            var profileContent = {
                xliffmergeOptions: {
                    defaultLanguage: 'de/ch',
                }
            };
            var xliffMergeCmd = xliff_merge_1.XliffMerge.createFromOptions(commandOut, {}, profileContent);
            xliffMergeCmd.run();
            expect(ws.writtenData()).toContain('ERROR');
            expect(ws.writtenData()).toContain('language "de/ch" is not valid');
            done();
        });
        it('should accept en_US (with underscore) as a valid language code (#59)', function (done) {
            var ws = new writer_to_string_1.WriterToString();
            var commandOut = new command_output_1.CommandOutput(ws);
            var profileContent = {
                xliffmergeOptions: {
                    defaultLanguage: 'en_US',
                }
            };
            var xliffMergeCmd = xliff_merge_1.XliffMerge.createFromOptions(commandOut, {}, profileContent);
            xliffMergeCmd.run();
            expect(ws.writtenData()).not.toContain('language "en_US" is not valid');
            done();
        });
        it('should output an errror (i18nFormat invalid) when called with an invalid i18n format', function (done) {
            var ws = new writer_to_string_1.WriterToString();
            var commandOut = new command_output_1.CommandOutput(ws);
            var profileContent = {
                xliffmergeOptions: {
                    i18nFormat: 'unknown',
                }
            };
            var xliffMergeCmd = xliff_merge_1.XliffMerge.createFromOptions(commandOut, {}, profileContent);
            xliffMergeCmd.run();
            expect(ws.writtenData()).toContain('ERROR');
            expect(ws.writtenData()).toContain('i18nFormat "unknown" invalid');
            done();
        });
        it('should output an error when autotranslate is set to true and there is no api key set', function (done) {
            var ws = new writer_to_string_1.WriterToString();
            var commandOut = new command_output_1.CommandOutput(ws);
            var profileContent = {
                xliffmergeOptions: {
                    autotranslate: true,
                    apikey: "",
                }
            };
            var xliffMergeCmd = xliff_merge_1.XliffMerge.createFromOptions(commandOut, {}, profileContent);
            xliffMergeCmd.run();
            expect(ws.writtenData()).toContain('ERROR');
            expect(ws.writtenData()).toContain('autotranslate requires an API key');
            done();
        });
        it('should output an error when autotranslate is set to a list of languages and there is no api key set', function (done) {
            var ws = new writer_to_string_1.WriterToString();
            var commandOut = new command_output_1.CommandOutput(ws);
            var profileContent = {
                xliffmergeOptions: {
                    autotranslate: ['de'],
                    apikey: "",
                }
            };
            var xliffMergeCmd = xliff_merge_1.XliffMerge.createFromOptions(commandOut, {}, profileContent);
            xliffMergeCmd.run();
            expect(ws.writtenData()).toContain('ERROR');
            expect(ws.writtenData()).toContain('autotranslate requires an API key');
            done();
        });
        it('should read api key from file if apikeyfile is set', function (done) {
            var ws = new writer_to_string_1.WriterToString();
            var commandOut = new command_output_1.CommandOutput(ws);
            var profileContent = {
                xliffmergeOptions: {
                    autotranslate: ['de'],
                    apikeyfile: "package.json",
                }
            };
            var xliffMergeCmd = xliff_merge_1.XliffMerge.createFromOptions(commandOut, { verbose: true }, profileContent);
            xliffMergeCmd.run();
            expect(ws.writtenData()).toContain('apikeyfile:\tpackage.json');
            expect(ws.writtenData()).toContain('apikey:\t****');
            done();
        });
        it('should output an error when autotranslate language is not in list of languages', function (done) {
            var ws = new writer_to_string_1.WriterToString();
            var commandOut = new command_output_1.CommandOutput(ws);
            var profileContent = {
                xliffmergeOptions: {
                    languages: ['en', 'ru'],
                    autotranslate: ['de'],
                }
            };
            var xliffMergeCmd = xliff_merge_1.XliffMerge.createFromOptions(commandOut, {}, profileContent);
            xliffMergeCmd.run();
            expect(ws.writtenData()).toContain('ERROR');
            expect(ws.writtenData()).toContain('autotranslate language "de" is not in list of languages');
            done();
        });
        it('should output an error when autotranslate language is set to default language', function (done) {
            var ws = new writer_to_string_1.WriterToString();
            var commandOut = new command_output_1.CommandOutput(ws);
            var profileContent = {
                xliffmergeOptions: {
                    languages: ['en', 'ru'],
                    autotranslate: ['en', 'ru'],
                }
            };
            var xliffMergeCmd = xliff_merge_1.XliffMerge.createFromOptions(commandOut, {}, profileContent);
            xliffMergeCmd.run();
            expect(ws.writtenData()).toContain('ERROR');
            expect(ws.writtenData()).toContain('autotranslate language "en" cannot be translated, because it is the source language');
            done();
        });
        it('should not output error ".. because it is the source language" when autotranslate language is not set to default language (issue #52)', function (done) {
            var ws = new writer_to_string_1.WriterToString();
            var commandOut = new command_output_1.CommandOutput(ws);
            var profileContent = {
                xliffmergeOptions: {
                    defaultLanguage: 'zh-CN',
                    languages: ['en', 'ja'],
                    autotranslate: ['en', 'ja'],
                }
            };
            var xliffMergeCmd = xliff_merge_1.XliffMerge.createFromOptions(commandOut, {}, profileContent);
            xliffMergeCmd.run();
            expect(ws.writtenData()).toContain('ERROR');
            expect(ws.writtenData()).not.toContain('autotranslate language "en" cannot be translated, because it is the source language');
            done();
        });
        it('should accept i18n format xlf', function (done) {
            var ws = new writer_to_string_1.WriterToString();
            var commandOut = new command_output_1.CommandOutput(ws);
            var profileContent = {
                xliffmergeOptions: {
                    i18nFormat: 'xlf',
                }
            };
            var xliffMergeCmd = xliff_merge_1.XliffMerge.createFromOptions(commandOut, {}, profileContent);
            xliffMergeCmd.run();
            expect(ws.writtenData()).not.toContain('i18nFormat');
            done();
        });
        it('should accept i18n format xlf2', function (done) {
            var ws = new writer_to_string_1.WriterToString();
            var commandOut = new command_output_1.CommandOutput(ws);
            var profileContent = {
                xliffmergeOptions: {
                    i18nFormat: 'xlf2',
                }
            };
            var xliffMergeCmd = xliff_merge_1.XliffMerge.createFromOptions(commandOut, {}, profileContent);
            xliffMergeCmd.run();
            expect(ws.writtenData()).not.toContain('i18nFormat');
            done();
        });
        it('should accept i18n format xmb', function (done) {
            var ws = new writer_to_string_1.WriterToString();
            var commandOut = new command_output_1.CommandOutput(ws);
            var profileContent = {
                xliffmergeOptions: {
                    i18nFormat: 'xmb',
                }
            };
            var xliffMergeCmd = xliff_merge_1.XliffMerge.createFromOptions(commandOut, {}, profileContent);
            xliffMergeCmd.run();
            expect(ws.writtenData()).not.toContain('i18nFormat');
            done();
        });
        it('should read languages from config file', function (done) {
            var ws = new writer_to_string_1.WriterToString();
            var commandOut = new command_output_1.CommandOutput(ws);
            var profileContent = {
                xliffmergeOptions: {
                    languages: ['de', 'en', 'fr'],
                }
            };
            var xliffMergeCmd = xliff_merge_1.XliffMerge.createFromOptions(commandOut, { verbose: true }, profileContent);
            xliffMergeCmd.run();
            expect(ws.writtenData()).toContain('languages:	de,en,fr');
            done();
        });
    });
});
//# sourceMappingURL=S:/experimente/ngx-i18nsupport/xliffmerge/xliff-merge.spec.js.map