"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var xliff_merge_1 = require("./xliff-merge");
var command_output_1 = require("../common/command-output");
var writer_to_string_1 = require("../common/writer-to-string");
var file_util_1 = require("../common/file-util");
var translation_messages_file_reader_1 = require("./translation-messages-file-reader");
var util_1 = require("util");
var auto_translate_service_spec_1 = require("../autotranslate/auto-translate-service.spec");
var dist_1 = require("ngx-i18nsupport-lib/dist");
/**
 * Created by martin on 18.02.2017.
 * Testcases for XliffMerge Format XLIFF 1.2.
 */
describe('XliffMerge XLIFF 1.2 format tests', function () {
    /**
     * Workdir, not in git.
     * Cleaned up for every test.
     * Tests, that work on files, copy everything they need into this directory.
     * @type {string}
     */
    var WORKDIR = 'test/work/';
    var SRCDIR = 'test/testdata/i18n/';
    var ENCODING = 'UTF-8';
    /**
     * Helper function to read Xliff from File
     * @type {string}
     */
    function readXliff(path) {
        if (!path) {
            throw new Error('oops, no file');
        }
        try {
            return translation_messages_file_reader_1.TranslationMessagesFileReader.fromFile('xlf', path, ENCODING);
        }
        catch (err) {
            console.log(util_1.format('error reading %s: "%s"', path, err.message));
            return null;
        }
    }
    describe('Merge process checks for format xlf', function () {
        var MASTER1FILE = 'ngExtractedMaster1.xlf';
        var MASTER2FILE = 'ngExtractedMaster2.xlf';
        var MASTER1SRC = SRCDIR + MASTER1FILE;
        var MASTER2SRC = SRCDIR + MASTER2FILE;
        var MASTERFILE = 'messages.xlf';
        var MASTER = WORKDIR + MASTERFILE;
        var ID_TRANSLATED_SCHLIESSEN = "1ead0ad1063d0c9e005fe56c9529aef4c1ef9d21"; // an ID from ngExtractedMaster1.xlf
        var ID_REMOVED_STARTSEITE = "c536247d71822c272f8e9155f831e0efb5aa0d31"; // an ID that will be removed in master2
        var ID_REMOVED_SUCHEN = "d17aee1ddf9fe1c0afe8440e02ef5ab906a69699"; // another removed ID
        var ID_WITH_PLACEHOLDER = "af0819ea4a5db68737ebcabde2f5e432b66352e8";
        var ID_MISSING_SOURCEREF = '57e605bfa130afb4de4ee40e496e854a9e8a28a7';
        var ID_DESCRIPTION_CHANGE = 'DescriptionAndMeaning1';
        var ID_DESCRIPTION_ADD = 'AddDescriptionAndMeaning';
        var ID_DESCRIPTION_REMOVE = 'RemoveDescriptionAndMeaning';
        beforeEach(function () {
            if (!fs.existsSync(WORKDIR)) {
                fs.mkdirSync(WORKDIR);
            }
            // cleanup workdir
            file_util_1.FileUtil.deleteFolderContentRecursive(WORKDIR);
        });
        it('should fix source language, if the masters lang is not the default', function (done) {
            file_util_1.FileUtil.copy(MASTER1SRC, MASTER);
            var master = readXliff(MASTER);
            expect(master.sourceLanguage()).toBe('en'); // master is german, but ng-18n extracts it as en
            var ws = new writer_to_string_1.WriterToString();
            var commandOut = new command_output_1.CommandOutput(ws);
            var profileContent = {
                xliffmergeOptions: {
                    defaultLanguage: 'de',
                    srcDir: WORKDIR,
                    genDir: WORKDIR,
                    i18nFile: MASTERFILE,
                }
            };
            var xliffMergeCmd = xliff_merge_1.XliffMerge.createFromOptions(commandOut, { languages: ['de'] }, profileContent);
            xliffMergeCmd.run();
            expect(ws.writtenData()).not.toContain('ERROR');
            expect(ws.writtenData()).toContain('master says to have source-language="en"');
            expect(ws.writtenData()).toContain('changed master source-language="en" to "de"');
            var newmaster = readXliff(MASTER);
            expect(newmaster.sourceLanguage()).toBe('de'); // master is german
            done();
        });
        it('should generate translated file for default language de from master', function (done) {
            file_util_1.FileUtil.copy(MASTER1SRC, MASTER);
            var ws = new writer_to_string_1.WriterToString();
            var commandOut = new command_output_1.CommandOutput(ws);
            var profileContent = {
                xliffmergeOptions: {
                    defaultLanguage: 'de',
                    srcDir: WORKDIR,
                    genDir: WORKDIR,
                    i18nFile: MASTERFILE,
                    useSourceAsTarget: false
                }
            };
            var xliffMergeCmd = xliff_merge_1.XliffMerge.createFromOptions(commandOut, { languages: ['de'] }, profileContent);
            xliffMergeCmd.run();
            expect(ws.writtenData()).not.toContain('ERROR');
            var langFile = readXliff(xliffMergeCmd.generatedI18nFile('de'));
            expect(langFile.sourceLanguage()).toBe('de');
            expect(langFile.targetLanguage()).toBe('de');
            langFile.forEachTransUnit(function (tu) {
                expect(tu.targetContent()).toBe(tu.sourceContent());
                expect(tu.targetState()).toBe('final');
            });
            done();
        });
        it('should generate translated file for all languages', function (done) {
            file_util_1.FileUtil.copy(MASTER1SRC, MASTER);
            var ws = new writer_to_string_1.WriterToString();
            var commandOut = new command_output_1.CommandOutput(ws);
            var profileContent = {
                xliffmergeOptions: {
                    defaultLanguage: 'de',
                    srcDir: WORKDIR,
                    genDir: WORKDIR,
                    i18nFile: MASTERFILE
                }
            };
            var xliffMergeCmd = xliff_merge_1.XliffMerge.createFromOptions(commandOut, { languages: ['de', 'en'] }, profileContent);
            xliffMergeCmd.run();
            expect(ws.writtenData()).not.toContain('ERROR');
            var langFileGerman = readXliff(xliffMergeCmd.generatedI18nFile('de'));
            expect(langFileGerman.sourceLanguage()).toBe('de');
            expect(langFileGerman.targetLanguage()).toBe('de');
            langFileGerman.forEachTransUnit(function (tu) {
                expect(tu.targetContent()).toBe(tu.sourceContent());
                expect(tu.targetState()).toBe('final');
            });
            var langFileEnglish = readXliff(xliffMergeCmd.generatedI18nFile('en'));
            expect(langFileEnglish.sourceLanguage()).toBe('de');
            expect(langFileEnglish.targetLanguage()).toBe('en');
            langFileEnglish.forEachTransUnit(function (tu) {
                expect(tu.targetContent()).toBe(tu.sourceContent());
                expect(tu.targetState()).toBe('new');
            });
            done();
        });
        it('should generate translated file for all languages with empty targets for non default languages', function (done) {
            file_util_1.FileUtil.copy(MASTER1SRC, MASTER);
            var ws = new writer_to_string_1.WriterToString();
            var commandOut = new command_output_1.CommandOutput(ws);
            var profileContent = {
                xliffmergeOptions: {
                    defaultLanguage: 'de',
                    srcDir: WORKDIR,
                    genDir: WORKDIR,
                    i18nFile: MASTERFILE,
                    useSourceAsTarget: false
                }
            };
            var xliffMergeCmd = xliff_merge_1.XliffMerge.createFromOptions(commandOut, { languages: ['de', 'en'] }, profileContent);
            xliffMergeCmd.run();
            expect(ws.writtenData()).not.toContain('ERROR');
            var langFileGerman = readXliff(xliffMergeCmd.generatedI18nFile('de'));
            expect(langFileGerman.sourceLanguage()).toBe('de');
            expect(langFileGerman.targetLanguage()).toBe('de');
            langFileGerman.forEachTransUnit(function (tu) {
                expect(tu.targetContent()).toBe(tu.sourceContent());
                expect(tu.targetState()).toBe('final');
            });
            var langFileEnglish = readXliff(xliffMergeCmd.generatedI18nFile('en'));
            expect(langFileEnglish.sourceLanguage()).toBe('de');
            expect(langFileEnglish.targetLanguage()).toBe('en');
            langFileEnglish.forEachTransUnit(function (tu) {
                expect(tu.targetContent()).toBe('');
                expect(tu.targetState()).toBe('new');
            });
            done();
        });
        it('should merge translated file for all languages', function (done) {
            file_util_1.FileUtil.copy(MASTER1SRC, MASTER);
            var ws = new writer_to_string_1.WriterToString();
            var commandOut = new command_output_1.CommandOutput(ws);
            var profileContent = {
                xliffmergeOptions: {
                    defaultLanguage: 'de',
                    srcDir: WORKDIR,
                    genDir: WORKDIR,
                    i18nFile: MASTERFILE
                }
            };
            var xliffMergeCmd = xliff_merge_1.XliffMerge.createFromOptions(commandOut, { languages: ['de', 'en'] }, profileContent);
            xliffMergeCmd.run();
            expect(ws.writtenData()).not.toContain('ERROR');
            // now translate some texts in the English version
            var langFileEnglish = readXliff(xliffMergeCmd.generatedI18nFile('en'));
            var tu = langFileEnglish.transUnitWithId(ID_TRANSLATED_SCHLIESSEN);
            expect(tu).toBeTruthy();
            tu.translate('Close');
            translation_messages_file_reader_1.TranslationMessagesFileReader.save(langFileEnglish);
            // next step, use another master
            file_util_1.FileUtil.copy(MASTER2SRC, MASTER);
            ws = new writer_to_string_1.WriterToString();
            commandOut = new command_output_1.CommandOutput(ws);
            xliffMergeCmd = xliff_merge_1.XliffMerge.createFromOptions(commandOut, { languages: ['de', 'en'] }, profileContent);
            xliffMergeCmd.run();
            expect(ws.writtenData()).not.toContain('ERROR');
            expect(ws.writtenData()).toContain('merged 12 trans-units from master to "en"');
            expect(ws.writtenData()).toContain('removed 3 unused trans-units in "en"');
            // look, that the new file contains the old translation
            langFileEnglish = readXliff(xliffMergeCmd.generatedI18nFile('en'));
            expect(langFileEnglish.transUnitWithId(ID_TRANSLATED_SCHLIESSEN).targetContent()).toBe('Close');
            // look, that the removed IDs are really removed.
            expect(langFileEnglish.transUnitWithId(ID_REMOVED_STARTSEITE)).toBeFalsy();
            expect(langFileEnglish.transUnitWithId(ID_REMOVED_SUCHEN)).toBeFalsy();
            done();
        });
        it('should merge changed source content to already translated files', function (done) {
            var ID_SOURCE_CHANGE = 'sourcechanged';
            var ID_SOURCE_CHANGE_STATE_FINAL = 'sourcechanged_state_final';
            var TRANSLATED_FILE = 'WithSourceContentChange.en.xlf';
            file_util_1.FileUtil.copy(SRCDIR + 'ngExtractedMasterWithSourceContentChange.xlf', MASTER);
            file_util_1.FileUtil.copy(SRCDIR + TRANSLATED_FILE, WORKDIR + 'messages.en.xlf');
            var ws = new writer_to_string_1.WriterToString();
            var commandOut = new command_output_1.CommandOutput(ws);
            var profileContent = {
                xliffmergeOptions: {
                    defaultLanguage: 'de',
                    srcDir: WORKDIR,
                    genDir: WORKDIR,
                    i18nFile: MASTERFILE
                }
            };
            var xliffMergeCmd = xliff_merge_1.XliffMerge.createFromOptions(commandOut, { languages: ['de', 'en'], verbose: true }, profileContent);
            xliffMergeCmd.run();
            expect(ws.writtenData()).not.toContain('ERROR');
            expect(ws.writtenData()).toContain('WARNING: transferred 2 changed source content from master to "en"');
            // check that source is changed
            var langFileEnglish = readXliff(xliffMergeCmd.generatedI18nFile('en'));
            var tu = langFileEnglish.transUnitWithId(ID_SOURCE_CHANGE);
            expect(tu).toBeTruthy();
            expect(tu.sourceContent()).toBe('Test Änderung Source (geändert!)');
            expect(tu.targetState()).toBe(dist_1.STATE_NEW);
            var tuFinal = langFileEnglish.transUnitWithId(ID_SOURCE_CHANGE_STATE_FINAL);
            expect(tuFinal).toBeTruthy();
            expect(tuFinal.sourceContent()).toBe('Test Änderung Source (state final, geändert!)');
            expect(tuFinal.targetState()).toBe(dist_1.STATE_TRANSLATED);
            done();
        });
        it('should merge missing source refs to already translated files', function (done) {
            var MISSING_SOURCEREF_FILE = 'missingSourcerefs.en.xlf';
            file_util_1.FileUtil.copy(MASTER1SRC, MASTER);
            file_util_1.FileUtil.copy(SRCDIR + MISSING_SOURCEREF_FILE, WORKDIR + 'messages.en.xlf');
            var ws = new writer_to_string_1.WriterToString();
            var commandOut = new command_output_1.CommandOutput(ws);
            var profileContent = {
                xliffmergeOptions: {
                    defaultLanguage: 'de',
                    srcDir: WORKDIR,
                    genDir: WORKDIR,
                    i18nFile: MASTERFILE
                }
            };
            var xliffMergeCmd = xliff_merge_1.XliffMerge.createFromOptions(commandOut, { languages: ['de', 'en'] }, profileContent);
            xliffMergeCmd.run();
            expect(ws.writtenData()).not.toContain('ERROR');
            expect(ws.writtenData()).toContain('WARNING: transferred 2 source references');
            // check that there is a translated english version with missing sourcerefs
            var langFileEnglish = readXliff(xliffMergeCmd.generatedI18nFile('en'));
            var tu = langFileEnglish.transUnitWithId(ID_MISSING_SOURCEREF);
            expect(tu).toBeTruthy();
            expect(tu.targetContent()).toBe('News');
            expect(tu.sourceReferences().length).toBe(2);
            done();
        });
        it('should merge changed descriptions and meanings to already translated files', function (done) {
            var TRANSLATED_FILE = 'WithDescriptions.en.xlf';
            file_util_1.FileUtil.copy(SRCDIR + 'ngExtractedMasterWithDescriptions.xlf', MASTER);
            file_util_1.FileUtil.copy(SRCDIR + TRANSLATED_FILE, WORKDIR + 'messages.en.xlf');
            var ws = new writer_to_string_1.WriterToString();
            var commandOut = new command_output_1.CommandOutput(ws);
            var profileContent = {
                xliffmergeOptions: {
                    defaultLanguage: 'de',
                    srcDir: WORKDIR,
                    genDir: WORKDIR,
                    i18nFile: MASTERFILE
                }
            };
            var xliffMergeCmd = xliff_merge_1.XliffMerge.createFromOptions(commandOut, { languages: ['de', 'en'], verbose: true }, profileContent);
            xliffMergeCmd.run();
            expect(ws.writtenData()).not.toContain('ERROR');
            expect(ws.writtenData()).toContain('WARNING: transferred 3 changed descriptions/meanings from master to "en"');
            // check that description and meaning are changed
            var langFileEnglish = readXliff(xliffMergeCmd.generatedI18nFile('en'));
            var tu = langFileEnglish.transUnitWithId(ID_DESCRIPTION_CHANGE);
            expect(tu).toBeTruthy();
            expect(tu.description()).toBe('changed description');
            expect(tu.meaning()).toBe('changed meaning');
            // added description
            var tuAdded = langFileEnglish.transUnitWithId(ID_DESCRIPTION_ADD);
            expect(tuAdded).toBeTruthy();
            expect(tuAdded.description()).toBe('added description');
            expect(tuAdded.meaning()).toBe('added meaning');
            // removed description
            var tuRemoved = langFileEnglish.transUnitWithId(ID_DESCRIPTION_REMOVE);
            expect(tuRemoved).toBeTruthy();
            expect(tuRemoved.description()).toBeNull();
            expect(tuRemoved.meaning()).toBeNull();
            done();
        });
        it('should translate messages with placeholder', function (done) {
            file_util_1.FileUtil.copy(MASTER2SRC, MASTER);
            var ws = new writer_to_string_1.WriterToString();
            var commandOut = new command_output_1.CommandOutput(ws);
            var profileContent = {
                xliffmergeOptions: {
                    defaultLanguage: 'de',
                    srcDir: WORKDIR,
                    genDir: WORKDIR,
                    i18nFile: MASTERFILE
                }
            };
            var xliffMergeCmd = xliff_merge_1.XliffMerge.createFromOptions(commandOut, { languages: ['de', 'en'] }, profileContent);
            xliffMergeCmd.run();
            expect(ws.writtenData()).not.toContain('ERROR');
            // now translate some texts in the English version
            var langFileEnglish = readXliff(xliffMergeCmd.generatedI18nFile('en'));
            var tu = langFileEnglish.transUnitWithId(ID_WITH_PLACEHOLDER);
            expect(tu).toBeTruthy();
            tu.translate('Item <x id="INTERPOLATION"/> of <x id="INTERPOLATION_1"/> added.');
            translation_messages_file_reader_1.TranslationMessagesFileReader.save(langFileEnglish);
            // look, that the new file contains the translation
            langFileEnglish = readXliff(xliffMergeCmd.generatedI18nFile('en'));
            expect(langFileEnglish.transUnitWithId(ID_WITH_PLACEHOLDER).targetContent()).toBe('Item <x id="INTERPOLATION"/> of <x id="INTERPOLATION_1"/> added.');
            expect(langFileEnglish.transUnitWithId(ID_WITH_PLACEHOLDER).targetContentNormalized().asDisplayString()).toBe('Item {{0}} of {{1}} added.');
            done();
        });
        it('should report an error with filename when there is something wrong', function (done) {
            file_util_1.FileUtil.copy(SRCDIR + 'schrott.xlf', MASTER);
            var ws = new writer_to_string_1.WriterToString();
            var commandOut = new command_output_1.CommandOutput(ws);
            // we activate ngxtranslate support, so that the wrong close tag in schrott produces an error
            var profileContent = {
                xliffmergeOptions: {
                    defaultLanguage: 'de',
                    srcDir: WORKDIR,
                    genDir: WORKDIR,
                    i18nFile: MASTERFILE,
                    supportNgxTranslate: true
                }
            };
            var xliffMergeCmd = xliff_merge_1.XliffMerge.createFromOptions(commandOut, { languages: ['de', 'en'] }, profileContent);
            try {
                xliffMergeCmd.run();
            }
            catch (e) { }
            expect(ws.writtenData()).toContain('ERROR');
            expect(ws.writtenData()).toContain('messages.de.xlf');
            done();
        });
        describe('autotranslate via google translate', function () {
            var apikey;
            var ID_NACHRICHTEN = '57e605bfa130afb4de4ee40e496e854a9e8a28a7';
            var ID_BESCHREIBUNG_WITH_PLACEHOLDER = 'a52ba049c16778bdb2e5a19a41acaadf87b104dc';
            var ID_ICUMESSAGE = 'efec69fdcf74bd6d640b2a771558b7b09e271c28';
            beforeEach(function () {
                apikey = auto_translate_service_spec_1.getApiKey();
            });
            it('should detect invalid key', function (done) {
                if (!apikey) {
                    // skip test
                    done();
                    return;
                }
                file_util_1.FileUtil.copy(MASTER1SRC, MASTER);
                var ws = new writer_to_string_1.WriterToString();
                var commandOut = new command_output_1.CommandOutput(ws);
                var profileContent = {
                    xliffmergeOptions: {
                        defaultLanguage: 'de',
                        srcDir: WORKDIR,
                        genDir: WORKDIR,
                        i18nFile: MASTERFILE,
                        autotranslate: true,
                        apikey: 'lmaa'
                    }
                };
                var xliffMergeCmd = xliff_merge_1.XliffMerge.createFromOptions(commandOut, { languages: ['de', 'en'] }, profileContent);
                xliffMergeCmd.run(function (retcode) {
                    expect(ws.writtenData()).toContain('API key not valid');
                    done();
                });
            });
            it('should auto translate file', function (done) {
                if (!apikey) {
                    // skip test
                    done();
                    return;
                }
                file_util_1.FileUtil.copy(MASTER1SRC, MASTER);
                var ws = new writer_to_string_1.WriterToString();
                var commandOut = new command_output_1.CommandOutput(ws);
                var profileContent = {
                    xliffmergeOptions: {
                        defaultLanguage: 'de',
                        srcDir: WORKDIR,
                        genDir: WORKDIR,
                        i18nFile: MASTERFILE,
                        autotranslate: true,
                        apikey: apikey
                    }
                };
                var xliffMergeCmd = xliff_merge_1.XliffMerge.createFromOptions(commandOut, { languages: ['de', 'en'] }, profileContent);
                xliffMergeCmd.run(function () {
                    expect(ws.writtenData()).not.toContain('ERROR');
                    var langFileEnglish = readXliff(xliffMergeCmd.generatedI18nFile('en'));
                    expect(langFileEnglish.targetLanguage()).toBe('en');
                    var tu = langFileEnglish.transUnitWithId(ID_NACHRICHTEN);
                    expect(tu.sourceContent()).toBe('Nachrichten');
                    expect(tu.targetContent()).toBe('news');
                    expect(tu.targetState()).toBe('translated');
                    var tuICU = langFileEnglish.transUnitWithId(ID_ICUMESSAGE);
                    expect(tuICU.sourceContent()).toContain('VAR_PLURAL');
                    expect(tuICU.targetContent()).toBe('{VAR_PLURAL, plural, =0 {no sheep} =1 {1 sheep} other {x sheep}}');
                    expect(tuICU.targetState()).toBe('translated');
                    done();
                });
            });
            it('should auto translate file with region code (which will be ignored)', function (done) {
                if (!apikey) {
                    // skip test
                    done();
                    return;
                }
                file_util_1.FileUtil.copy(MASTER1SRC, MASTER);
                var ws = new writer_to_string_1.WriterToString();
                var commandOut = new command_output_1.CommandOutput(ws);
                var profileContent = {
                    xliffmergeOptions: {
                        defaultLanguage: 'de-de',
                        srcDir: WORKDIR,
                        genDir: WORKDIR,
                        i18nFile: MASTERFILE,
                        autotranslate: true,
                        apikey: apikey
                    }
                };
                var xliffMergeCmd = xliff_merge_1.XliffMerge.createFromOptions(commandOut, { languages: ['de-de', 'en-us'] }, profileContent);
                xliffMergeCmd.run(function (retcode) {
                    expect(ws.writtenData()).not.toContain('ERROR');
                    var langFileEnglish = readXliff(xliffMergeCmd.generatedI18nFile('en-us'));
                    expect(langFileEnglish).toBeTruthy();
                    if (langFileEnglish) {
                        expect(langFileEnglish.targetLanguage()).toBe('en-us');
                        var tu = langFileEnglish.transUnitWithId(ID_BESCHREIBUNG_WITH_PLACEHOLDER);
                        expect(tu.sourceContentNormalized().asDisplayString()).toBe('Beschreibung zu {{0}} ({{1}})');
                        expect(tu.targetContentNormalized().asDisplayString()).toBe('Description of {{0}} ({{1}})');
                        expect(tu.targetState()).toBe('translated');
                    }
                    done();
                });
            });
            it('should detect unsupported language when using auto translate', function (done) {
                if (!apikey) {
                    // skip test
                    done();
                    return;
                }
                file_util_1.FileUtil.copy(MASTER1SRC, MASTER);
                var ws = new writer_to_string_1.WriterToString();
                var commandOut = new command_output_1.CommandOutput(ws);
                var profileContent = {
                    xliffmergeOptions: {
                        defaultLanguage: 'de',
                        languages: ['de', 'xy', 'en'],
                        srcDir: WORKDIR,
                        genDir: WORKDIR,
                        i18nFile: MASTERFILE,
                        autotranslate: true,
                        apikey: apikey
                    }
                };
                var xliffMergeCmd = xliff_merge_1.XliffMerge.createFromOptions(commandOut, { verbose: true }, profileContent);
                xliffMergeCmd.run(function (retcode) {
                    expect(ws.writtenData()).toContain('ERROR');
                    expect(ws.writtenData()).toContain('"xy" not supported');
                    var langFileEnglish = readXliff(xliffMergeCmd.generatedI18nFile('en'));
                    expect(langFileEnglish).toBeTruthy();
                    if (langFileEnglish) {
                        expect(langFileEnglish.targetLanguage()).toBe('en');
                        var tu = langFileEnglish.transUnitWithId(ID_BESCHREIBUNG_WITH_PLACEHOLDER);
                        expect(tu.sourceContentNormalized().asDisplayString()).toBe('Beschreibung zu {{0}} ({{1}})');
                        expect(tu.targetContentNormalized().asDisplayString()).toBe('Description of {{0}} ({{1}})');
                        expect(tu.targetState()).toBe('translated');
                    }
                    var langFileXy = readXliff(xliffMergeCmd.generatedI18nFile('xy'));
                    expect(langFileXy).toBeTruthy();
                    if (langFileXy) {
                        expect(langFileXy.targetLanguage()).toBe('xy');
                        var tu = langFileXy.transUnitWithId(ID_BESCHREIBUNG_WITH_PLACEHOLDER);
                        expect(tu.sourceContentNormalized().asDisplayString()).toBe('Beschreibung zu {{0}} ({{1}})');
                        expect(tu.targetContentNormalized().asDisplayString()).toBe('Beschreibung zu {{0}} ({{1}})');
                        expect(tu.targetState()).toBe('new');
                    }
                    done();
                });
            });
        });
    });
    describe('ngx-translate processing for format xlf', function () {
        var MASTER1FILE = 'ngxtranslate.xlf';
        var MASTER1SRC = SRCDIR + MASTER1FILE;
        var MASTER_WITHOUT_NGX_TRANSLATE_STUFF = SRCDIR + 'ngExtractedMaster1.xlf';
        var MASTERFILE = 'messages.xlf';
        var MASTER = WORKDIR + MASTERFILE;
        var ID_NODESC_NOMEANING = "a8f10794864e49b16224b22faaf4a86229b6c53d"; // an ID without set meaning and description
        var ID_MONDAY = "84e8cd8ba480129d90f512cc3462bb43efcf389f"; // an ID from ngxtranslate.xlf with meaning "x.y" and description "ngx-translate"
        beforeEach(function () {
            if (!fs.existsSync(WORKDIR)) {
                fs.mkdirSync(WORKDIR);
            }
            // cleanup workdir
            file_util_1.FileUtil.deleteFolderContentRecursive(WORKDIR);
        });
        it('should return null for unset description and meaning in master  xlf file', function (done) {
            file_util_1.FileUtil.copy(MASTER1SRC, MASTER);
            var master = readXliff(MASTER);
            expect(master.transUnitWithId(ID_NODESC_NOMEANING).description()).toBeFalsy();
            expect(master.transUnitWithId(ID_NODESC_NOMEANING).meaning()).toBeFalsy();
            done();
        });
        it('should find description and meaning in master  xlf file', function (done) {
            file_util_1.FileUtil.copy(MASTER1SRC, MASTER);
            var master = readXliff(MASTER);
            expect(master.transUnitWithId(ID_MONDAY).description()).toBe('ngx-translate');
            expect(master.transUnitWithId(ID_MONDAY).meaning()).toBe('dateservice.monday');
            done();
        });
        it('should find description and meaning in translated xlf file', function (done) {
            file_util_1.FileUtil.copy(MASTER1SRC, MASTER);
            var ws = new writer_to_string_1.WriterToString();
            var commandOut = new command_output_1.CommandOutput(ws);
            var profileContent = {
                xliffmergeOptions: {
                    defaultLanguage: 'de',
                    srcDir: WORKDIR,
                    genDir: WORKDIR,
                    i18nFile: MASTERFILE
                }
            };
            var xliffMergeCmd = xliff_merge_1.XliffMerge.createFromOptions(commandOut, { languages: ['de'] }, profileContent);
            xliffMergeCmd.run();
            expect(ws.writtenData()).not.toContain('ERROR');
            var langFile = readXliff(xliffMergeCmd.generatedI18nFile('de'));
            expect(langFile.transUnitWithId(ID_MONDAY).description()).toBe('ngx-translate');
            expect(langFile.transUnitWithId(ID_MONDAY).meaning()).toBe('dateservice.monday');
            done();
        });
        it('should write translation json file for ngx-translate', function (done) {
            file_util_1.FileUtil.copy(MASTER1SRC, MASTER);
            var ws = new writer_to_string_1.WriterToString();
            var commandOut = new command_output_1.CommandOutput(ws);
            var profileContent = {
                xliffmergeOptions: {
                    defaultLanguage: 'de',
                    srcDir: WORKDIR,
                    genDir: WORKDIR,
                    i18nFile: MASTERFILE,
                    supportNgxTranslate: true
                }
            };
            var xliffMergeCmd = xliff_merge_1.XliffMerge.createFromOptions(commandOut, { languages: ['de'] }, profileContent);
            xliffMergeCmd.run();
            expect(ws.writtenData()).not.toContain('ERROR');
            var translationJsonFilename = xliffMergeCmd.generatedNgxTranslateFile('de');
            expect(file_util_1.FileUtil.exists(translationJsonFilename)).toBeTruthy();
            var fileContent = file_util_1.FileUtil.read(translationJsonFilename, 'UTF-8');
            var translation = JSON.parse(fileContent);
            expect(translation).toBeTruthy();
            expect(translation.myapp).toBeTruthy();
            expect(translation.dateservice.monday).toBe("Montag");
            expect(translation.dateservice.friday).toBe("Freitag");
            expect(translation.explicitlysetids.test1).toBe("Explizit gesetzte ID");
            done();
        });
        it('should handle placeholders in json file for ngx-translate', function (done) {
            file_util_1.FileUtil.copy(MASTER1SRC, MASTER);
            var ws = new writer_to_string_1.WriterToString();
            var commandOut = new command_output_1.CommandOutput(ws);
            var profileContent = {
                xliffmergeOptions: {
                    defaultLanguage: 'de',
                    srcDir: WORKDIR,
                    genDir: WORKDIR,
                    i18nFile: MASTERFILE,
                    supportNgxTranslate: true
                }
            };
            var xliffMergeCmd = xliff_merge_1.XliffMerge.createFromOptions(commandOut, { languages: ['de'] }, profileContent);
            xliffMergeCmd.run();
            expect(ws.writtenData()).not.toContain('ERROR');
            var translationJsonFilename = xliffMergeCmd.generatedNgxTranslateFile('de');
            expect(file_util_1.FileUtil.exists(translationJsonFilename)).toBeTruthy();
            var fileContent = file_util_1.FileUtil.read(translationJsonFilename, 'UTF-8');
            var translation = JSON.parse(fileContent);
            expect(translation).toBeTruthy();
            expect(translation.placeholders).toBeTruthy();
            expect(translation.placeholders.test1placeholder).toBe('{{0}}: Eine Nachricht mit einem Platzhalter');
            expect(translation.placeholders.test2placeholder).toBe('{{0}}: Eine Nachricht mit 2 Platzhaltern: {{1}}');
            expect(translation.placeholders.test2placeholderRepeated).toBe('{{0}}: Eine Nachricht mit 2 Platzhaltern: {{0}} {{1}}');
            done();
        });
        it('should handle embedded html markup in json file for ngx-translate', function (done) {
            file_util_1.FileUtil.copy(MASTER1SRC, MASTER);
            var ws = new writer_to_string_1.WriterToString();
            var commandOut = new command_output_1.CommandOutput(ws);
            var profileContent = {
                xliffmergeOptions: {
                    defaultLanguage: 'de',
                    srcDir: WORKDIR,
                    genDir: WORKDIR,
                    i18nFile: MASTERFILE,
                    supportNgxTranslate: true
                }
            };
            var xliffMergeCmd = xliff_merge_1.XliffMerge.createFromOptions(commandOut, { languages: ['de'] }, profileContent);
            xliffMergeCmd.run();
            expect(ws.writtenData()).not.toContain('ERROR');
            var translationJsonFilename = xliffMergeCmd.generatedNgxTranslateFile('de');
            expect(file_util_1.FileUtil.exists(translationJsonFilename)).toBeTruthy();
            var fileContent = file_util_1.FileUtil.read(translationJsonFilename, 'UTF-8');
            var translation = JSON.parse(fileContent);
            expect(translation).toBeTruthy();
            expect(translation.embeddedhtml).toBeTruthy();
            expect(translation.embeddedhtml.bold).toBe('Diese Nachricht ist <b>WICHTIG</b>');
            expect(translation.embeddedhtml.boldstrong).toBe('Diese Nachricht ist <b><strong>SEHR WICHTIG</strong></b>');
            expect(translation.embeddedhtml.strange).toBe('Diese Nachricht ist <strange>{{0}}</strange>');
            done();
        });
        it('should not write empty translation json file for ngx-translate, if there are no translation (issue #18)', function (done) {
            file_util_1.FileUtil.copy(MASTER_WITHOUT_NGX_TRANSLATE_STUFF, MASTER);
            var ws = new writer_to_string_1.WriterToString();
            var commandOut = new command_output_1.CommandOutput(ws);
            var profileContent = {
                xliffmergeOptions: {
                    defaultLanguage: 'de',
                    srcDir: WORKDIR,
                    genDir: WORKDIR,
                    i18nFile: MASTERFILE,
                    supportNgxTranslate: true
                }
            };
            var xliffMergeCmd = xliff_merge_1.XliffMerge.createFromOptions(commandOut, { languages: ['de'] }, profileContent);
            xliffMergeCmd.run();
            expect(ws.writtenData()).not.toContain('ERROR');
            var translationJsonFilename = xliffMergeCmd.generatedNgxTranslateFile('de');
            expect(file_util_1.FileUtil.exists(translationJsonFilename)).toBeFalsy();
            done();
        });
    });
});
//# sourceMappingURL=S:/experimente/ngx-i18nsupport/xliffmerge/xlf12-merge.spec.js.map