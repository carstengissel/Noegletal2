"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var file_util_1 = require("../common/file-util");
var util_1 = require("util");
var auto_translate_service_1 = require("./auto-translate-service");
/**
 * Created by roobm on 06.07.2017.
 * Testcases for the autotranslate service.
 */
/**
 * Get google Translate API key from file.
 * Which file is read, is determined by env var API_KEY_FILE.
 * @return a (hopefully) valid API key or null
 */
function getApiKey() {
    var apikeyPath = process.env.API_KEY_FILE;
    if (apikeyPath) {
        if (fs.existsSync(apikeyPath)) {
            return file_util_1.FileUtil.read(apikeyPath, 'utf-8');
        }
        else {
            throw new Error(util_1.format('api key file not found: API_KEY_FILE=%s', apikeyPath));
        }
    }
    else {
        return null;
    }
}
exports.getApiKey = getApiKey;
describe('Autotranslate tests', function () {
    var apikey;
    var service;
    beforeEach(function () {
        apikey = getApiKey();
        if (apikey) {
            service = new auto_translate_service_1.AutoTranslateService(apikey);
        }
        else {
            service = null;
        }
    });
    it('should detect wrong api key', function (done) {
        if (!service) {
            done();
            return;
        }
        service.setApiKey('lmaa');
        service.translateMultipleStrings(['a', 'b'], 'en', 'de').subscribe(function (translations) {
            expect('should not be called').toBe('');
            done();
        }, function (err) {
            expect(err.message).toContain('API key not valid');
            done();
        });
    });
    it('should detect unsupported language', function (done) {
        if (!service) {
            done();
            return;
        }
        service.translateMultipleStrings(['a', 'b'], 'en', 'klingon').subscribe(function (translations) {
            expect('should not be called').toBe('');
            done();
        }, function (err) {
            expect(err.message).toBe('Translation from "en" to "klingon" not supported');
            done();
        });
    });
    it('should translate simple words form en to de', function (done) {
        if (!service) {
            done();
            return;
        }
        service.translateMultipleStrings(['Hello', 'world'], 'en', 'de').subscribe(function (translations) {
            expect(translations).toBeTruthy();
            expect(translations.length).toBe(2);
            expect(translations[0]).toBe('Hallo');
            expect(translations[1]).toBe('Welt');
            done();
        }, function (err) {
            expect(err.message).toBe(''); // should not be invoked
            done();
        });
    });
    it('should ignore region codes', function (done) {
        if (!service) {
            done();
            return;
        }
        service.translateMultipleStrings(['Hello', 'world'], 'en-uk', 'de-ch').subscribe(function (translations) {
            expect(translations).toBeTruthy();
            expect(translations.length).toBe(2);
            expect(translations[0]).toBe('Hallo');
            expect(translations[1]).toBe('Welt');
            done();
        }, function (err) {
            expect(err.message).toBe(''); // should not be invoked
            done();
        });
    });
    it('should translate very large number of messages', function (done) {
        if (!service) {
            done();
            return;
        }
        var NUM = 1000; // internal google limit is 128, so service has to split it...
        var manyMessages = [];
        for (var i = 0; i < NUM; i++) {
            manyMessages.push('Hello world!');
        }
        service.translateMultipleStrings(manyMessages, 'en', 'de').subscribe(function (translations) {
            expect(translations).toBeTruthy();
            expect(translations.length).toBe(NUM);
            done();
        }, function (err) {
            expect(err.message).toBe(''); // should not be invoked
            done();
        });
    });
    it('should translate very long messages that exceeds google size limit of 5000 chars ', function (done) {
        if (!service) {
            done();
            return;
        }
        var longString = 'abcdefghijklmnopqrstuvwabcdefghijklmnopqrstuvwabcdefghijklmnopqrstuvwabcdefghijklmnopqrstuvwabcdefghijklmnopqrstuvwabcdefghijklmnopqrstuvwabcdefghijklmnopqrstuvwabcdefghijklmnopqrstuvwabcdefghijklmnopqrstuvwabcdefghijklmnopqrstuvw';
        var longMessages = [];
        var NUM = 30; // 30 * 260char = 5200
        for (var i = 0; i < NUM; i++) {
            longMessages.push(longString);
        }
        service.translateMultipleStrings(longMessages, 'en', 'de').subscribe(function (translations) {
            expect(translations).toBeTruthy();
            expect(translations.length).toBe(NUM);
            done();
        }, function (err) {
            expect(err.message).toBe(''); // should not be invoked
            done();
        });
    });
});
//# sourceMappingURL=S:/experimente/ngx-i18nsupport/autotranslate/auto-translate-service.spec.js.map