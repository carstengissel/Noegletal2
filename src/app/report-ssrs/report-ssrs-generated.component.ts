/*
  This file is automatically generated. Any changes will be overwritten.
  Modify report-ssrs.component.ts instead.
*/
import { ChangeDetectorRef, ViewChild, AfterViewInit, Injector, OnInit, OnDestroy } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { Location } from '@angular/common';
import { Subscription } from 'rxjs/Subscription';

import { DialogService, DIALOG_PARAMETERS, DialogRef } from '@radzen/angular/dist/dialog';
import { NotificationService } from '@radzen/angular/dist/notification';
import { ContentComponent } from '@radzen/angular/dist/content';
import { HtmlComponent } from '@radzen/angular/dist/html';

import { NoegleTalService } from '../noegle-tal.service';
import {ReportService} from "../powerbi-report/report.service";
import { DomSanitizer, SafeResourceUrl, SafeUrl} from '@angular/platform-browser';



export class ReportSsrsGenerated implements AfterViewInit, OnInit, OnDestroy {
  // Components
  @ViewChild('content1') content1: ContentComponent;
  @ViewChild('html0') html0: HtmlComponent;

  router: Router;

  cd: ChangeDetectorRef;

  route: ActivatedRoute;

  notificationService: NotificationService;

  dialogService: DialogService;

  dialogRef: DialogRef;

  _location: Location;

  _subscription: Subscription;

  noegleTal: NoegleTalService;

  ReportId: any;

  filterParm: any;

  visReport: any;

  parameters: any;

  constructor(private injector: Injector, private reportService: ReportService, private sanitizer: DomSanitizer) {
  }

  ngOnInit() {
    this.notificationService = this.injector.get(NotificationService);

    this.dialogService = this.injector.get(DialogService);

    this.dialogRef = this.injector.get(DialogRef, null);

    this.router = this.injector.get(Router);

    this.cd = this.injector.get(ChangeDetectorRef);

    this._location = this.injector.get(Location);

    this.route = this.injector.get(ActivatedRoute);

    this.noegleTal = this.injector.get(NoegleTalService);
  }

  ngAfterViewInit() {
    this._subscription = this.route.params.subscribe(parameters => {
      if (this.dialogRef) {
        this.parameters = this.injector.get(DIALOG_PARAMETERS);
      } else {
        this.parameters = parameters;
      }
      this.load();
      this.cd.detectChanges();
    });
  }

  ngOnDestroy() {
    this._subscription.unsubscribe();
  }


  load() {
    this.ReportId = this.parameters.reportId;

    this.getSsrsReport(this.ReportId);
    // this.filterParm = "ReportId eq '" + this.ReportId + "' and Type eq 'SSRS'";
    //
    // this.noegleTal.getNoegleTalReports(`${this.filterParm}`, null, null, null, null, null, null, null)
    // .subscribe((result: any) => {
    //   this.visReport = result.value.WebUrl;
    // }, (result: any) => {
    //
    // });
  }

  // **********************************************************
  getSsrsReport(name: string): void {

    this.reportService.getReport(name)
        .subscribe(
            response => {
              let report = response;
              //this.visReport = report.webUrl;
              this.visReport = this.sanitizer.bypassSecurityTrustResourceUrl(report.webUrl);

              //this.sanitizer.bypassSecurityTrustResourceUrl(url);

              console.log('SSRS url: ' +  this.visReport);
            },
            (error: any) => {
              console.log(error);
            })
  }
  // **********************************************************
}
