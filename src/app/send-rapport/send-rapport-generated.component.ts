/*
  This file is automatically generated. Any changes will be overwritten.
  Modify send-rapport.component.ts instead.
*/
import { ChangeDetectorRef, ViewChild, AfterViewInit, Injector, OnInit, OnDestroy } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { Location } from '@angular/common';
import { Subscription } from 'rxjs/Subscription';

import { DialogService, DIALOG_PARAMETERS, DialogRef } from '@radzen/angular/dist/dialog';
import { NotificationService } from '@radzen/angular/dist/notification';
import { ContentComponent } from '@radzen/angular/dist/content';
import { LabelComponent } from '@radzen/angular/dist/label';
import { DropDownComponent } from '@radzen/angular/dist/dropdown';
import { TextBoxComponent } from '@radzen/angular/dist/textbox';
import { PickListComponent } from '@radzen/angular/dist/picklist';
import { ButtonComponent } from '@radzen/angular/dist/button';

import { NoegletalRestApiService } from '../noegletal-rest-api.service';

export class SendRapportGenerated implements AfterViewInit, OnInit, OnDestroy {
  // Components
  @ViewChild('content1') content1: ContentComponent;
  @ViewChild('label0') label0: LabelComponent;
  @ViewChild('label1') label1: LabelComponent;
  @ViewChild('ddlUserReports') ddlUserReports: DropDownComponent;
  @ViewChild('textboxSendRapportNavn') textboxSendRapportNavn: TextBoxComponent;
  @ViewChild('picklistSagsbehandler') picklistSagsbehandler: PickListComponent;
  @ViewChild('button0') button0: ButtonComponent;
  @ViewChild('button1') button1: ButtonComponent;

  router: Router;

  cd: ChangeDetectorRef;

  route: ActivatedRoute;

  notificationService: NotificationService;

  dialogService: DialogService;

  dialogRef: DialogRef;

  _location: Location;

  _subscription: Subscription;

  noegletalRestApi: NoegletalRestApiService;

  getUserReportsResult: any;

  model: any;

  getSagsBehandlereResult: any;

  parameters: any;

  selectedReport: any;

  constructor(private injector: Injector) {
  }

  ngOnInit() {
    this.notificationService = this.injector.get(NotificationService);

    this.dialogService = this.injector.get(DialogService);

    this.dialogRef = this.injector.get(DialogRef, null);

    this.router = this.injector.get(Router);

    this.cd = this.injector.get(ChangeDetectorRef);

    this._location = this.injector.get(Location);

    this.route = this.injector.get(ActivatedRoute);

    this.noegletalRestApi = this.injector.get(NoegletalRestApiService);
  }

  ngAfterViewInit() {
    this._subscription = this.route.params.subscribe(parameters => {
      if (this.dialogRef) {
        this.parameters = this.injector.get(DIALOG_PARAMETERS);
      } else {
        this.parameters = parameters;
      }
      this.load();
      this.cd.detectChanges();
    });
  }

  ngOnDestroy() {
    this._subscription.unsubscribe();
  }


  load() {
    this.noegletalRestApi.getUserReports(`${this.parameters.model}`)
    .subscribe((result: any) => {
      this.getUserReportsResult = result;
    }, (result: any) => {

    });

    this.noegletalRestApi.getSagsBehandlere()
    .subscribe((result: any) => {

    }, (result: any) => {

    });

    this.model = this.parameters.model;

    this.noegletalRestApi.getSagsBehandlere()
    .subscribe((result: any) => {
      this.getSagsBehandlereResult = result;
    }, (result: any) => {

    });
  }

  ddlUserReportsChange(event: any) {
    this.selectedReport = event;
  }

  button0Click(event: any) {
    this.dialogRef.close(null);
  }

  button1Click(event: any) {
    this.dialogRef.close(null);
  }
}
