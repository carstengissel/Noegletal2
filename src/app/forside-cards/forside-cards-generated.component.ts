/*
  This file is automatically generated. Any changes will be overwritten.
  Modify forside-cards.component.ts instead.
*/
import { ChangeDetectorRef, ViewChild, AfterViewInit, Injector, OnInit, OnDestroy } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { Location } from '@angular/common';
import { Subscription } from 'rxjs/Subscription';

import { DialogService, DIALOG_PARAMETERS, DialogRef } from '@radzen/angular/dist/dialog';
import { NotificationService } from '@radzen/angular/dist/notification';
import { ContentComponent } from '@radzen/angular/dist/content';
import { CardComponent } from '@radzen/angular/dist/card';
import { HtmlComponent } from '@radzen/angular/dist/html';
import { ButtonComponent } from '@radzen/angular/dist/button';


export class ForsideCardsGenerated implements AfterViewInit, OnInit, OnDestroy {
  // Components
  @ViewChild('content1') content1: ContentComponent;
  @ViewChild('card0') card0: CardComponent;
  @ViewChild('html0') html0: HtmlComponent;
  @ViewChild('button2') button2: ButtonComponent;
  @ViewChild('card1') card1: CardComponent;
  @ViewChild('html1') html1: HtmlComponent;
  @ViewChild('button1') button1: ButtonComponent;
  @ViewChild('card2') card2: CardComponent;
  @ViewChild('html2') html2: HtmlComponent;
  @ViewChild('button3') button3: ButtonComponent;
  @ViewChild('card5') card5: CardComponent;
  @ViewChild('html5') html5: HtmlComponent;
  @ViewChild('button4') button4: ButtonComponent;
  @ViewChild('card8') card8: CardComponent;
  @ViewChild('html8') html8: HtmlComponent;
  @ViewChild('button8') button8: ButtonComponent;
  @ViewChild('card9') card9: CardComponent;
  @ViewChild('html9') html9: HtmlComponent;
  @ViewChild('button9') button9: ButtonComponent;
  @ViewChild('card10') card10: CardComponent;
  @ViewChild('html10') html10: HtmlComponent;
  @ViewChild('button10') button10: ButtonComponent;
  @ViewChild('card11') card11: CardComponent;
  @ViewChild('html11') html11: HtmlComponent;
  @ViewChild('button11') button11: ButtonComponent;

  router: Router;

  cd: ChangeDetectorRef;

  route: ActivatedRoute;

  notificationService: NotificationService;

  dialogService: DialogService;

  dialogRef: DialogRef;

  _location: Location;

  _subscription: Subscription;

  parameters: any;

  constructor(private injector: Injector) {
  }

  ngOnInit() {
    this.notificationService = this.injector.get(NotificationService);

    this.dialogService = this.injector.get(DialogService);

    this.dialogRef = this.injector.get(DialogRef, null);

    this.router = this.injector.get(Router);

    this.cd = this.injector.get(ChangeDetectorRef);

    this._location = this.injector.get(Location);

    this.route = this.injector.get(ActivatedRoute);

  }

  ngAfterViewInit() {
    this._subscription = this.route.params.subscribe(parameters => {
      if (this.dialogRef) {
        this.parameters = this.injector.get(DIALOG_PARAMETERS);
      } else {
        this.parameters = parameters;
      }
      this.cd.detectChanges();
    });
  }

  ngOnDestroy() {
    this._subscription.unsubscribe();
  }


  button2Click(event: any) {
    if (this.dialogRef) {
      this.dialogRef.close();
    }
    this.router.navigate(['forespoergelse-ssrs', 'Bestand']);
  }

  button1Click(event: any) {
    if (this.dialogRef) {
      this.dialogRef.close();
    }
    this.router.navigate(['forespoergelse-ssrs', 'Medlemsbev√¶gelser']);
  }

  button3Click(event: any) {
    if (this.dialogRef) {
      this.dialogRef.close();
    }
    this.router.navigate(['replist']);
  }

  button4Click(event: any) {
    if (this.dialogRef) {
      this.dialogRef.close();
    }
    this.router.navigate(['replist']);
  }

  button8Click(event: any) {
    if (this.dialogRef) {
      this.dialogRef.close();
    }
    this.router.navigate(['replist']);
  }

  button9Click(event: any) {
    if (this.dialogRef) {
      this.dialogRef.close();
    }
    this.router.navigate(['replist']);
  }

  button10Click(event: any) {
    if (this.dialogRef) {
      this.dialogRef.close();
    }
    this.router.navigate(['replist']);
  }

  button11Click(event: any) {
    if (this.dialogRef) {
      this.dialogRef.close();
    }
    this.router.navigate(['replist']);
  }
}
