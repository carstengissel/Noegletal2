/*
  This file is automatically generated. Any changes will be overwritten.
  Modify repport-kategorier.component.ts instead.
*/
import { ChangeDetectorRef, ViewChild, AfterViewInit, Injector, OnInit, OnDestroy } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { Location } from '@angular/common';
import { Subscription } from 'rxjs/Subscription';

import { DialogService, DIALOG_PARAMETERS, DialogRef } from '@radzen/angular/dist/dialog';
import { NotificationService } from '@radzen/angular/dist/notification';
import { ContentComponent } from '@radzen/angular/dist/content';
import { HeadingComponent } from '@radzen/angular/dist/heading';
import { GridComponent } from '@radzen/angular/dist/grid';
import { AddRepCategoryItemComponent } from '../add-rep-category-item/add-rep-category-item.component';
import { AddRepCategoryComponent } from '../add-rep-category/add-rep-category.component';
import { EditRepCategoryItemComponent } from '../edit-rep-category-item/edit-rep-category-item.component';
import { EditRepCategoryComponent } from '../edit-rep-category/edit-rep-category.component';


export class RepportKategorierGenerated implements AfterViewInit, OnInit, OnDestroy {
  // Components
  @ViewChild('content1') content1: ContentComponent;
  @ViewChild('pageTitle') pageTitle: HeadingComponent;
  @ViewChild('grid0') grid0: GridComponent;
  @ViewChild('grid1') grid1: GridComponent;

  router: Router;

  cd: ChangeDetectorRef;

  route: ActivatedRoute;

  notificationService: NotificationService;

  dialogService: DialogService;

  dialogRef: DialogRef;

  _location: Location;

  _subscription: Subscription;

  parameters: any;

  constructor(private injector: Injector) {
  }

  ngOnInit() {
    this.notificationService = this.injector.get(NotificationService);

    this.dialogService = this.injector.get(DialogService);

    this.dialogRef = this.injector.get(DialogRef, null);

    this.router = this.injector.get(Router);

    this.cd = this.injector.get(ChangeDetectorRef);

    this._location = this.injector.get(Location);

    this.route = this.injector.get(ActivatedRoute);

  }

  ngAfterViewInit() {
    this._subscription = this.route.params.subscribe(parameters => {
      if (this.dialogRef) {
        this.parameters = this.injector.get(DIALOG_PARAMETERS);
      } else {
        this.parameters = parameters;
      }
      this.load();
      this.cd.detectChanges();
    });
  }

  ngOnDestroy() {
    this._subscription.unsubscribe();
  }


  load() {

  }

  grid0Add(event: any) {
    this.dialogService.open(AddRepCategoryComponent, { parameters: {}, title: 'Add Rep Category' });
  }

  grid0RowSelect(event: any) {
    this.dialogService.open(EditRepCategoryComponent, { parameters: {RepCategoryId: event.RepCategoryId}, title: 'Edit Rep Category' });
  }

  grid1Add(event: any) {
    this.dialogService.open(AddRepCategoryItemComponent, { parameters: {}, title: 'Add Rep Category Item' });
  }

  grid1RowSelect(event: any) {
    this.dialogService.open(EditRepCategoryItemComponent, { parameters: {RepCategoryItemId: event.RepCategoryItemId}, title: 'Edit Rep Category Item' });
  }
}
